[{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"abstract","dir":"Articles","previous_headings":"","what":"Abstract","title":"visStatistics: The right test, visualised","text":"package visStatistics enables rapid visualization statistical analysis raw data automatically selecting hypothesis test highest statistical power evaluate relationship response (varsample) feature (varfactor) within data.frame. core function, visstat(), generates graph showing key statistics selected test returns corresponding test results, including post-hoc analysis. minimal function call form visstat(dataframe, varsample, varfactor). input data.frame must column-based, arguments varsample varfactor must character strings naming columns data.frame. significance level α\\alpha, used throughout hypothesis testing, defined 1 - conf.level, conf.level user-controllable argument (defaulting 0.95). Data class \"numeric\" \"integer\" referred remainder vignette numerical, data class \"factor\" referred categorical. choice statistical tests performed function visstat() depends whether data numerical categorical, number levels categorical variable, distribution data. function prioritizes interpretable visual output tests remain valid assumptions evaluated applying following decision logic: response numerical predictor categorical, statistical hypothesis test central tendencies selected. categorical predictor exactly two levels, Welch’s t-test (t.test()), applied whenever groups contain 30 observations, validity test supported approximate normality sampling distribution mean central limit theorem (Rasch, Kubinger, Moder 2011; Lumley et al. 2002). smaller samples, group-wise normality assessed using Shapiro-Wilk test (shapiro.test()) significance level α\\alpha. groups found approximately normally distributed according Shapiro-Wilk test, Welch’s t-test applied; otherwise, Wilcoxon rank-sum test (wilcox.test()) used. predictors two levels, ANOVA model (aov()) initially fitted. normality residuals evaluated using Shapiro–Wilk test (shapiro.test()) Anderson–Darling test (ad.test()); residuals considered approximately normal least one two tests yields result exceeding significance threshold α\\alpha. condition met, Bartlett’s test (bartlett.test()) used assess homoscedasticity. variances homogeneous (p>αp > \\alpha), ANOVA applied Tukey’s HSD (TukeyHSD()) post-hoc comparison. variances differ significantly (p≤αp \\le \\alpha), Welch’s one-way test (oneway.test()) used, also followed Tukey’s HSD. residuals normally distributed according tests (p≤αp \\le \\alpha), Kruskal-Wallis test (kruskal.test()) selected, followed pairwise Wilcoxon tests (pairwise.wilcox.test()). graphical overview decision logic used provided figure. Decision tree used select appropriate statistical test categorical predictor numerical response, based number factor levels, normality homoscedasticity. response predictor numerical, simple linear regression model (lm()) fitted analysed detail, including residual diagnostics, formal tests, plotting fitted values confidence bands. Note one explanatory variable allowed, function designed two-dimensional visualisation. case two categorical variables, visstat() tests null hypothesis predictor response variables independent using either chisq.test() fisher.test(). choice test based Cochran’s rule (Cochran 1954), advises χ2\\chi^2 approximation reliable expected cell count zero 20 percent cells expected counts 5. Note: Except user-adjustable conf.level parameter, statistical tests applied using default settings corresponding base R functions (e.g., t.test()). consequence, paired tests currently supported. Furthermore, since main purpose package visualize statistical test results, simple linear regression implemented.","code":"knitr::include_graphics(\"../man/figures/decision_tree.png\")"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"decision-logic-for-selecting-tests-of-central-tendency","dir":"Articles","previous_headings":"","what":"Decision logic for selecting tests of central tendency","title":"visStatistics: The right test, visualised","text":"feature consists class “factor” two levels response consists class “numeric” “integer” (mode “numeric”), statistical tests applied compare central tendencies across groups. section describes conditions parametric non-parametric tests chosen, based response type, number factor levels, underlying distributional assumptions.","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"welchs-t-test-and-wilcoxon-rank-sum-test","dir":"Articles","previous_headings":"Decision logic for selecting tests of central tendency","what":"Welch’s t-test and Wilcoxon rank sum test","title":"visStatistics: The right test, visualised","text":"feature variable exactly two levels, Welch’s t-test Wilcoxon rank-sum test applied. Welch’s t-test assumes observations independent response variable approximately normally distributed within group. contrast Student’s t-test, require assumption equal variances (homoscedasticity) groups. Welch’s test remains valid exhibits minimal loss efficiency even assumptions Student’s t-test—namely, normality equal variances response variable across groups—satisfied (Moser Stevens 1992; Delacre et al. 2017). Therefore, Student’s t-test implemented. Wilcoxon rank-sum test (wilcox.test()) non-parametric alternative tests difference location two independent distributions. function selects tests follows. groups contain 30 observations, Welch’s t-test (t.test()) always applied, relying central limit theorem justify application regardless underlying normality (Rasch, Kubinger, Moder 2011; Lumley et al. 2002). either group contains fewer 30 observations, Shapiro–Wilk test (shapiro.test()) applied separately group. Welch’s t-test used tests reject normality significance level $$; otherwise, Wilcoxon rank-sum test (wilcox.test()) applied. graphical output consists box plots overlaid jittered points display individual observations. Welch’s t-test applied, function includes confidence intervals based user-specified conf.level. function returns list containing results applied test summary statistics used construct plot.","code":""},{"path":[]},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"welchs-t-test","dir":"Articles","previous_headings":"Decision logic for selecting tests of central tendency > Welch’s t-test and Wilcoxon rank sum test > Examples","what":"Welch’s t-test","title":"visStatistics: The right test, visualised","text":"example, use Motor Trend Car Road Tests data set (mtcars), contains 32 observations. example , mpg denotes miles per (US) gallon, represents transmission type (0 = automatic, 1 = manual).  Increasing confidence level conf.level default 0.95 0.99 results wider confidence intervals, higher confidence level requires conservative bounds ensure interval includes true parameter value greater certainty.","code":"mtcars$am <- as.factor(mtcars$am) t_test_statistics <- visstat(mtcars, \"mpg\", \"am\") mtcars$am <- as.factor(mtcars$am) t_test_statistics_99 <- visstat(mtcars, \"mpg\", \"am\", conf.level = 0.99)"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"wilcoxon-rank-sum-test","dir":"Articles","previous_headings":"Decision logic for selecting tests of central tendency > Welch’s t-test and Wilcoxon rank sum test > Examples","what":"Wilcoxon rank sum test","title":"visStatistics: The right test, visualised","text":"","code":"grades_gender <- data.frame(   sex = as.factor(c(rep(\"girl\", 21), rep(\"boy\", 23))),   grade = c(     19.3, 18.1, 15.2, 18.3, 7.9, 6.2, 19.4,     20.3, 9.3, 11.3, 18.2, 17.5, 10.2, 20.1, 13.3, 17.2, 15.1, 16.2, 17.0,     16.5, 5.1, 15.3, 17.1, 14.8, 15.4, 14.4, 7.5, 15.5, 6.0, 17.4,     7.3, 14.3, 13.5, 8.0, 19.5, 13.4, 17.9, 17.7, 16.4, 15.6, 17.3, 19.9, 4.4, 2.1   ) )  wilcoxon_statistics <- visstat(grades_gender, \"grade\", \"sex\")"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"one-way-test-anova-or-kruskal-wallis-test","dir":"Articles","previous_headings":"Decision logic for selecting tests of central tendency","what":"One-way test, ANOVA or Kruskal-Wallis test","title":"visStatistics: The right test, visualised","text":"feature class “factor” two levels response mode “numeric”, visstat() initially attempts analysis variance (ANOVA). ANOVA performed following null hypotheses rejected specified conf.level: standardized residuals follow normal distribution, residuals exhibit homoscedasticity (equal variances across groups). assumption normality satisfied, visstat() applies Welch’s one-way test (oneway.test()). normality assumption violated, Kruskal-W allis test (kruskal.test()) used instead. assumptions tested internally using visAnovaAssumptions() function.","code":""},{"path":[]},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"residual-analysis","dir":"Articles","previous_headings":"Decision logic for selecting tests of central tendency > One-way test, ANOVA or Kruskal-Wallis test > Checking the ANOVA assumptions","what":"Residual analysis","title":"visStatistics: The right test, visualised","text":"visAnovaAssumptions() function assesses normality standardized residuals ANOVA fit using Shapiro-W ilk test (shapiro.test()) Anderson-Darling test (ad.test()). Normality assumed least one two tests yields pp-value greater 1−1 -conf.level. function generates two diagnostic plots: - scatterplot standardized residuals fitted means linear model level feature (varfactor), - Q-Q plot standardized residuals.","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"homoscedasticity-homogeneity-of-variances-in-each-level-bartlett-test","dir":"Articles","previous_headings":"Decision logic for selecting tests of central tendency > One-way test, ANOVA or Kruskal-Wallis test > Checking the ANOVA assumptions","what":"Homoscedasticity: homogeneity of variances in each level: Bartlett test","title":"visStatistics: The right test, visualised","text":"aov() oneway.test() assess whether two samples drawn normal distributions mean. aov() assumes homogeneity variances across groups, oneway.test() require variances equal. Homoscedasticity assessed using Bartletts test (bartlett.test()`), tests null hypothesis variances across levels grouping variable equal.","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"one-way-test-and-anova","dir":"Articles","previous_headings":"Decision logic for selecting tests of central tendency > One-way test, ANOVA or Kruskal-Wallis test","what":"One-way test and ANOVA","title":"visStatistics: The right test, visualised","text":"Depending pp-value returned bartlett.test(), corresponding test selected pp-value displayed figure title: pp-value bartlett.test() greater 1−1 -conf.level, assume homogeneity variances across groups report pp-value ANOVA (aov()). Otherwise, homoscedasticity assumed, function reports pp-value Welch’s one-way test (oneway.test()).","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"post-hoc-analysis-tukeys-honestly-significant-differences-hsd-and-sidak-corrected-confidence-intervals","dir":"Articles","previous_headings":"Decision logic for selecting tests of central tendency > One-way test, ANOVA or Kruskal-Wallis test > One-way test and ANOVA","what":"Post-hoc analysis: Tukey’s Honestly Significant Differences (HSD) and Sidak-corrected confidence intervals","title":"visStatistics: The right test, visualised","text":"Simple pairwise comparisons group means following analysis variance increase probability incorrectly declaring significant difference , fact, none . inflation error quantified family-wise error rate, refers probability making least one Type error, , falsely rejecting null hypothesis across pairwise comparisons. control , visstat() performs post-hoc analysis using Tukey’s Honestly Significant Difference (HSD) test displays Sidak-corrected confidence intervals. visstat() function controls probability Type error applying Tukey`s Honestly Significant Differences procedure, implemented TukeyHSD(). Based specified confidence level (conf.level), constructs set confidence intervals pairwise differences factor level means. significant difference two means indicated corresponding confidence interval include zero. function returns HSD-adjusted pp-values associated confidence intervals pairwise comparisons. graphical output one-way test ANOVA, green letters displayed group summarize results Tukey HSD post-hoc test: Two groups considered significantly different assigned different letters, indicating Tukey HSD-adjusted pp-value smaller α=1−\\alpha = 1 -conf.level. Tukey`s HSD procedure based pairwise comparisons differences means factor level produces set corresponding confidence intervals. Sidak procedure, hand, addresses problems type error lowering acceptable probability type error comparisons levels independent, categorical variable. Sidak corrected acceptable probability error (Šidák 1967) defined αSidak=(1\\alpha_{Sidak}=(1-conf.int)1/M)^{1/M}, M=n⋅(n−1)2M=\\frac{n\\cdot (n-1)}{2} number pairwise comparisons nn levels categorical variable. graphical display One-way test ANOVA, visstat() displays conf.level ⋅100%\\cdot\\; 100 \\%-confidence intervals alongside larger, Sidak-corrected (1−αSidak)⋅100%(1-\\alpha_{Sidak})\\cdot 100\\;\\%-confidence intervals. Note current structure visstat() allow study interactions different levels independent variable.","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"kruskal-wallis-test","dir":"Articles","previous_headings":"Decision logic for selecting tests of central tendency > One-way test, ANOVA or Kruskal-Wallis test","what":"Kruskal-Wallis test","title":"visStatistics: The right test, visualised","text":"pp-value Shapiro-Wilk test (shapiro.test()) applied standardized residuals smaller significance level 1−1 -conf.level, visstat() selects non-parametric alternative: Kruskal-Wallis rank sum test. function kruskal.test() tests null hypothesis group medians equal across levels categorical feature.","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"post-hoc-analysis-pairwise-wilcox-test","dir":"Articles","previous_headings":"Decision logic for selecting tests of central tendency > One-way test, ANOVA or Kruskal-Wallis test > Kruskal-Wallis test","what":"Post-hoc analysis: pairwise.wilcox.test()","title":"visStatistics: The right test, visualised","text":"post-hoc analysis following Kruskal-Wallis test, visstat() applies pairwise Wilcoxon rank sum test using pairwise.wilcox.test(), Holm-s method default adjustment multiple comparisons (Holm 1979). Holm-adjusted pp-value given pair groups smaller significance level 1−1 -conf.level, green letters displayed corresponding box plots differ. Otherwise, groups considered significantly different. Apart multiple comparison adjustment, graphical representation Kruskal-Wallis result similar used Wilcoxon rank sum test. function returns list containing test statistic Kruskal-Wallis rank sum test, along Holm-adjusted pp-values pairwise comparisons.","code":""},{"path":[]},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"one-way-test","dir":"Articles","previous_headings":"Decision logic for selecting tests of central tendency > One-way test, ANOVA or Kruskal-Wallis test > Examples","what":"One-way test:","title":"visStatistics: The right test, visualised","text":"npk dataset reports yield peas (pounds per block) agricultural experiment conducted six blocks. experiment, application three different fertilisers - nitrogen (N), phosphate (P), potassium (K) - varied systematically. block received either none, one, two, three fertilisers,  Normality residuals supported graphical diagnostics (scatter plot standardized residuals, Q-Q plot) formal tests (Shapiro-Wilk Anderson-Darling, p>αp > \\alpha). However, homogeneity variances supported given confidence level (p<αp < \\alpha, bartlett.test()), pp-value variance-robust oneway.test() reported. Post-hoc analysis TukeyHSD() shows significant yield differences blocks, share group label (e.g., green letters).","code":"oneway_npk <- visstat(npk, \"yield\", \"block\")"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"anova","dir":"Articles","previous_headings":"Decision logic for selecting tests of central tendency > One-way test, ANOVA or Kruskal-Wallis test > Examples","what":"ANOVA","title":"visStatistics: The right test, visualised","text":"InsectSprays dataset reports insect counts agricultural experimental units treated six different insecticides. stabilise variance counts, apply square root transformation response variable.  transformation, homogeneity variances can assumed (p>αp> \\alpha calculated bartlett.test()), pp-value aov() displayed.","code":"insect_sprays_tr <- InsectSprays insect_sprays_tr$count_sqrt <- sqrt(InsectSprays$count) visstat(insect_sprays_tr, \"count_sqrt\", \"spray\")"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"kruskal-wallis-rank-sum-test","dir":"Articles","previous_headings":"Decision logic for selecting tests of central tendency > One-way test, ANOVA or Kruskal-Wallis test > Examples","what":"Kruskal-Wallis rank sum test","title":"visStatistics: The right test, visualised","text":"iris dataset contains petal width measurements (cm) three different iris species.  example, scatter plots standardised residuals Q-Q plot suggest residuals normally distributed. confirmed small pp-values Shapiro-Wilk Anderson-Darling tests. pp-values significance level α=1−\\alpha = 1 -conf.level, visstat() switches non-parametric kruskal.test(). Post-hoc analysis using pairwise.wilcox.test() shows significant differences petal width three species, indicated distinct group labels (green letters differ).","code":"visstat(iris, \"Petal.Width\", \"Species\")"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"simple-linear-regression","dir":"Articles","previous_headings":"","what":"Simple linear regression","title":"visStatistics: The right test, visualised","text":"feature varfactor response varsample one level type numerical integer, visstat() performs simple linear regression. Note multiple linear regression implemented, main focus visstat() visualisation statistical tests. feature varfactor response varsample contain one level type numeric integer, visstat() performs simple linear regression. Note multiple linear regression implemented, main focus visstat() visualisation statistical tests.","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"residual-analysis-1","dir":"Articles","previous_headings":"Simple linear regression","what":"Residual analysis","title":"visStatistics: The right test, visualised","text":"visstat() checks normality standardised residuals lm() graphically using Shapiro-Wilk Anderson-Darling tests. pp-values null hypothesis normally distributed residuals tests smaller 1−1 -conf.int, title residual plot display message: “Requirement normally distributed residuals met”. Regardless result residual analysis, visstat() proceeds perform regression. title graphical output indicates chosen confidence level (conf.level), estimated regression parameters confidence intervals pp-values, adjusted R2R^2. plot displays raw data, fitted regression line, confidence prediction bands corresponding specified conf.level. visstat() returns list containing regression test statistics, pp-values normality tests standardised residuals, pointwise estimates confidence prediction bands.","code":""},{"path":[]},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"data-set-cars","dir":"Articles","previous_headings":"Simple linear regression > Examples","what":"Data set: cars","title":"visStatistics: The right test, visualised","text":"cars dataset reports speed cars miles per hour (speed) stopping distance feet (dist).  Increasing confidence level conf.level default 0.95 0.99 results wider confidence prediction bands:  pp-values greater conf.level Anderson-Darling normality test Shapiro-Wilk test standardised residuals indicate normality assumption residuals underlying linear regression met.","code":"linreg_cars <- visstat(cars, \"dist\", \"speed\") linreg_cars <- visstat(cars, \"dist\", \"speed\", conf.level = 0.99) linreg_trees <- visstat(trees, \"Volume\", \"Girth\", conf.level = 0.9)"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"data-set-trees","dir":"Articles","previous_headings":"Simple linear regression > Examples","what":"Data set: trees","title":"visStatistics: The right test, visualised","text":"trees dataset provides measurements diameter (Girth, inches), Height (feet), Volume (cubic feet) black cherry trees. example, choose Volume response Girth feature.  graphical analysis standardised residuals pp-values greater 1−1 -conf.level Anderson-Darling Shapiro-Wilk tests suggest assumption normally distributed residuals met. Furthermore, linear regression model explains 93% total variance response variable Volume.","code":"linreg_cars <- visstat(trees, \"Volume\", \"Girth\", conf.level = 0.9)"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"chi2--and-fisher-test","dir":"Articles","previous_headings":"","what":"χ2{\\chi}^2- and Fisher Test","title":"visStatistics: The right test, visualised","text":"feature varfactor response varsample categorical variables (.e., type factor), visstat() tests null hypothesis two variables independent. Categorical data typically represented contingency tables, cross-tabulate observed frequencies combination factor levels. Based observed frequencies, visstat() computes expected frequencies null hypothesis independence. expected frequencies sufficiently large - specifically, least 80% cells expected counts greater 5 expected count zero - function uses Pearson’s χ2{\\chi}^2-test (chisq.test()). Otherwise, switches Fisher’s exact test (fisher.test()) (Cochran 1954). 2--2 contingency tables, Yate’s continuity correction (Yates 1934) applied Pearson’s χ2{\\chi}^2-test. χ2{\\chi}^2- Fisher Test ‘visstat()’ displays grouped column plot includes respective test’s pp-value title, well mosaic plot showing Pearson residuals (see documentation mosaic() vcd package details). features visstat() illustrated using built-data set HairEyeColor.","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"data-preparation-transforming-a-contingency-table-to-data-frame","dir":"Articles","previous_headings":"χ2{\\chi}^2- and Fisher Test","what":"Data preparation: Transforming a contingency table to data.frame","title":"visStatistics: The right test, visualised","text":"visstat() requires input form column-based data.frame. Contingency tables can converted format using helper function counts_to_cases(). counts_to_cases() transforms contingency table HairEyeColor data.frame named HairEyeColorDataFrame.","code":"HairEyeColorDataFrame <- counts_to_cases(as.data.frame(HairEyeColor))"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"pearsons-chi2-test","dir":"Articles","previous_headings":"χ2{\\chi}^2- and Fisher Test","what":"Pearson’s χ2{\\chi}^2-test","title":"visStatistics: The right test, visualised","text":"","code":"hair_eye_color_df <- counts_to_cases(as.data.frame(HairEyeColor)) visstat(hair_eye_color_df, \"Hair\", \"Eye\")"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"pearsons-chi2-test-with-yates-continuity-correction","dir":"Articles","previous_headings":"χ2{\\chi}^2- and Fisher Test > Pearson’s χ2{\\chi}^2-test","what":"Pearson’s χ2{\\chi}^2-test with Yate’s continuity correction","title":"visStatistics: The right test, visualised","text":"2--2 contingency tables, visstat() applies Yate’s continuity correction (Yates 1934) computing χ2\\chi^2 test statistic. following example, restrict data participants either black brown hair either brown blue eyes, resulting 2--2 contingency table.","code":"hair_black_brown_eyes_brown_blue <- HairEyeColor[1:2, 1:2, ] # Transform to data frame hair_black_brown_eyes_brown_blue_df <- counts_to_cases(as.data.frame(hair_black_brown_eyes_brown_blue)) # Chi-squared test visstat(hair_black_brown_eyes_brown_blue_df, \"Hair\", \"Eye\")"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"fishers-exact-test-and-mosaic-plot-with-pearson-residuals","dir":"Articles","previous_headings":"χ2{\\chi}^2- and Fisher Test","what":"Fisher’s exact test and mosaic plot with Pearson residuals","title":"visStatistics: The right test, visualised","text":", extract 2--2 contingency table full dataset, time keeping male participants black brown hair hazel green eyes. Pearson’s χ2{\\chi}^2 test applied table yield expected frequency less 5 one four cells (25% cells), violates requirement least 80% expected frequencies must 5 greater (Cochran 1954). Therefore, visstat() automatically selects Fisher’s exact test instead.","code":"hair_eye_color_male <- HairEyeColor[, , 1] # Slice out a 2 by 2 contingency table black_brown_hazel_green_male <- hair_eye_color_male[1:2, 3:4] # Transform to data frame black_brown_hazel_green_male <- counts_to_cases(as.data.frame(black_brown_hazel_green_male)) # Fisher test fisher_stats <- visstat(black_brown_hazel_green_male, \"Hair\", \"Eye\")"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"saving-the-graphical-output","dir":"Articles","previous_headings":"","what":"Saving the graphical output","title":"visStatistics: The right test, visualised","text":"generated graphics can saved file format supported Cairo(), including “png”, “jpeg”, “pdf”, “svg”, “ps”, “tiff”. following example, store graphics PNG format plotDirectory tempdir(). file names reflect statistical test used variable names involved. Remove graphical output plotDirectory:","code":"visstat(black_brown_hazel_green_male, \"Hair\", \"Eye\",   graphicsoutput = \"png\", plotDirectory =      tempdir() ) file.remove(file.path(tempdir(), \"chi_squared_or_fisher_Hair_Eye.png\")) #> [1] TRUE file.remove(file.path(tempdir(), \"mosaic_complete_Hair_Eye.png\")) #> [1] TRUE"},{"path":[]},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"numerical-response-categorical-feature","dir":"Articles","previous_headings":"Implemented tests","what":"Numerical response ~ categorical feature","title":"visStatistics: The right test, visualised","text":"response numerical feature categorical, test central tendencies selected: t.test(), wilcox.test(), aov(), oneway.test(),kruskal.test()","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"normality-assumption-check","dir":"Articles","previous_headings":"Implemented tests > Numerical response ~ categorical feature","what":"Normality assumption check","title":"visStatistics: The right test, visualised","text":"shapiro.test() ad.test()","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"homoscedasticity-assumption-check","dir":"Articles","previous_headings":"Implemented tests > Numerical response ~ categorical feature","what":"Homoscedasticity assumption check","title":"visStatistics: The right test, visualised","text":"bartlett.test()","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"post-hoc-tests","dir":"Articles","previous_headings":"Implemented tests > Numerical response ~ categorical feature","what":"Post-hoc tests","title":"visStatistics: The right test, visualised","text":"TukeyHSD() (aov()oneway.test()) pairwise.wilcox.test() (kruskal.test())","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"numerical-response-numerical-feature","dir":"Articles","previous_headings":"Implemented tests","what":"Numerical response ~ numerical feature","title":"visStatistics: The right test, visualised","text":"response feature numerical, simple linear regression model fitted: lm()","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"categorical-response-categorical-predictor","dir":"Articles","previous_headings":"Implemented tests","what":"Categorical response ~ categorical predictor","title":"visStatistics: The right test, visualised","text":"variables categorical, visstat() tests null hypothesis independence using one following: chisq.test() (default larger samples) fisher.test() (used small expected cell counts based Cochran’s rule)","code":""},{"path":[]},{"path":"https://shhschilling.github.io/visStatistics/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sabine Schilling. Maintainer, author, copyright holder. Peter Kauf. Contributor.","code":""},{"path":"https://shhschilling.github.io/visStatistics/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schilling S (2025). visStatistics: Automated Selection Visualisation Statistical Hypothesis Tests. R package version 0.1.3, https://github.com/shhschilling/visStatistics.","code":"@Manual{,   title = {visStatistics: Automated Selection and Visualisation of Statistical Hypothesis Tests},   author = {Sabine Schilling},   year = {2025},   note = {R package version 0.1.3},   url = {https://github.com/shhschilling/visStatistics}, }"},{"path":"https://shhschilling.github.io/visStatistics/index.html","id":"visstatistics-the-right-test-visualised","dir":"","previous_headings":"","what":"Automated Selection and Visualisation of Statistical Hypothesis Tests","title":"Automated Selection and Visualisation of Statistical Hypothesis Tests","text":"visStatistics allows rapid visualisation statistical analysis raw data. automatically selects applies appropriate hypothesis test evaluate relationship response (varsample) feature (varfactor) within data.frame. minimal function call looks main function visstat() looks like: input must column-based data.frame, varsample varfactor character strings naming columns data frame. function selects statistical test based class response feature variables, number levels categorical variables, conditions normality homoscedasticity. automatically generated output figures illustrate selected statistical test, display main test statistics, include assumption checks post hoc comparisons applicable. primary test results returned list object. automated workflow particularly suited browser-based interfaces server-side R applications interact databases. detailed description decision logic see","code":"visstat(dataframe, varsample = \"response\", varfactor = \"feature\") vignette(\"visStatistics\")"},{"path":"https://shhschilling.github.io/visStatistics/index.html","id":"installation-of-latest-stable-version-from-cran","dir":"","previous_headings":"","what":"Installation of latest stable version from CRAN","title":"Automated Selection and Visualisation of Statistical Hypothesis Tests","text":"Install package Load package","code":"install.packages(\"visStatistics\") library(visStatistics)"},{"path":"https://shhschilling.github.io/visStatistics/index.html","id":"installation-of-the-development-version-from-github","dir":"","previous_headings":"","what":"Installation of the development version from GitHub","title":"Automated Selection and Visualisation of Statistical Hypothesis Tests","text":"Install devtools CRAN already installed: Load devtools package: Install visStatistics package GitHub: Load visStatistics package: View help main function:","code":"install.packages(\"devtools\") library(devtools) install_github(\"shhschilling/visStatistics\") library(visStatistics) ?visstat"},{"path":"https://shhschilling.github.io/visStatistics/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Automated Selection and Visualisation of Statistical Hypothesis Tests","text":"","code":"library(visStatistics)"},{"path":[]},{"path":"https://shhschilling.github.io/visStatistics/index.html","id":"insectsprays-data-set","dir":"","previous_headings":"Examples > Welch t-test","what":"InsectSprays data set","title":"Automated Selection and Visualisation of Statistical Hypothesis Tests","text":"","code":"insect_sprays_a_b <-   InsectSprays[which(InsectSprays$spray == \"A\" | InsectSprays$spray == \"B\"), ] insect_sprays_a_b$spray <- factor(insect_sprays_a_b$spray) visstat(insect_sprays_a_b, \"count\", \"spray\")"},{"path":"https://shhschilling.github.io/visStatistics/index.html","id":"mtcars-data-set","dir":"","previous_headings":"Examples > Welch t-test","what":"mtcars data set","title":"Automated Selection and Visualisation of Statistical Hypothesis Tests","text":"","code":"mtcars$am <- as.factor(mtcars$am) t_test_statistics <- visstat(mtcars, \"mpg\", \"am\")"},{"path":"https://shhschilling.github.io/visStatistics/index.html","id":"wilcoxon-rank-sum-test","dir":"","previous_headings":"Examples","what":"Wilcoxon rank sum test","title":"Automated Selection and Visualisation of Statistical Hypothesis Tests","text":"","code":"grades_gender <- data.frame(   sex = as.factor(c(rep(\"girl\", 21), rep(\"boy\", 23))),   grade = c(     19.3, 18.1, 15.2, 18.3, 7.9, 6.2, 19.4,     20.3, 9.3, 11.3, 18.2, 17.5, 10.2, 20.1, 13.3, 17.2, 15.1, 16.2, 17.0,     16.5, 5.1, 15.3, 17.1, 14.8, 15.4, 14.4, 7.5, 15.5, 6.0, 17.4, 7.3, 14.3,     13.5, 8.0, 19.5, 13.4, 17.9, 17.7, 16.4, 15.6, 17.3, 19.9, 4.4, 2.1   ) )  wilcoxon_statistics <- visstat(grades_gender, \"grade\", \"sex\")"},{"path":"https://shhschilling.github.io/visStatistics/index.html","id":"anova","dir":"","previous_headings":"Examples","what":"ANOVA","title":"Automated Selection and Visualisation of Statistical Hypothesis Tests","text":"","code":"insect_sprays_tr <- InsectSprays insect_sprays_tr$count_sqrt <- sqrt(InsectSprays$count) visstat(insect_sprays_tr, \"count_sqrt\", \"spray\")"},{"path":"https://shhschilling.github.io/visStatistics/index.html","id":"one-way-test","dir":"","previous_headings":"Examples","what":"One-way test","title":"Automated Selection and Visualisation of Statistical Hypothesis Tests","text":"","code":"one_way_npk <- visstat(npk, \"yield\", \"block\")"},{"path":"https://shhschilling.github.io/visStatistics/index.html","id":"kruskal-wallis-test","dir":"","previous_headings":"Examples","what":"Kruskal-Wallis test","title":"Automated Selection and Visualisation of Statistical Hypothesis Tests","text":"generated graphs can saved available formats Cairo package. save graphical output type “pdf” plotDirectory tempdir():","code":"visstat(iris, \"Petal.Width\", \"Species\",   graphicsoutput = \"pdf\", plotDirectory = tempdir() )"},{"path":"https://shhschilling.github.io/visStatistics/index.html","id":"linear-regression","dir":"","previous_headings":"Examples","what":"Linear Regression","title":"Automated Selection and Visualisation of Statistical Hypothesis Tests","text":"Increasing confidence level conf.level default 0.95 0.99 leads two wider confidence prediction bands:","code":"linreg_cars <- visstat(cars, \"dist\", \"speed\")"},{"path":"https://shhschilling.github.io/visStatistics/index.html","id":"pearsons-chi-squared-test","dir":"","previous_headings":"Examples","what":"Pearson’s Chi-squared test","title":"Automated Selection and Visualisation of Statistical Hypothesis Tests","text":"Count data sets often presented multidimensional arrays, -called contingency tables, whereas visstat() requires data.frame column structure. Arrays can transformed column wise structure helper function counts_to_cases():","code":"hair_eye_color_df <- counts_to_cases(as.data.frame(HairEyeColor)) visstat(hair_eye_color_df, \"Hair\", \"Eye\")"},{"path":"https://shhschilling.github.io/visStatistics/index.html","id":"fishers-exact-test","dir":"","previous_headings":"Examples","what":"Fisher’s exact test","title":"Automated Selection and Visualisation of Statistical Hypothesis Tests","text":"","code":"hair_eye_color_male <- HairEyeColor[, , 1] # Slice out a 2 by 2 contingency table black_brown_hazel_green_male <- hair_eye_color_male[1:2, 3:4] # Transform to data frame black_brown_hazel_green_male <- counts_to_cases(as.data.frame(black_brown_hazel_green_male)) # Fisher test fisher_stats <- visstat(black_brown_hazel_green_male, \"Hair\", \"Eye\")"},{"path":"https://shhschilling.github.io/visStatistics/index.html","id":"implemented-tests","dir":"","previous_headings":"","what":"Implemented tests","title":"Automated Selection and Visualisation of Statistical Hypothesis Tests","text":"Data class \"numeric\" \"integer\" referred numerical, data class \"factor\" referred categorical.","code":""},{"path":"https://shhschilling.github.io/visStatistics/index.html","id":"numerical-response--categorical-feature","dir":"","previous_headings":"Implemented tests","what":"Numerical response ~ categorical feature","title":"Automated Selection and Visualisation of Statistical Hypothesis Tests","text":"response numerical feature categorical, test central tendencies selected: t.test(), wilcox.test(), aov(), oneway.test(),kruskal.test()","code":""},{"path":"https://shhschilling.github.io/visStatistics/index.html","id":"normality-assumption-check","dir":"","previous_headings":"Implemented tests > Numerical response ~ categorical feature","what":"Normality assumption check","title":"Automated Selection and Visualisation of Statistical Hypothesis Tests","text":"shapiro.test() ad.test()","code":""},{"path":"https://shhschilling.github.io/visStatistics/index.html","id":"homoscedasticity-assumption-check","dir":"","previous_headings":"Implemented tests > Numerical response ~ categorical feature","what":"Homoscedasticity assumption check","title":"Automated Selection and Visualisation of Statistical Hypothesis Tests","text":"bartlett.test()","code":""},{"path":"https://shhschilling.github.io/visStatistics/index.html","id":"post-hoc-tests","dir":"","previous_headings":"Implemented tests > Numerical response ~ categorical feature","what":"Post-hoc tests","title":"Automated Selection and Visualisation of Statistical Hypothesis Tests","text":"TukeyHSD() (used following aov()oneway.test()) pairwise.wilcox.test() (used following kruskal.test()) decision tree summarises underlying decision logic tests central tendencies. Decision tree used select appropriate statistical test categorical predictor numerical response, based number factor levels, normality homoscedasticity.","code":"knitr::include_graphics(\"man/figures/decision_tree.png\")"},{"path":"https://shhschilling.github.io/visStatistics/index.html","id":"numerical-response--numerical-feature","dir":"","previous_headings":"Implemented tests","what":"Numerical response ~ numerical feature","title":"Automated Selection and Visualisation of Statistical Hypothesis Tests","text":"response feature numerical, simple linear regression model fitted: lm()","code":""},{"path":"https://shhschilling.github.io/visStatistics/index.html","id":"categorical-response--categorical-predictor","dir":"","previous_headings":"Implemented tests","what":"Categorical response ~ categorical predictor","title":"Automated Selection and Visualisation of Statistical Hypothesis Tests","text":"variables categorical, visstat() tests null hypothesis independence using one following: chisq.test() (default larger samples) fisher.test() (used small expected cell counts based Cochran’s rule)","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/colorscheme.html","id":null,"dir":"Reference","previous_headings":"","what":"colorscheme(x) selects color scheme of graphical output. Function parameter NULL lists all available color schemes, 1 a color tuple of green and blue 2 a color tuple of dark green and turquoi, 3 a colorplaette as defined by RcolorBrewer — colorscheme","title":"colorscheme(x) selects color scheme of graphical output. Function parameter NULL lists all available color schemes, 1 a color tuple of green and blue 2 a color tuple of dark green and turquoi, 3 a colorplaette as defined by RcolorBrewer — colorscheme","text":"colorscheme(x) selects color scheme graphical output. Function parameter NULL lists available color schemes, 1 color tuple green blue 2 color tuple dark green turquoi, 3 colorplaette defined RcolorBrewer","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/colorscheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"colorscheme(x) selects color scheme of graphical output. Function parameter NULL lists all available color schemes, 1 a color tuple of green and blue 2 a color tuple of dark green and turquoi, 3 a colorplaette as defined by RcolorBrewer — colorscheme","text":"","code":"colorscheme(colorcode = NULL)"},{"path":"https://shhschilling.github.io/visStatistics/reference/colorscheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"colorscheme(x) selects color scheme of graphical output. Function parameter NULL lists all available color schemes, 1 a color tuple of green and blue 2 a color tuple of dark green and turquoi, 3 a colorplaette as defined by RcolorBrewer — colorscheme","text":"colorcode selects color scheme. parameters NULL: list available color schemes, 1: colortuple, 2, colortuple2, 3, ColorPalette","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/colorscheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"colorscheme(x) selects color scheme of graphical output. Function parameter NULL lists all available color schemes, 1 a color tuple of green and blue 2 a color tuple of dark green and turquoi, 3 a colorplaette as defined by RcolorBrewer — colorscheme","text":"selected color scheme, colors given Hex Code #RRGGBB names","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/counts_to_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data frame of counts to data frame of cases. data frame must contain a column with frequencies (counts) as generated by as.data.frame from a contingency table — counts_to_cases","title":"Convert data frame of counts to data frame of cases. data frame must contain a column with frequencies (counts) as generated by as.data.frame from a contingency table — counts_to_cases","text":"Convert data frame counts data frame cases. data frame must contain column frequencies (counts) generated .data.frame contingency table","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/counts_to_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data frame of counts to data frame of cases. data frame must contain a column with frequencies (counts) as generated by as.data.frame from a contingency table — counts_to_cases","text":"","code":"counts_to_cases(x, countcol = \"Freq\")"},{"path":"https://shhschilling.github.io/visStatistics/reference/counts_to_cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data frame of counts to data frame of cases. data frame must contain a column with frequencies (counts) as generated by as.data.frame from a contingency table — counts_to_cases","text":"x data.frame counts generated contingency table. countcol character string, name column x containing counts. Default name column  'Freq'.","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/counts_to_cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert data frame of counts to data frame of cases. data frame must contain a column with frequencies (counts) as generated by as.data.frame from a contingency table — counts_to_cases","text":"data frame cases dimension (total number counts sum 'Freq' x) times 2.","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/counts_to_cases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert data frame of counts to data frame of cases. data frame must contain a column with frequencies (counts) as generated by as.data.frame from a contingency table — counts_to_cases","text":"","code":"counts_to_cases(as.data.frame(HairEyeColor[, , 1]), countcol = \"Freq\") #>        Hair   Eye #> 1     Black Brown #> 1.1   Black Brown #> 1.2   Black Brown #> 1.3   Black Brown #> 1.4   Black Brown #> 1.5   Black Brown #> 1.6   Black Brown #> 1.7   Black Brown #> 1.8   Black Brown #> 1.9   Black Brown #> 1.10  Black Brown #> 1.11  Black Brown #> 1.12  Black Brown #> 1.13  Black Brown #> 1.14  Black Brown #> 1.15  Black Brown #> 1.16  Black Brown #> 1.17  Black Brown #> 1.18  Black Brown #> 1.19  Black Brown #> 1.20  Black Brown #> 1.21  Black Brown #> 1.22  Black Brown #> 1.23  Black Brown #> 1.24  Black Brown #> 1.25  Black Brown #> 1.26  Black Brown #> 1.27  Black Brown #> 1.28  Black Brown #> 1.29  Black Brown #> 1.30  Black Brown #> 1.31  Black Brown #> 2     Brown Brown #> 2.1   Brown Brown #> 2.2   Brown Brown #> 2.3   Brown Brown #> 2.4   Brown Brown #> 2.5   Brown Brown #> 2.6   Brown Brown #> 2.7   Brown Brown #> 2.8   Brown Brown #> 2.9   Brown Brown #> 2.10  Brown Brown #> 2.11  Brown Brown #> 2.12  Brown Brown #> 2.13  Brown Brown #> 2.14  Brown Brown #> 2.15  Brown Brown #> 2.16  Brown Brown #> 2.17  Brown Brown #> 2.18  Brown Brown #> 2.19  Brown Brown #> 2.20  Brown Brown #> 2.21  Brown Brown #> 2.22  Brown Brown #> 2.23  Brown Brown #> 2.24  Brown Brown #> 2.25  Brown Brown #> 2.26  Brown Brown #> 2.27  Brown Brown #> 2.28  Brown Brown #> 2.29  Brown Brown #> 2.30  Brown Brown #> 2.31  Brown Brown #> 2.32  Brown Brown #> 2.33  Brown Brown #> 2.34  Brown Brown #> 2.35  Brown Brown #> 2.36  Brown Brown #> 2.37  Brown Brown #> 2.38  Brown Brown #> 2.39  Brown Brown #> 2.40  Brown Brown #> 2.41  Brown Brown #> 2.42  Brown Brown #> 2.43  Brown Brown #> 2.44  Brown Brown #> 2.45  Brown Brown #> 2.46  Brown Brown #> 2.47  Brown Brown #> 2.48  Brown Brown #> 2.49  Brown Brown #> 2.50  Brown Brown #> 2.51  Brown Brown #> 2.52  Brown Brown #> 3       Red Brown #> 3.1     Red Brown #> 3.2     Red Brown #> 3.3     Red Brown #> 3.4     Red Brown #> 3.5     Red Brown #> 3.6     Red Brown #> 3.7     Red Brown #> 3.8     Red Brown #> 3.9     Red Brown #> 4     Blond Brown #> 4.1   Blond Brown #> 4.2   Blond Brown #> 5     Black  Blue #> 5.1   Black  Blue #> 5.2   Black  Blue #> 5.3   Black  Blue #> 5.4   Black  Blue #> 5.5   Black  Blue #> 5.6   Black  Blue #> 5.7   Black  Blue #> 5.8   Black  Blue #> 5.9   Black  Blue #> 5.10  Black  Blue #> 6     Brown  Blue #> 6.1   Brown  Blue #> 6.2   Brown  Blue #> 6.3   Brown  Blue #> 6.4   Brown  Blue #> 6.5   Brown  Blue #> 6.6   Brown  Blue #> 6.7   Brown  Blue #> 6.8   Brown  Blue #> 6.9   Brown  Blue #> 6.10  Brown  Blue #> 6.11  Brown  Blue #> 6.12  Brown  Blue #> 6.13  Brown  Blue #> 6.14  Brown  Blue #> 6.15  Brown  Blue #> 6.16  Brown  Blue #> 6.17  Brown  Blue #> 6.18  Brown  Blue #> 6.19  Brown  Blue #> 6.20  Brown  Blue #> 6.21  Brown  Blue #> 6.22  Brown  Blue #> 6.23  Brown  Blue #> 6.24  Brown  Blue #> 6.25  Brown  Blue #> 6.26  Brown  Blue #> 6.27  Brown  Blue #> 6.28  Brown  Blue #> 6.29  Brown  Blue #> 6.30  Brown  Blue #> 6.31  Brown  Blue #> 6.32  Brown  Blue #> 6.33  Brown  Blue #> 6.34  Brown  Blue #> 6.35  Brown  Blue #> 6.36  Brown  Blue #> 6.37  Brown  Blue #> 6.38  Brown  Blue #> 6.39  Brown  Blue #> 6.40  Brown  Blue #> 6.41  Brown  Blue #> 6.42  Brown  Blue #> 6.43  Brown  Blue #> 6.44  Brown  Blue #> 6.45  Brown  Blue #> 6.46  Brown  Blue #> 6.47  Brown  Blue #> 6.48  Brown  Blue #> 6.49  Brown  Blue #> 7       Red  Blue #> 7.1     Red  Blue #> 7.2     Red  Blue #> 7.3     Red  Blue #> 7.4     Red  Blue #> 7.5     Red  Blue #> 7.6     Red  Blue #> 7.7     Red  Blue #> 7.8     Red  Blue #> 7.9     Red  Blue #> 8     Blond  Blue #> 8.1   Blond  Blue #> 8.2   Blond  Blue #> 8.3   Blond  Blue #> 8.4   Blond  Blue #> 8.5   Blond  Blue #> 8.6   Blond  Blue #> 8.7   Blond  Blue #> 8.8   Blond  Blue #> 8.9   Blond  Blue #> 8.10  Blond  Blue #> 8.11  Blond  Blue #> 8.12  Blond  Blue #> 8.13  Blond  Blue #> 8.14  Blond  Blue #> 8.15  Blond  Blue #> 8.16  Blond  Blue #> 8.17  Blond  Blue #> 8.18  Blond  Blue #> 8.19  Blond  Blue #> 8.20  Blond  Blue #> 8.21  Blond  Blue #> 8.22  Blond  Blue #> 8.23  Blond  Blue #> 8.24  Blond  Blue #> 8.25  Blond  Blue #> 8.26  Blond  Blue #> 8.27  Blond  Blue #> 8.28  Blond  Blue #> 8.29  Blond  Blue #> 9     Black Hazel #> 9.1   Black Hazel #> 9.2   Black Hazel #> 9.3   Black Hazel #> 9.4   Black Hazel #> 9.5   Black Hazel #> 9.6   Black Hazel #> 9.7   Black Hazel #> 9.8   Black Hazel #> 9.9   Black Hazel #> 10    Brown Hazel #> 10.1  Brown Hazel #> 10.2  Brown Hazel #> 10.3  Brown Hazel #> 10.4  Brown Hazel #> 10.5  Brown Hazel #> 10.6  Brown Hazel #> 10.7  Brown Hazel #> 10.8  Brown Hazel #> 10.9  Brown Hazel #> 10.10 Brown Hazel #> 10.11 Brown Hazel #> 10.12 Brown Hazel #> 10.13 Brown Hazel #> 10.14 Brown Hazel #> 10.15 Brown Hazel #> 10.16 Brown Hazel #> 10.17 Brown Hazel #> 10.18 Brown Hazel #> 10.19 Brown Hazel #> 10.20 Brown Hazel #> 10.21 Brown Hazel #> 10.22 Brown Hazel #> 10.23 Brown Hazel #> 10.24 Brown Hazel #> 11      Red Hazel #> 11.1    Red Hazel #> 11.2    Red Hazel #> 11.3    Red Hazel #> 11.4    Red Hazel #> 11.5    Red Hazel #> 11.6    Red Hazel #> 12    Blond Hazel #> 12.1  Blond Hazel #> 12.2  Blond Hazel #> 12.3  Blond Hazel #> 12.4  Blond Hazel #> 13    Black Green #> 13.1  Black Green #> 13.2  Black Green #> 14    Brown Green #> 14.1  Brown Green #> 14.2  Brown Green #> 14.3  Brown Green #> 14.4  Brown Green #> 14.5  Brown Green #> 14.6  Brown Green #> 14.7  Brown Green #> 14.8  Brown Green #> 14.9  Brown Green #> 14.10 Brown Green #> 14.11 Brown Green #> 14.12 Brown Green #> 14.13 Brown Green #> 14.14 Brown Green #> 15      Red Green #> 15.1    Red Green #> 15.2    Red Green #> 15.3    Red Green #> 15.4    Red Green #> 15.5    Red Green #> 15.6    Red Green #> 16    Blond Green #> 16.1  Blond Green #> 16.2  Blond Green #> 16.3  Blond Green #> 16.4  Blond Green #> 16.5  Blond Green #> 16.6  Blond Green #> 16.7  Blond Green"},{"path":"https://shhschilling.github.io/visStatistics/reference/get_samples_fact_inputfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Selects columns defined by characters varsample and varfactor from a data.frame — get_samples_fact_inputfile","title":"Selects columns defined by characters varsample and varfactor from a data.frame — get_samples_fact_inputfile","text":"Selects columns defined characters varsample varfactor dataframe, returns selected columns names.","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/get_samples_fact_inputfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selects columns defined by characters varsample and varfactor from a data.frame — get_samples_fact_inputfile","text":"","code":"get_samples_fact_inputfile(dataframe, varsample, varfactor)"},{"path":"https://shhschilling.github.io/visStatistics/reference/get_samples_fact_inputfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Selects columns defined by characters varsample and varfactor from a data.frame — get_samples_fact_inputfile","text":"dataframe data.frame list containing least two columns column headings data type character.Data must column wise ordered. varsample column name dependent variable dataframe, datatype character varfactor column name independent variable dataframe, datatype character","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/get_samples_fact_inputfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Selects columns defined by characters varsample and varfactor from a data.frame — get_samples_fact_inputfile","text":"selected columns, sample, factor, name_of_sample (character string equaling varsample), name_of_factor (character string equaling varsample)","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/get_samples_fact_inputfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Selects columns defined by characters varsample and varfactor from a data.frame — get_samples_fact_inputfile","text":"","code":"get_samples_fact_inputfile(trees, \"Girth\", \"Height\") #> $samples #>  [1]  8.3  8.6  8.8 10.5 10.7 10.8 11.0 11.0 11.1 11.2 11.3 11.4 11.4 11.7 12.0 #> [16] 12.9 12.9 13.3 13.7 13.8 14.0 14.2 14.5 16.0 16.3 17.3 17.5 17.9 18.0 18.0 #> [31] 20.6 #>  #> $fact #>  [1] 70 65 63 72 81 83 66 75 80 75 79 76 76 69 75 74 85 86 71 64 78 80 74 72 77 #> [26] 81 82 80 80 80 87 #>  #> $name_of_sample #> [1] \"Girth\" #>  #> $name_of_factor #> [1] \"Height\" #>  #> $matching_criteria #> [1] \"\" #>"},{"path":"https://shhschilling.github.io/visStatistics/reference/openGraphCairo.html","id":null,"dir":"Reference","previous_headings":"","what":"Cairo wrapper function — openGraphCairo","title":"Cairo wrapper function — openGraphCairo","text":"Cairo wrapper function returning NULL type specified","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/openGraphCairo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cairo wrapper function — openGraphCairo","text":"","code":"openGraphCairo(   width = 640,   height = 480,   fileName = NULL,   type = NULL,   fileDirectory = getwd(),   pointsize = 12,   bg = \"transparent\",   canvas = \"white\",   units = \"px\",   dpi = 150 )"},{"path":"https://shhschilling.github.io/visStatistics/reference/openGraphCairo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cairo wrapper function — openGraphCairo","text":"width see Cairo() height see Cairo() fileName name file created. include file extension '.type' file filedirectory. Default file name 'visstat_plot'. type Supported output types 'png', 'jpeg', 'pdf', 'svg', 'ps' 'tiff'. See Cairo() fileDirectory path directory, plot stored. Default current working directory. pointsize see Cairo() bg see Cairo() canvas see Cairo() units see Cairo() dpi DPI used conversion units pixels. Default value 150.","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/openGraphCairo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cairo wrapper function — openGraphCairo","text":"NULL, type specified. Otherwise see Cairo()","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/openGraphCairo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cairo wrapper function — openGraphCairo","text":"openGraphCairo() Cairo() wrapper function. Differences Cairo: ) prematurely ends function call Cairo() returning NULL, output type  types 'png', 'jpeg', 'pdf', 'svg', 'ps' 'tiff' provided. b) file argument underlying Cairo function generated file.path(fileDirectory,paste(fileName,'.', type, sep = '')).","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/openGraphCairo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cairo wrapper function — openGraphCairo","text":"","code":"##  adapted from example in \\code{Cairo()} openGraphCairo(fileName = \"normal_dist\", type = \"pdf\", fileDirectory = tempdir()) plot(rnorm(4000), rnorm(4000), col = \"#ff000018\", pch = 19, cex = 2) dev.off() # creates a file 'normal_dist.pdf' in the directory specified in fileDirectory #> pdf  #>   2  # ## remove the plot from fileDirectory file.remove(file.path(tempdir(), \"normal_dist.pdf\")) #> [1] TRUE"},{"path":"https://shhschilling.github.io/visStatistics/reference/saveGraphVisstat.html","id":null,"dir":"Reference","previous_headings":"","what":"Saves Graphical Output — saveGraphVisstat","title":"Saves Graphical Output — saveGraphVisstat","text":"Closes graphical devices dev.() saves output fileName type provided.","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/saveGraphVisstat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Saves Graphical Output — saveGraphVisstat","text":"","code":"saveGraphVisstat(   fileName = NULL,   type = NULL,   fileDirectory = getwd(),   oldfile = NULL )"},{"path":"https://shhschilling.github.io/visStatistics/reference/saveGraphVisstat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Saves Graphical Output — saveGraphVisstat","text":"fileName name file created directory fileDirectory without file extension '.type'. type see Cairo(). fileDirectory path directory, graphic stored. Default setting current working directory. oldfile old file name overwritten","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/saveGraphVisstat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Saves Graphical Output — saveGraphVisstat","text":"NULL, type fileName provided, TRUE graph   created","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/saveGraphVisstat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Saves Graphical Output — saveGraphVisstat","text":"","code":"# very simple KDE (adapted from example in Cairo()) openGraphCairo(type = \"png\", fileDirectory = tempdir()) plot(rnorm(4000), rnorm(4000), col = \"#ff000018\", pch = 19, cex = 2) # save file 'norm.png' in directory specified in fileDirectory saveGraphVisstat(\"norm\", type = \"png\", fileDirectory = tempdir()) #> [1] TRUE file.remove(file.path(tempdir(), \"norm.png\")) # remove file 'norm.png' #> [1] TRUE"},{"path":"https://shhschilling.github.io/visStatistics/reference/vis_anova_assumptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualisation of the normality distribution of the standardised residuals of the ANOVA — vis_anova_assumptions","title":"Visualisation of the normality distribution of the standardised residuals of the ANOVA — vis_anova_assumptions","text":"vis_anova_assumptions checks normality standardised residuals ANOVA. Shapiro-Wilk test shapiro.test() Anderson-Darling test ad.test() check null standardised residuals normally distributed. generates scatter plot standardised residuals versus fitted mean values linear models level fact. Furthermore normal QQ plot standardised residuals generated. null homogeneity variances  factor level tested bartlett.test().","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/vis_anova_assumptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualisation of the normality distribution of the standardised residuals of the ANOVA — vis_anova_assumptions","text":"","code":"vis_anova_assumptions(   samples,   fact,   conf.level = 0.95,   samplename = \"\",   factorname = \"\",   cex = 1 )"},{"path":"https://shhschilling.github.io/visStatistics/reference/vis_anova_assumptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualisation of the normality distribution of the standardised residuals of the ANOVA — vis_anova_assumptions","text":"samples vector containing dependent variable, datatype numeric fact vector containing independent variable, datatype factor conf.level confidence level, 0.95=default samplename name sample used graphical output, dataype character , ”=default factorname name sample used graphical output, dataype character, ”=default cex number indicating amount plotting text symbols scaled relative default. 1=default, 1.5 50% larger, 0.5 50% smaller, etc.","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/vis_anova_assumptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualisation of the normality distribution of the standardised residuals of the ANOVA — vis_anova_assumptions","text":"list containing test statistics anova, p values   generated Shapiro-Wilk test shapiro.test(),   Anderson-Darling test ad.test() bartlett.test().","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/vis_anova_assumptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualisation of the normality distribution of the standardised residuals of the ANOVA — vis_anova_assumptions","text":"","code":"ToothGrowth$dose <- as.factor(ToothGrowth$dose) vis_anova_assumptions(ToothGrowth$len, ToothGrowth$dose)  #> $summary_anova #>             Df Sum Sq Mean Sq F value   Pr(>F)     #> fact         2   2426    1213   67.42 9.53e-16 *** #> Residuals   57   1026      18                      #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $shapiro_test #>  #> \tShapiro-Wilk normality test #>  #> data:  rstandard(anova) #> W = 0.96731, p-value = 0.1076 #>  #>  #> $ad_test #>  #> \tAnderson-Darling normality test #>  #> data:  rstandard(anova) #> A = 0.68679, p-value = 0.06928 #>  #>  #> $bartlett_test #>  #> \tBartlett test of homogeneity of variances #>  #> data:  samples by fact #> Bartlett's K-squared = 0.66547, df = 2, p-value = 0.717 #>  #>   vis_anova_assumptions(ToothGrowth$len, ToothGrowth$supp)  #> $summary_anova #>             Df Sum Sq Mean Sq F value Pr(>F)   #> fact         1    205  205.35   3.668 0.0604 . #> Residuals   58   3247   55.98                  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $shapiro_test #>  #> \tShapiro-Wilk normality test #>  #> data:  rstandard(anova) #> W = 0.96949, p-value = 0.1378 #>  #>  #> $ad_test #>  #> \tAnderson-Darling normality test #>  #> data:  rstandard(anova) #> A = 0.51449, p-value = 0.185 #>  #>  #> $bartlett_test #>  #> \tBartlett test of homogeneity of variances #>  #> data:  samples by fact #> Bartlett's K-squared = 1.4217, df = 1, p-value = 0.2331 #>  #>  vis_anova_assumptions(iris$Petal.Width, iris$Species)  #> $summary_anova #>              Df Sum Sq Mean Sq F value Pr(>F)     #> fact          2  80.41   40.21     960 <2e-16 *** #> Residuals   147   6.16    0.04                    #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $shapiro_test #>  #> \tShapiro-Wilk normality test #>  #> data:  rstandard(anova) #> W = 0.97217, p-value = 0.003866 #>  #>  #> $ad_test #>  #> \tAnderson-Darling normality test #>  #> data:  rstandard(anova) #> A = 1.8447, p-value = 9.831e-05 #>  #>  #> $bartlett_test #>  #> \tBartlett test of homogeneity of variances #>  #> data:  samples by fact #> Bartlett's K-squared = 39.213, df = 2, p-value = 3.055e-09 #>  #>"},{"path":"https://shhschilling.github.io/visStatistics/reference/visstat.html","id":null,"dir":"Reference","previous_headings":"","what":"Automated Visualization of Statistical Hypothesis Testing — visstat","title":"Automated Visualization of Statistical Hypothesis Testing — visstat","text":"visstat() provides automated visualization selection statistical hypothesis test response feature variable given data.frame named dataframe, selecting test appropriate data's type, distribution, sample size, specified conf.level. data dataframe must structured column-wise, varsample varfactor character strings corresponding column names response feature variables, respectively. automatically generated output figures illustrate selected statistical hypothesis test, display main test statistics, include assumption checks post hoc comparisons applicable. primary test results returned list object.","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/visstat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automated Visualization of Statistical Hypothesis Testing — visstat","text":"","code":"visstat(   dataframe,   varsample,   varfactor,   conf.level = 0.95,   numbers = TRUE,   minpercent = 0.05,   graphicsoutput = NULL,   plotName = NULL,   plotDirectory = getwd() )"},{"path":"https://shhschilling.github.io/visStatistics/reference/visstat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automated Visualization of Statistical Hypothesis Testing — visstat","text":"dataframe data.frame containing least two columns. Data must column wise ordered. varsample column name dependent variable (response) dataframe, datatype character. varsample must one entry list names(dataframe). varfactor column name independent variable (feature) dataframe, datatype character.varsample must one entry list names(dataframe). conf.level confidence level numbers logical indicating whether show numbers mosaic count plots. minpercent number 0 1 indicating minimal fraction total count data category displayed    mosaic count plots. graphicsoutput saves plot(s) type \"png\",  \"jpg\", \"tiff\"  \"bmp\" directory specified plotDirectory. graphicsoutput=NULL, plots saved. plotName graphical output stored following naming convention \"plotName.graphicsoutput\" plotDirectory. Without specifying parameter, plotName automatically generated following convention \"statisticalTestName_varsample_varfactor\". plotDirectory specifies directory, generated plots stored. Default current working directory.","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/visstat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automated Visualization of Statistical Hypothesis Testing — visstat","text":"list containing statistics automatically selected test   meeting assumptions. values returned invisible copies.   Values can accessed assigning return value visstat.","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/visstat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Automated Visualization of Statistical Hypothesis Testing — visstat","text":"Decision logic (details, please refer package's vignette). Throughout, data class numeric integer referred numerical, data class factor referred categorical. significance level \\(\\alpha\\) defined one minus confidence level, given argument conf.level.' Assumptions normality homoscedasticity considered met corresponding test yields p-value greater alpha = 1 - 'conf.level'. choice statistical tests performed function visstat() depends whether data numerical categorical, number levels categorical variable, distribution data, chosen conf.level(). function prioritizes interpretable visual output tests remain valid assumptions, following decision logic : (1) response numerical predictor categorical, tests central tendency performed. categorical predictor two levels: - Welch's t-test (t.test()) used groups 30 observations (Lumley et al. (2002) <doi:10.1146/annurev.publheath.23.100901.140546>). - smaller samples, normality assessed using shapiro.test(). groups return p-values greater \\(\\alpha\\), Welch's t-test applied; otherwise, Wilcoxon rank-sum test (wilcox.test()) used. predictors two levels: - ANOVA model (aov()) initially fitted. - Residual normality tested shapiro.test() ad.test(). \\(p > \\alpha\\) either test, normality assumed. - Homogeneity variance tested bartlett.test():   - \\(p > \\alpha\\), use ANOVA TukeyHSD().   - \\(p \\le \\alpha\\), use oneway.test() TukeyHSD(). - residuals normal, use kruskal.test() pairwise.wilcox.test(). (2) response predictor numerical, linear model (lm()) fitted, residual diagnostics confidence band plot. (3) variables categorical, visstat() uses chisq.test() fisher.test() depending expected counts, following Cochran's rule (Cochran (1954) <doi:10.2307/3001666>). Implemented main tests: t.test(), wilcox.test(), aov(), oneway.test(), lm(), kruskal.test(), fisher.test(), chisq.test(). Implemented tests assumptions: Normality: shapiro.test() ad.test(). Heteroscedasticity: bartlett.test(). Implemented post hoc tests: TukeyHSD() aov() oneway.test(). pairwise.wilcox.test() kruskal.test().","code":""},{"path":[]},{"path":"https://shhschilling.github.io/visStatistics/reference/visstat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automated Visualization of Statistical Hypothesis Testing — visstat","text":"","code":"## Welch Two Sample t-test (calling t.test()) visstat(mtcars, \"mpg\", \"am\")    ## Wilcoxon rank sum test (calling wilcox.test()) grades_gender <- data.frame(   Sex = as.factor(c(rep(\"Girl\", 20), rep(\"Boy\", 20))),   Grade = c(     19.3, 18.1, 15.2, 18.3, 7.9, 6.2, 19.4,     20.3, 9.3, 11.3, 18.2, 17.5, 10.2, 20.1, 13.3, 17.2, 15.1, 16.2, 17.3,     16.5, 5.1, 15.3, 17.1, 14.8, 15.4, 14.4, 7.5, 15.5, 6.0, 17.4,     7.3, 14.3, 13.5, 8.0, 19.5, 13.4, 17.9, 17.7, 16.4, 15.6   ) ) visstat(grades_gender, \"Grade\", \"Sex\")   ## One-way analysis of means (oneway.test()) anova_npk <- visstat(npk, \"yield\", \"block\")   anova_npk # prints summary of tests #> $`summary statistics_anova` #>             Df Sum Sq Mean Sq F value Pr(>F)   #> fact         5  343.3   68.66   2.318 0.0861 . #> Residuals   18  533.1   29.61                  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $`summary statistics_oneway` #>  #> \tOne-way analysis of means (not assuming equal variances) #>  #> data:  samples and fact #> F = 6.2463, num df = 5.0000, denom df = 8.0508, p-value = 0.01178 #>  #>  #> $adjusted_p_values_tuk #>   Tukey multiple comparisons of means #>     95% family-wise confidence level #>  #> Fit: aov(formula = samples ~ fact) #>  #> $fact #>        diff        lwr       upr     p adj #> 2-1   3.425  -8.804242 15.654242 0.9440575 #> 3-1   6.750  -5.479242 18.979242 0.5166401 #> 4-1  -3.900 -16.129242  8.329242 0.9074049 #> 5-1  -3.500 -15.729242  8.729242 0.9390165 #> 6-1   2.325  -9.904242 14.554242 0.9893559 #> 3-2   3.325  -8.904242 15.554242 0.9503518 #> 4-2  -7.325 -19.554242  4.904242 0.4312574 #> 5-2  -6.925 -19.154242  5.304242 0.4900643 #> 6-2  -1.100 -13.329242 11.129242 0.9996936 #> 4-3 -10.650 -22.879242  1.579242 0.1094850 #> 5-3 -10.250 -22.479242  1.979242 0.1321421 #> 6-3  -4.425 -16.654242  7.804242 0.8539828 #> 5-4   0.400 -11.829242 12.629242 0.9999980 #> 6-4   6.225  -6.004242 18.454242 0.5981409 #> 6-5   5.825  -6.404242 18.054242 0.6604328 #>  #>  #> $conf.level #> [1] 0.95 #>   ## Kruskal-Wallis rank sum test (calling kruskal.test()) visstat(iris, \"Petal.Width\", \"Species\")   visstat(InsectSprays, \"count\", \"spray\")  #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties   ## Linear regression visstat(trees, \"Girth\", \"Height\", conf.level = 0.99)    ## Pearson's Chi-squared test and mosaic plot with Pearson residuals ### Transform array to data.frame HairEyeColorDataFrame <- counts_to_cases(as.data.frame(HairEyeColor)) visstat(HairEyeColorDataFrame, \"Hair\", \"Eye\")    ## 2x2 contingency tables with Fisher's exact test and mosaic plot ## with Pearson residuals HairEyeColorMaleFisher <- HairEyeColor[, , 1] ### slicing out a 2 x2 contingency table blackBrownHazelGreen <- HairEyeColorMaleFisher[1:2, 3:4] blackBrownHazelGreen <- counts_to_cases(as.data.frame(blackBrownHazelGreen)) fisher_stats <- visstat(blackBrownHazelGreen, \"Hair\", \"Eye\")   fisher_stats # print out summary statistics #> $p.value #> [1] 0.503545 #>  #> $conf.int #> [1] 0.07725895 2.40885255 #> attr(,\"conf.level\") #> [1] 0.95 #>  #> $estimate #> odds ratio  #>  0.5062015  #>  #> $null.value #> odds ratio  #>          1  #>  #> $alternative #> [1] \"two.sided\" #>  #> $method #> [1] \"Fisher's Exact Test for Count Data\" #>  #> $data.name #> [1] \"counts\" #>  #> $mosaic_stats #>       Hair Brown Black #> Eye                    #> Hazel         25    10 #> Green         15     3 #>     ## Saving the graphical output in directory plotDirectory ## A) saving graphical output of type \"png\" in temporary directory tempdir() ##    with default naming convention: visstat(blackBrownHazelGreen, \"Hair\", \"Eye\",   graphicsoutput = \"png\",   plotDirectory = tempdir() )  ## remove graphical output from plotDirectory file.remove(file.path(tempdir(), \"chi_squared_or_fisher_Hair_Eye.png\")) #> [1] TRUE file.remove(file.path(tempdir(), \"mosaic_complete_Hair_Eye.png\")) #> [1] TRUE  ## B) Specifying pdf as output type: visstat(iris, \"Petal.Width\", \"Species\",   graphicsoutput = \"pdf\",   plotDirectory = tempdir() )  ## remove graphical output from plotDirectory file.remove(file.path(tempdir(), \"kruskal_Petal_Width_Species.pdf\")) #> [1] TRUE  ## C) Specifiying plotName overwrites default naming convention visstat(iris, \"Petal.Width\", \"Species\",   graphicsoutput = \"pdf\",   plotName = \"kruskal_iris\", plotDirectory = tempdir() ) ## remove graphical output from plotDirectory file.remove(file.path(tempdir(), \"kruskal_iris.pdf\")) #> [1] TRUE"},{"path":"https://shhschilling.github.io/visStatistics/news/index.html","id":"visstatistics-012","dir":"Changelog","previous_headings":"","what":"visStatistics 0.1.2","title":"visStatistics 0.1.2","text":"CRAN release: 2025-05-12","code":""},{"path":"https://shhschilling.github.io/visStatistics/news/index.html","id":"news-0-1-2","dir":"Changelog","previous_headings":"","what":"News","title":"visStatistics 0.1.2","text":"Added vignette visStatistics.Rmd documenting statistical decision logic illustrating case reproducible examples. Added graphical summary decision logic README vignette","code":""},{"path":"https://shhschilling.github.io/visStatistics/news/index.html","id":"improvements-0-1-2","dir":"Changelog","previous_headings":"","what":"Improvements","title":"visStatistics 0.1.2","text":"precise parameter descriptions clearer presentation decision logic.","code":""},{"path":"https://shhschilling.github.io/visStatistics/news/index.html","id":"change-in-decision-logic-0-1-2","dir":"Changelog","previous_headings":"","what":"Change in decision logic","title":"visStatistics 0.1.2","text":"Welch’s t-test (t.test()) now applied groups 30 observations (previous threshold 100).","code":""},{"path":"https://shhschilling.github.io/visStatistics/news/index.html","id":"bug-fixes-0-1-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"visStatistics 0.1.2","text":"Confidence prediction bands regression now depend specified conf.level instead always defaulting 0.95. Post hoc analysis Kruskal-Wallis test (pairwise.wilcox.test()) now uses specified conf.level instead always defaulting 0.95. Switching fisher.test() now correctly follows expected cell count thresholds.","code":""}]
