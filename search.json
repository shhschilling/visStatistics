[{"path":"/articles/visStatistics.html","id":"abstract","dir":"Articles","previous_headings":"","what":"Abstract","title":"visStatistics","text":"R package visStatistics provides means quickly visualise analyse raw data.Based decision tree picks statistical hypothesis test highest statistical power dependent variable (response) named varsample independent variable (feature) named varfactor data.frame named dataframe. minimal function call structure: visstat(dataframe,varsample,varfactor) Data provided dataframe must structured column wise, varsample varfactor character strings column names dependent (response) independent (feature) variable respectively. choice statistical tests performed core function visstat() depends data numerical categorical, number levels whilst dealing categorical data data distributions (normally distributed versus non-normally distributed). Data class \"numeric\" \"integer\" referred reminder vignette “numerical”, data class \"factor\" referred remainder vignette “categorical”. function returns corresponding test statistics including eventual post-hoc-analysis generates graph showing key statistics underlying test. visStatistics offers fully automated workflow. successfully applied unbiased analysis medical raw data. remainder vignette focuses algorithm underlying decision tree vistat(), whilst call ?visstat documents parameter settings function. statistical tests called default parameter sets, exception ","code":""},{"path":"/articles/visStatistics.html","id":"comparing-means-and-medians","dir":"Articles","previous_headings":"","what":"Comparing means and medians","title":"visStatistics","text":"feature named varfactor consists data class \"factor\" two levels response named varsample consists data class \"numeric\" \"integer\", tests applied compare means medians.","code":""},{"path":"/articles/visStatistics.html","id":"two-sample-tests-welchs-t-test-or-wilcoxon-rank-sum-test","dir":"Articles","previous_headings":"Comparing means and medians","what":"Two sample tests: Welch’s t-test or Wilcoxon rank-sum test","title":"visStatistics","text":"feature named varfactor consists data class \"factor\" exactly two levels response named varsample numerical, either Welch’s t-test Wilcoxon rank-sum test performed. choice follows algorithm : sample size levels bigger 100, perform always t.test() (Lumley et al. 2002). sample size least one levels smaller 100, check first normality levels Shapiro-Wilk Normality Test (shapiro.test()): p-values shapiro.test() levels bigger error probability 1-conf.level, choose Welch’s t-Test (t.test()). p-values least one levels shapiro.test() smaller error probability 1-conf.level, Wilcoxon rank sum test (wilcox.test()) executed. Note visstat() performs unpaired tests. graphical representation consists box plots overlayed jitter plots showing data point. case t-test.(), additionally theconf.level\\\\(\\cdot 100 \\%\\) -confidence intervals shown.test statistics chosen test well summary statistics generated box plots generated returned list.","code":""},{"path":[]},{"path":"/articles/visStatistics.html","id":"welchs-t-test-calling-t-test","dir":"Articles","previous_headings":"Comparing means and medians > Two sample tests: Welch’s t-test or Wilcoxon rank-sum test > Examples","what":"Welch’s t-test calling t.test()","title":"visStatistics","text":"example use motor trend car road test data set (mtcars) consisting 32 observations. example mpg denotes Miles/US gallon used, denotes transmission type ((0 = automatic, 1 = manual)).","code":"ttestStatistics <- visstat(mtcars, \"mpg\", \"am\") # Print the test statistics ttestStatistics #> $`independent variable x` #> [1] \"am\" #>  #> $`dependent variable y` #> [1] \"mpg\" #>  #> $summary_regression #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -9.3923 -3.0923 -0.2974  3.2439  9.5077  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   17.147      1.125  15.247 1.13e-15 *** #> x              7.245      1.764   4.106 0.000285 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 4.902 on 30 degrees of freedom #> Multiple R-squared:  0.3598, Adjusted R-squared:  0.3385  #> F-statistic: 16.86 on 1 and 30 DF,  p-value: 0.000285 #>  #>  #> $shapiro_test_residuals #>  #>  Shapiro-Wilk normality test #>  #> data:  rstandard(lm(y ~ x)) #> W = 0.98284, p-value = 0.8767 #>  #>  #> $anderson_darling_test_residuals #>  #>  Anderson-Darling normality test #>  #> data:  rstandard(lm(y ~ x)) #> A = 0.19347, p-value = 0.8865 #>  #>  #> $error_bands #>    predicted_value y_conf_low y_conf_up y_progn_low y_progn_up #> 1         17.14737   14.85062  19.44411    6.876013   27.41872 #> 2         17.14737   14.85062  19.44411    6.876013   27.41872 #> 3         17.14737   14.85062  19.44411    6.876013   27.41872 #> 4         17.14737   14.85062  19.44411    6.876013   27.41872 #> 5         17.14737   14.85062  19.44411    6.876013   27.41872 #> 6         17.14737   14.85062  19.44411    6.876013   27.41872 #> 7         17.14737   14.85062  19.44411    6.876013   27.41872 #> 8         17.14737   14.85062  19.44411    6.876013   27.41872 #> 9         17.14737   14.85062  19.44411    6.876013   27.41872 #> 10        17.14737   14.85062  19.44411    6.876013   27.41872 #> 11        17.14737   14.85062  19.44411    6.876013   27.41872 #> 12        17.14737   14.85062  19.44411    6.876013   27.41872 #> 13        17.14737   14.85062  19.44411    6.876013   27.41872 #> 14        17.14737   14.85062  19.44411    6.876013   27.41872 #> 15        17.14737   14.85062  19.44411    6.876013   27.41872 #> 16        17.14737   14.85062  19.44411    6.876013   27.41872 #> 17        17.14737   14.85062  19.44411    6.876013   27.41872 #> 18        17.14737   14.85062  19.44411    6.876013   27.41872 #> 19        17.14737   14.85062  19.44411    6.876013   27.41872 #> 20        24.39231   21.61568  27.16894   14.003113   34.78150 #> 21        24.39231   21.61568  27.16894   14.003113   34.78150 #> 22        24.39231   21.61568  27.16894   14.003113   34.78150 #> 23        24.39231   21.61568  27.16894   14.003113   34.78150 #> 24        24.39231   21.61568  27.16894   14.003113   34.78150 #> 25        24.39231   21.61568  27.16894   14.003113   34.78150 #> 26        24.39231   21.61568  27.16894   14.003113   34.78150 #> 27        24.39231   21.61568  27.16894   14.003113   34.78150 #> 28        24.39231   21.61568  27.16894   14.003113   34.78150 #> 29        24.39231   21.61568  27.16894   14.003113   34.78150 #> 30        24.39231   21.61568  27.16894   14.003113   34.78150 #> 31        24.39231   21.61568  27.16894   14.003113   34.78150 #> 32        24.39231   21.61568  27.16894   14.003113   34.78150 # Set the confidence level explicitly resulting in wider confidence levels ttestStatistics <- visstat(mtcars, \"mpg\", \"am\", conf.level = 0.99)"},{"path":"/articles/visStatistics.html","id":"wilcoxon-rank-sum-test-calling-wilcox-test","dir":"Articles","previous_headings":"Comparing means and medians > Two sample tests: Welch’s t-test or Wilcoxon rank-sum test > Examples","what":"Wilcoxon rank-sum test (calling wilcox.test())","title":"visStatistics","text":"","code":"grades_gender <- data.frame(   Sex = as.factor(c(rep(\"Girl\", 20), rep(\"Boy\", 20))),   Grade = c(     19.3, 18.1, 15.2, 18.3, 7.9, 6.2, 19.4,     20.3, 9.3, 11.3, 18.2, 17.5, 10.2, 20.1, 13.3, 17.2, 15.1, 16.2, 17.3,     16.5, 5.1, 15.3, 17.1, 14.8, 15.4, 14.4, 7.5, 15.5, 6.0, 17.4,     7.3, 14.3, 13.5, 8.0, 19.5, 13.4, 17.9, 17.7, 16.4, 15.6   ) )  wilcoxonStatistics <- visstat(grades_gender, \"Grade\", \"Sex\")"},{"path":"/articles/visStatistics.html","id":"aov","dir":"Articles","previous_headings":"Comparing means and medians","what":"More than two samples: One-way test and ANOVA or Kruskal-Wallis test","title":"visStatistics","text":"independent, categorical variable varfactor two levels dependent variable varsample numerical, visstat() performs analysis variance (ANOVA, see aov()) condition underlying assumptions met: Normality standardized residuals homoscedasticity. 1. met, visstat() performs one-way test (see oneway.test()). 1. apply, Kruskal-Wallis test (kruskal.test()) used. assumptions tested function visAnovaAssumptions().","code":""},{"path":"/articles/visStatistics.html","id":"residual-analysis","dir":"Articles","previous_headings":"Comparing means and medians > More than two samples: One-way test and ANOVA or Kruskal-Wallis test","what":"Residual analysis","title":"visStatistics","text":"Function visAnovaAssumptions() checks normality standardised residuals ANOVA fit generated function aov() . applies Shapiro-Wilk-test shapiro.test() Anderson-Darling-Test ad.test() standardised residuals. Furthermore visualises standardised residuals versus fitted mean values linear model level varfactor. Additionally normal QQ plot standardised residuals generated.","code":""},{"path":"/articles/visStatistics.html","id":"homoscedasticity-homogeneity-of-variances-in-each-level-bartlett-test","dir":"Articles","previous_headings":"Comparing means and medians > More than two samples: One-way test and ANOVA or Kruskal-Wallis test","what":"Homoscedasticity: homogeneity of variances in each level: Bartlett test","title":"visStatistics","text":"aov() oneway.test() check, whether two samples normal distributions mean. Whereas aov() requires homogeneity variances level (group), oneway.test() assume variances level necessarily equal. Homoscedasticity assessed using Bartlett test, see bartlett.test(), null hypothesis variances levels .","code":""},{"path":"/articles/visStatistics.html","id":"one-way-test-and-anova","dir":"Articles","previous_headings":"Comparing means and medians > More than two samples: One-way test and ANOVA or Kruskal-Wallis test","what":"One-way test and ANOVA","title":"visStatistics","text":"Depending p-value bartlett.test() appropriate test shown title: p-value bartlett.test() bigger 1-conf.level, assume homogeneity variances level (group) p-values aov() displayed. Otherwise homoscedasticity can assumed p-value oneway.test() reported.","code":""},{"path":"/articles/visStatistics.html","id":"post-hoc-analysis-tukeys-honestly-significant-differences-hsd","dir":"Articles","previous_headings":"Comparing means and medians > More than two samples: One-way test and ANOVA or Kruskal-Wallis test > One-way test and ANOVA","what":"Post-hoc analysis: Tukey`s honestly significant differences (HSD)","title":"visStatistics","text":"Simple multiple comparisons means levels factor analysis variance inflate probability declaring significant difference fact present. family-wise error rate (also named probability type error) probability least one false positive comparison (falsely rejecting null hypothesis) multiple comparisons performed. visstat() reduces probability type error using Tukey’s honestly significant differences (HSD, see TukeyHSD()). creates set confidence intervals differences means per factor level specified family-wise probability conf. confidence intervall include zero, significant difference pair. set confidence intervals pairwise comparisons accompanied Tukey HSD adjusted p-values returned. graphical representation One-way test ANOVA, green letters two levels differ, Tukey’s HSD corrected p-value two levels smaller 1-confint.","code":""},{"path":"/articles/visStatistics.html","id":"post-hoc-analysis-sidak-corrected-confidence-intervals","dir":"Articles","previous_headings":"Comparing means and medians > More than two samples: One-way test and ANOVA or Kruskal-Wallis test > One-way test and ANOVA","what":"Post-hoc analysis: Sidak corrected confidence intervals","title":"visStatistics","text":"Tukey`s HSD procedure based pairwise comparisons differences means per factor level, whereas Sidak procedure counteracts problems type error lowering acceptable probability type error comparisons levels independent, categorical variable. Sidak corrected acceptable probability error (Šidák 1967) defined \\(\\alpha_{Sidak}=1\\)-conf.int\\(^{1/M}\\), \\(M=\\frac{n\\cdot (n-1)}{2}\\) number pairwise comparisons \\(n\\) levels categorical variable. graphical representation One-way test ANOVA, visstat() displays conf.level$\\cdot 100 \\% $ confidence intervals alongside larger, Sidak-corrected \\((1-\\alpha_{Sidak})\\cdot 100\\%\\) confidence intervals.","code":""},{"path":"/articles/visStatistics.html","id":"limitations","dir":"Articles","previous_headings":"Comparing means and medians > More than two samples: One-way test and ANOVA or Kruskal-Wallis test > One-way test and ANOVA","what":"Limitations","title":"visStatistics","text":"Note current structure visstat() allow study interactions different levels independent variable.","code":""},{"path":"/articles/visStatistics.html","id":"kruskal-wallis-test","dir":"Articles","previous_headings":"Comparing means and medians > More than two samples: One-way test and ANOVA or Kruskal-Wallis test","what":"Kruskal-Wallis test","title":"visStatistics","text":"p-values standardised residuals calculated shapiro.test() ad.test() smaller error probability 1-conf.level, normal distribution residuals can assumed. case, visstat() chooses non-parametric alternative, Kruskal-Wallis rank sum test. kruskal.test() tests null medians group (level). post-hoc-analysis pairwise Wilcoxon rank sum test pairwise.wilcox.test() applying default Holm method multiple comparisons(Holm 1979) used. Holm corrected p-value pair smaller 1-confint, green letters corresponding two box plots differ. Otherwise graphical representation Kruskal-Wallis test analogue described Wilcoxon rank sum test. list test statistics Kruskal-Wallis rank sum test well p-values pairwise comparisons adjusted Holm method returned.","code":""},{"path":"/articles/visStatistics.html","id":"examples-1","dir":"Articles","previous_headings":"Comparing means and medians > More than two samples: One-way test and ANOVA or Kruskal-Wallis test","what":"Examples","title":"visStatistics","text":"npk data sets reports yield peas pounds/block 6 blocks, usage fertilizers nitrogen (N), phosphate (P) potassium (K) varied. Either , one, two three different applied blocks.","code":""},{"path":"/articles/visStatistics.html","id":"one-way-test","dir":"Articles","previous_headings":"Comparing means and medians > More than two samples: One-way test and ANOVA or Kruskal-Wallis test > Examples","what":"One way test","title":"visStatistics","text":"post-hoc analysis TukeyHSD() reveals significant difference yield different blocks (green letters ).","code":"oneway_npk <- visstat(npk, \"yield\", \"block\")"},{"path":"/articles/visStatistics.html","id":"anova","dir":"Articles","previous_headings":"Comparing means and medians > More than two samples: One-way test and ANOVA or Kruskal-Wallis test > Examples","what":"ANOVA","title":"visStatistics","text":"stabilize variance transform count data square root.  example scatter plots standardized residuals, QQ-plot p-values Shapiro-Wilk test Anderson-Darling tests greater probability error \\(\\alpha=0.05\\). Therefore can assume residuals normally distributed. given confidence level homogeneity variances can assumed (\\(p <\\alpha\\) calculated bartlett.test()), p-value oneway.test() displayed.","code":"InsectSprays_tr <- InsectSprays InsectSprays_tr$count <- sqrt(InsectSprays$count) visstat(InsectSprays_tr, \"count\", \"spray\")"},{"path":"/articles/visStatistics.html","id":"kruskal-wallis-rank-sum-test","dir":"Articles","previous_headings":"Comparing means and medians > More than two samples: One-way test and ANOVA or Kruskal-Wallis test > Examples","what":"Kruskal-Wallis rank sum test","title":"visStatistics","text":"iris data set gives measurement petal width cm three different iris species.  iris data example, graphical analysis scatter plots standardized residuals QQ -plot well p-values Shapiro-Wilk-test Anderson-Darling test suggest can assume residuals normally distributed. Therefore visstat switches non parametric alternative kruskal.test().","code":"visstat(iris, \"Petal.Width\", \"Species\")"},{"path":"/articles/visStatistics.html","id":"linear-regression","dir":"Articles","previous_headings":"","what":"Linear Regression","title":"visStatistics","text":"feature varfactor response varsample one level type numerical integer, visstat() performs simple linear regression","code":""},{"path":"/articles/visStatistics.html","id":"residual-analysis-1","dir":"Articles","previous_headings":"Linear Regression","what":"Residual analysis","title":"visStatistics","text":"visstat checks normal distribution standardized residuals derived lm() graphically Shapiro-Wilk- Anderson-Test (analogue section @ref(aov) ). p-values null standardized residuals normally distributed Shapiro-Wilk Anderson-Test greater 1-conf.int, title residual plot display message “Requirements regression met”. Independent residual analysis outcome, visstat()` performs subsequent step regression . title graphical output lists chosen confidence level conf.level, regression parameter accompanied confidence levels p-values well adjusted \\(R^2\\). graph shows raw data, regression line confidence prediction bands corresponding chosen conf.level. function returns list test statistics linear regression, p-values normality tests standardized residuals pointwise estimates confidence prediction band.","code":""},{"path":[]},{"path":"/articles/visStatistics.html","id":"cars","dir":"Articles","previous_headings":"Linear Regression > Example","what":"cars","title":"visStatistics","text":"cars data set reports speed mph cars distances (dist) ft taken stop.  Increasing confidence level conf.level default 0.95 0.99 leads two wider confidence prediction bands:  linear regression model explains 64% total variance dependent variables distance named “dist”. p-values greater conf.level Anderson-Darling normality test Shapiro-Wilk test standardized residuals suggest normality assumption underlying linear regression met.","code":"linreg_cars <- visstat(cars, \"dist\", \"speed\") linreg_cars <- visstat(cars, \"dist\", \"speed\", conf.level = 0.99) # Extract the test statistics linreg_cars$anderson_darling_test_residuals #>  #>  Anderson-Darling normality test #>  #> data:  rstandard(lm(y ~ x)) #> A = 0.8005, p-value = 0.03555 linreg_cars$shapiro_test_residuals #>  #>  Shapiro-Wilk normality test #>  #> data:  rstandard(lm(y ~ x)) #> W = 0.94518, p-value = 0.0217"},{"path":"/articles/visStatistics.html","id":"trees","dir":"Articles","previous_headings":"Linear Regression > Example","what":"trees","title":"visStatistics","text":"trees data set provides measurements diameter (named “Girth”) inches height feet black cherry trees.  graphical analysis standardized residuals p-values smaller conf.level Anderson-Darling normality test Shapiro-Wilk test standardized residuals suggest condition normally distributed residuals regression model met. Furthermore linear regression model explains 24% total variance dependent variables “Height” cherry trees. user might consider regression models. tests provided visstat().","code":"linreg_cars <- visstat(trees, \"Height\", \"Girth\", conf.level = 0.9)"},{"path":"/articles/visStatistics.html","id":"chi2--and-fisher-test","dir":"Articles","previous_headings":"","what":"\\({\\chi}^2\\)- and Fisher Test","title":"visStatistics","text":"feature varfactor response varsample categorical type factor, visstat performs test independence count data. Based Cochran’s rule (Cochran 1954), either \\({\\chi}^2\\)- Fisher Test performed: - 20 percent cells count smaller 5, fisher.test() performed displayed, otherwise chisqu.test(). cases grouped column charts p-value corresponding test title mosaic plot showing Pearson’s residuals (details see documentation function mosaic() vcd package ) generated.","code":""},{"path":"/articles/visStatistics.html","id":"transforming-contingency-tables","dir":"Articles","previous_headings":"\\({\\chi}^2\\)- and Fisher Test","what":"Transforming contingency tables","title":"visStatistics","text":"Count data often presented multidimensional arrays, called contingency tables, whereas visstat() requires data.frame column structure. Arrays can transformed column wise structure helper function countsToCases()","code":""},{"path":"/articles/visStatistics.html","id":"example-1","dir":"Articles","previous_headings":"\\({\\chi}^2\\)- and Fisher Test > Transforming contingency tables","what":"Example","title":"visStatistics","text":"","code":"HairEyeColorDataFrame <- countsToCases(as.data.frame(HairEyeColor))"},{"path":"/articles/visStatistics.html","id":"pearsons-chi-squared-test-and-mosaic-plot-with-pearson-residuals","dir":"Articles","previous_headings":"\\({\\chi}^2\\)- and Fisher Test","what":"Pearson’s Chi-squared test and mosaic plot with Pearson residuals","title":"visStatistics","text":"","code":"HairEyeColorDataFrame <- countsToCases(as.data.frame(HairEyeColor)) visstat(HairEyeColorDataFrame, \"Hair\", \"Eye\")"},{"path":"/articles/visStatistics.html","id":"fishers-exact-test-and-mosaic-plot-with-pearson-residuals","dir":"Articles","previous_headings":"\\({\\chi}^2\\)- and Fisher Test","what":"Fisher’s exact test and mosaic plot with Pearson residuals","title":"visStatistics","text":"","code":"HairEyeColorMaleFisher <- HairEyeColor[, , 1] # slicing out a 2 x2 contingency table blackBrownHazelGreen <- HairEyeColorMaleFisher[1:2, 3:4] blackBrownHazelGreen <- countsToCases(as.data.frame(blackBrownHazelGreen)) fisher_stats <- visstat(blackBrownHazelGreen, \"Hair\", \"Eye\") # fisher_stats  #uncommenting prints out summary statistics"},{"path":"/articles/visStatistics.html","id":"saving-the-graphical-output","dir":"Articles","previous_headings":"","what":"Saving the graphical output","title":"visStatistics","text":"generated graphs can saved file formats supported Cairo(): “png”, “jpeg”, “pdf”, “svg”, “ps” “tiff”. following example save graphics files output format “png” plotDirectory tempdir(). applied naming convention graphics file reflects chosen statistical test variable names. Remove graphical output plotDirectory","code":"visstat(blackBrownHazelGreen, \"Hair\", \"Eye\",   graphicsoutput = \"png\", plotDirectory =      tempdir() ) file.remove(file.path(tempdir(), \"chi_squared_or_fisher_Hair_Eye.png\")) #> [1] TRUE file.remove(file.path(tempdir(), \"mosaic_complete_Hair_Eye.png\")) #> [1] TRUE"},{"path":"/articles/visStatistics.html","id":"overview-of-implemented-tests","dir":"Articles","previous_headings":"","what":"Overview of implemented tests","title":"visStatistics","text":"t.test(), wilcox.test(), aov(), kruskal.test(), lm(),fisher.test(), chisqu.test()","code":""},{"path":"/articles/visStatistics.html","id":"implemented-tests-to-check-the-normal-distribution-of-standardized-residuals","dir":"Articles","previous_headings":"Overview of implemented tests","what":"Implemented tests to check the normal distribution of standardized residuals","title":"visStatistics","text":"shapiro.test() ad.test()","code":""},{"path":"/articles/visStatistics.html","id":"implemented-post-hoc-tests","dir":"Articles","previous_headings":"Overview of implemented tests","what":"Implemented post-hoc tests","title":"visStatistics","text":"TukeyHSD() aov() pairwise.wilcox.test() kruskal.test().","code":""},{"path":"/articles/visStatistics.html","id":"bibliography","dir":"Articles","previous_headings":"","what":"Bibliography","title":"visStatistics","text":"Cochran, William G. . 1954. “combination estimates different experiments.” Scandinavian Journal Statistics 10 (1): 101–20. https://doi.org/10.2307/3001666. Holm, S. 1979. “Simple Sequentially Rejective Multiple Test Procedure.” Scandinavian Journal Statistics 6: 65–70. Lumley, Thomas, Paula Diehr, Scott Emerson, Lu Chen. 2002. “importance normality assumption large public health data sets.” Annual Review Public Health 23: 151–69. https://doi.org/10.1146/annurev.publhealth.23.100901.140546. Šidák, Zbyněk. 1967. “Rectangular Confidence Regions Means Multivariate Normal Distributions.” Journal American Statistical Association 62 (318): 626–33. https://doi.org/10.1080/01621459.1967.10482935.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sabine Schilling. Maintainer, author, copyright holder. Peter Kauf. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schilling S (2022). visStatistics: Automated Visualization Statistical Tests. R package version 0.1.2, https://github.com/shhschilling/visStatistics/.","code":"@Manual{,   title = {visStatistics: Automated Visualization of Statistical Tests},   author = {Sabine Schilling},   year = {2022},   note = {R package version 0.1.2},   url = {https://github.com/shhschilling/visStatistics/}, }"},{"path":"/index.html","id":"visstatistics","dir":"","previous_headings":"","what":"Automated Visualization of Statistical Tests","title":"Automated Visualization of Statistical Tests","text":"Visualization statistical hypothesis test two groups categorical numerical data. Statistical consulting requires often quick first visualization reproducible statistical analysis presented raw data. package visStatistics core function visstat() fulfils need. Based decision tree picks statistical hypothesis test highest statistical power dependent variable (response) varsample independent variable (feature) varfactor. corresponding test statistics including eventual post-hoc-analysis returned graph showing key statistics underlying test generated. fully automated workflow especially suited browser based interfaces server-based deployments R successfully implemented analyse medical raw data unbiased fashion. detailed description package’s functionality underlying decision tree, can found vignette accompanying package.","code":""},{"path":"/index.html","id":"implemented-tests","dir":"","previous_headings":"","what":"Implemented tests","title":"Automated Visualization of Statistical Tests","text":"lm(), t.test(), wilcox.test(), aov(), kruskal.test(), fisher.test(), chisqu.test()","code":""},{"path":"/index.html","id":"implemented-tests-to-check-the-normal-distribution-of-standardized-residuals","dir":"","previous_headings":"Implemented tests","what":"Implemented tests to check the normal distribution of standardized residuals","title":"Automated Visualization of Statistical Tests","text":"shapiro.test() ad.test()","code":""},{"path":"/index.html","id":"implemented-post-hoc-tests","dir":"","previous_headings":"Implemented tests","what":"Implemented post-hoc tests","title":"Automated Visualization of Statistical Tests","text":"TukeyHSD() aov()pairwise.wilcox.test() kruskal.test()","code":""},{"path":"/index.html","id":"installation-from-cran","dir":"","previous_headings":"","what":"Installation from CRAN","title":"Automated Visualization of Statistical Tests","text":"Install package install.packages(\"visStatistics\") Load package library(visStatistics)","code":""},{"path":"/index.html","id":"installation-from-github-always-latest-developing-version","dir":"","previous_headings":"","what":"Installation from GitHub (always latest, developing version)","title":"Automated Visualization of Statistical Tests","text":"Install devtools package CRAN. Invoke R type install.packages(\"devtools\") Load devtools package. library(devtools) Install package github-repository install_github(\"shhschilling/visStatistics\") Load package library(visStatistics) Help function usage ?visstat","code":""},{"path":"/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Automated Visualization of Statistical Tests","text":"package vignette allows get familiar features visStatistics. documents detail algorithm decision tree illustrated examples.","code":""},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Automated Visualization of Statistical Tests","text":"","code":"library(visStatistics)"},{"path":[]},{"path":"/index.html","id":"insectsprays-data-set","dir":"","previous_headings":"Examples > Welch Two Sample t.test","what":"InsectSprays data set","title":"Automated Visualization of Statistical Tests","text":"","code":"InsectSpraysAB <- InsectSprays[which(InsectSprays$spray == \"A\" | InsectSprays$spray == \"B\"), ] InsectSpraysAB$spray <- factor(InsectSpraysAB$spray) visstat(InsectSpraysAB, \"count\", \"spray\")"},{"path":"/index.html","id":"mtcars-data-set","dir":"","previous_headings":"Examples > Welch Two Sample t.test","what":"mtcars data set","title":"Automated Visualization of Statistical Tests","text":"Uncomment line print summary statistics:","code":"mtcars$am <- as.factor(mtcars$am) ttestStatistics <- visstat(mtcars, \"mpg\", \"am\") # ttestStatistics"},{"path":"/index.html","id":"wilcoxon-rank-sum-test-with-continuity-correction","dir":"","previous_headings":"Examples","what":"Wilcoxon rank sum test with continuity correction","title":"Automated Visualization of Statistical Tests","text":"","code":"visstat(ToothGrowth, \"len\", \"supp\") #> Warning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot #> compute exact p-value with ties"},{"path":"/index.html","id":"one-way-test","dir":"","previous_headings":"Examples","what":"One-way test","title":"Automated Visualization of Statistical Tests","text":"","code":"anova_npk <- visstat(npk, \"yield\", \"block\")"},{"path":"/index.html","id":"kruskal-wallis-test","dir":"","previous_headings":"Examples","what":"Kruskal-Wallis test","title":"Automated Visualization of Statistical Tests","text":"generated graphs can saved available formats Cairo package. save graphical output type “pdf” plotDirectory tempdir():","code":"visstat(iris, \"Petal.Width\", \"Species\", graphicsoutput = \"pdf\", plotDirectory = tempdir())"},{"path":"/index.html","id":"linear-regression","dir":"","previous_headings":"Examples","what":"Linear Regression","title":"Automated Visualization of Statistical Tests","text":"Increasing confidence level conf.level default 0.95 0.99 leads two wider confidence prediction bands:","code":"linreg_cars <- visstat(cars, \"dist\", \"speed\")"},{"path":"/index.html","id":"pearsons-chi-squared-test","dir":"","previous_headings":"Examples","what":"Pearson’s Chi-squared test","title":"Automated Visualization of Statistical Tests","text":"Count data sets often presented multidimensional arrays, -called contingency tables, whereas visstat() requires data.frame column structure. Arrays can transformed column wise structure helper function countsToCases():","code":"HairEyeColorDataFrame <- countsToCases(as.data.frame(HairEyeColor)) visstat(HairEyeColorDataFrame, \"Hair\", \"Eye\")"},{"path":"/index.html","id":"fishers-exact-test","dir":"","previous_headings":"Examples","what":"Fisher’s exact test","title":"Automated Visualization of Statistical Tests","text":"details regarding generated mosaic plots, please refer mosaic() vcd package.","code":"HairEyeColorMaleFisher <- HairEyeColor[, , 1] # slicing out a 2 x2 contingency table blackBrownHazelGreen <- HairEyeColorMaleFisher[1:2, 3:4] blackBrownHazelGreen <- countsToCases(as.data.frame(blackBrownHazelGreen)) fisher_stats <- visstat(blackBrownHazelGreen, \"Hair\", \"Eye\")"},{"path":"/reference/colorscheme.html","id":null,"dir":"Reference","previous_headings":"","what":"colorscheme(x) selects color scheme of graphical output. Function parameter NULL lists all available color schemes, 1 a color tuple of green and blue\n2 a color tuple of dark green and turquoi, 3 a colorplaette as defined by RcolorBrewer — colorscheme","title":"colorscheme(x) selects color scheme of graphical output. Function parameter NULL lists all available color schemes, 1 a color tuple of green and blue\n2 a color tuple of dark green and turquoi, 3 a colorplaette as defined by RcolorBrewer — colorscheme","text":"colorscheme(x) selects color scheme graphical output. Function parameter NULL lists available color schemes, 1 color tuple green blue 2 color tuple dark green turquoi, 3 colorplaette defined RcolorBrewer","code":""},{"path":"/reference/colorscheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"colorscheme(x) selects color scheme of graphical output. Function parameter NULL lists all available color schemes, 1 a color tuple of green and blue\n2 a color tuple of dark green and turquoi, 3 a colorplaette as defined by RcolorBrewer — colorscheme","text":"","code":"colorscheme(colorcode = NULL)"},{"path":"/reference/colorscheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"colorscheme(x) selects color scheme of graphical output. Function parameter NULL lists all available color schemes, 1 a color tuple of green and blue\n2 a color tuple of dark green and turquoi, 3 a colorplaette as defined by RcolorBrewer — colorscheme","text":"colorcode selects color scheme. parameters NULL: list available color schemes, 1: colortuple, 2, colortuple2, 3, ColorPalette","code":""},{"path":"/reference/colorscheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"colorscheme(x) selects color scheme of graphical output. Function parameter NULL lists all available color schemes, 1 a color tuple of green and blue\n2 a color tuple of dark green and turquoi, 3 a colorplaette as defined by RcolorBrewer — colorscheme","text":"selected color scheme, colors given Hex Code #RRGGBB names","code":""},{"path":"/reference/countsToCases.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data frame of counts to data frame of cases.\ndata frame must contain a column with frequencies (counts) as generated by as.data.frame from a contingency table — countsToCases","title":"Convert data frame of counts to data frame of cases.\ndata frame must contain a column with frequencies (counts) as generated by as.data.frame from a contingency table — countsToCases","text":"Convert data frame counts data frame cases. data frame must contain column frequencies (counts) generated .data.frame contingency table","code":""},{"path":"/reference/countsToCases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data frame of counts to data frame of cases.\ndata frame must contain a column with frequencies (counts) as generated by as.data.frame from a contingency table — countsToCases","text":"","code":"countsToCases(x, countcol = \"Freq\")"},{"path":"/reference/countsToCases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data frame of counts to data frame of cases.\ndata frame must contain a column with frequencies (counts) as generated by as.data.frame from a contingency table — countsToCases","text":"x data.frame counts generated contingency table. countcol character string, name column x containing counts. Default name column  \"Freq\".","code":""},{"path":"/reference/countsToCases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert data frame of counts to data frame of cases.\ndata frame must contain a column with frequencies (counts) as generated by as.data.frame from a contingency table — countsToCases","text":"data frame cases dimension (total number counts sum \"Freq\" x) times 2.","code":""},{"path":"/reference/countsToCases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert data frame of counts to data frame of cases.\ndata frame must contain a column with frequencies (counts) as generated by as.data.frame from a contingency table — countsToCases","text":"","code":"countsToCases(as.data.frame(HairEyeColor[, , 1]), countcol = \"Freq\") #>        Hair   Eye #> 1     Black Brown #> 1.1   Black Brown #> 1.2   Black Brown #> 1.3   Black Brown #> 1.4   Black Brown #> 1.5   Black Brown #> 1.6   Black Brown #> 1.7   Black Brown #> 1.8   Black Brown #> 1.9   Black Brown #> 1.10  Black Brown #> 1.11  Black Brown #> 1.12  Black Brown #> 1.13  Black Brown #> 1.14  Black Brown #> 1.15  Black Brown #> 1.16  Black Brown #> 1.17  Black Brown #> 1.18  Black Brown #> 1.19  Black Brown #> 1.20  Black Brown #> 1.21  Black Brown #> 1.22  Black Brown #> 1.23  Black Brown #> 1.24  Black Brown #> 1.25  Black Brown #> 1.26  Black Brown #> 1.27  Black Brown #> 1.28  Black Brown #> 1.29  Black Brown #> 1.30  Black Brown #> 1.31  Black Brown #> 2     Brown Brown #> 2.1   Brown Brown #> 2.2   Brown Brown #> 2.3   Brown Brown #> 2.4   Brown Brown #> 2.5   Brown Brown #> 2.6   Brown Brown #> 2.7   Brown Brown #> 2.8   Brown Brown #> 2.9   Brown Brown #> 2.10  Brown Brown #> 2.11  Brown Brown #> 2.12  Brown Brown #> 2.13  Brown Brown #> 2.14  Brown Brown #> 2.15  Brown Brown #> 2.16  Brown Brown #> 2.17  Brown Brown #> 2.18  Brown Brown #> 2.19  Brown Brown #> 2.20  Brown Brown #> 2.21  Brown Brown #> 2.22  Brown Brown #> 2.23  Brown Brown #> 2.24  Brown Brown #> 2.25  Brown Brown #> 2.26  Brown Brown #> 2.27  Brown Brown #> 2.28  Brown Brown #> 2.29  Brown Brown #> 2.30  Brown Brown #> 2.31  Brown Brown #> 2.32  Brown Brown #> 2.33  Brown Brown #> 2.34  Brown Brown #> 2.35  Brown Brown #> 2.36  Brown Brown #> 2.37  Brown Brown #> 2.38  Brown Brown #> 2.39  Brown Brown #> 2.40  Brown Brown #> 2.41  Brown Brown #> 2.42  Brown Brown #> 2.43  Brown Brown #> 2.44  Brown Brown #> 2.45  Brown Brown #> 2.46  Brown Brown #> 2.47  Brown Brown #> 2.48  Brown Brown #> 2.49  Brown Brown #> 2.50  Brown Brown #> 2.51  Brown Brown #> 2.52  Brown Brown #> 3       Red Brown #> 3.1     Red Brown #> 3.2     Red Brown #> 3.3     Red Brown #> 3.4     Red Brown #> 3.5     Red Brown #> 3.6     Red Brown #> 3.7     Red Brown #> 3.8     Red Brown #> 3.9     Red Brown #> 4     Blond Brown #> 4.1   Blond Brown #> 4.2   Blond Brown #> 5     Black  Blue #> 5.1   Black  Blue #> 5.2   Black  Blue #> 5.3   Black  Blue #> 5.4   Black  Blue #> 5.5   Black  Blue #> 5.6   Black  Blue #> 5.7   Black  Blue #> 5.8   Black  Blue #> 5.9   Black  Blue #> 5.10  Black  Blue #> 6     Brown  Blue #> 6.1   Brown  Blue #> 6.2   Brown  Blue #> 6.3   Brown  Blue #> 6.4   Brown  Blue #> 6.5   Brown  Blue #> 6.6   Brown  Blue #> 6.7   Brown  Blue #> 6.8   Brown  Blue #> 6.9   Brown  Blue #> 6.10  Brown  Blue #> 6.11  Brown  Blue #> 6.12  Brown  Blue #> 6.13  Brown  Blue #> 6.14  Brown  Blue #> 6.15  Brown  Blue #> 6.16  Brown  Blue #> 6.17  Brown  Blue #> 6.18  Brown  Blue #> 6.19  Brown  Blue #> 6.20  Brown  Blue #> 6.21  Brown  Blue #> 6.22  Brown  Blue #> 6.23  Brown  Blue #> 6.24  Brown  Blue #> 6.25  Brown  Blue #> 6.26  Brown  Blue #> 6.27  Brown  Blue #> 6.28  Brown  Blue #> 6.29  Brown  Blue #> 6.30  Brown  Blue #> 6.31  Brown  Blue #> 6.32  Brown  Blue #> 6.33  Brown  Blue #> 6.34  Brown  Blue #> 6.35  Brown  Blue #> 6.36  Brown  Blue #> 6.37  Brown  Blue #> 6.38  Brown  Blue #> 6.39  Brown  Blue #> 6.40  Brown  Blue #> 6.41  Brown  Blue #> 6.42  Brown  Blue #> 6.43  Brown  Blue #> 6.44  Brown  Blue #> 6.45  Brown  Blue #> 6.46  Brown  Blue #> 6.47  Brown  Blue #> 6.48  Brown  Blue #> 6.49  Brown  Blue #> 7       Red  Blue #> 7.1     Red  Blue #> 7.2     Red  Blue #> 7.3     Red  Blue #> 7.4     Red  Blue #> 7.5     Red  Blue #> 7.6     Red  Blue #> 7.7     Red  Blue #> 7.8     Red  Blue #> 7.9     Red  Blue #> 8     Blond  Blue #> 8.1   Blond  Blue #> 8.2   Blond  Blue #> 8.3   Blond  Blue #> 8.4   Blond  Blue #> 8.5   Blond  Blue #> 8.6   Blond  Blue #> 8.7   Blond  Blue #> 8.8   Blond  Blue #> 8.9   Blond  Blue #> 8.10  Blond  Blue #> 8.11  Blond  Blue #> 8.12  Blond  Blue #> 8.13  Blond  Blue #> 8.14  Blond  Blue #> 8.15  Blond  Blue #> 8.16  Blond  Blue #> 8.17  Blond  Blue #> 8.18  Blond  Blue #> 8.19  Blond  Blue #> 8.20  Blond  Blue #> 8.21  Blond  Blue #> 8.22  Blond  Blue #> 8.23  Blond  Blue #> 8.24  Blond  Blue #> 8.25  Blond  Blue #> 8.26  Blond  Blue #> 8.27  Blond  Blue #> 8.28  Blond  Blue #> 8.29  Blond  Blue #> 9     Black Hazel #> 9.1   Black Hazel #> 9.2   Black Hazel #> 9.3   Black Hazel #> 9.4   Black Hazel #> 9.5   Black Hazel #> 9.6   Black Hazel #> 9.7   Black Hazel #> 9.8   Black Hazel #> 9.9   Black Hazel #> 10    Brown Hazel #> 10.1  Brown Hazel #> 10.2  Brown Hazel #> 10.3  Brown Hazel #> 10.4  Brown Hazel #> 10.5  Brown Hazel #> 10.6  Brown Hazel #> 10.7  Brown Hazel #> 10.8  Brown Hazel #> 10.9  Brown Hazel #> 10.10 Brown Hazel #> 10.11 Brown Hazel #> 10.12 Brown Hazel #> 10.13 Brown Hazel #> 10.14 Brown Hazel #> 10.15 Brown Hazel #> 10.16 Brown Hazel #> 10.17 Brown Hazel #> 10.18 Brown Hazel #> 10.19 Brown Hazel #> 10.20 Brown Hazel #> 10.21 Brown Hazel #> 10.22 Brown Hazel #> 10.23 Brown Hazel #> 10.24 Brown Hazel #> 11      Red Hazel #> 11.1    Red Hazel #> 11.2    Red Hazel #> 11.3    Red Hazel #> 11.4    Red Hazel #> 11.5    Red Hazel #> 11.6    Red Hazel #> 12    Blond Hazel #> 12.1  Blond Hazel #> 12.2  Blond Hazel #> 12.3  Blond Hazel #> 12.4  Blond Hazel #> 13    Black Green #> 13.1  Black Green #> 13.2  Black Green #> 14    Brown Green #> 14.1  Brown Green #> 14.2  Brown Green #> 14.3  Brown Green #> 14.4  Brown Green #> 14.5  Brown Green #> 14.6  Brown Green #> 14.7  Brown Green #> 14.8  Brown Green #> 14.9  Brown Green #> 14.10 Brown Green #> 14.11 Brown Green #> 14.12 Brown Green #> 14.13 Brown Green #> 14.14 Brown Green #> 15      Red Green #> 15.1    Red Green #> 15.2    Red Green #> 15.3    Red Green #> 15.4    Red Green #> 15.5    Red Green #> 15.6    Red Green #> 16    Blond Green #> 16.1  Blond Green #> 16.2  Blond Green #> 16.3  Blond Green #> 16.4  Blond Green #> 16.5  Blond Green #> 16.6  Blond Green #> 16.7  Blond Green"},{"path":"/reference/get_samples_fact_inputfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Selects columns defined by characters varsample and varfactor from a data.frame — get_samples_fact_inputfile","title":"Selects columns defined by characters varsample and varfactor from a data.frame — get_samples_fact_inputfile","text":"Selects columns defined characters varsample varfactor dataframe, returns selected columns names.","code":""},{"path":"/reference/get_samples_fact_inputfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selects columns defined by characters varsample and varfactor from a data.frame — get_samples_fact_inputfile","text":"","code":"get_samples_fact_inputfile(dataframe, varsample, varfactor)"},{"path":"/reference/get_samples_fact_inputfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Selects columns defined by characters varsample and varfactor from a data.frame — get_samples_fact_inputfile","text":"dataframe data.frame list containing least two columns column headings data type character. Data must column wise ordered. varsample column name dependent variable dataframe, datatype character varfactor column name independent variable dataframe, datatype character","code":""},{"path":"/reference/get_samples_fact_inputfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Selects columns defined by characters varsample and varfactor from a data.frame — get_samples_fact_inputfile","text":"selected columns, sample, factor, name_of_sample (character string equaling varsample), name_of_factor (character string equaling varsample)","code":""},{"path":"/reference/get_samples_fact_inputfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Selects columns defined by characters varsample and varfactor from a data.frame — get_samples_fact_inputfile","text":"","code":"get_samples_fact_inputfile(trees, \"Girth\", \"Height\") #> $samples #>  [1]  8.3  8.6  8.8 10.5 10.7 10.8 11.0 11.0 11.1 11.2 11.3 11.4 11.4 11.7 12.0 #> [16] 12.9 12.9 13.3 13.7 13.8 14.0 14.2 14.5 16.0 16.3 17.3 17.5 17.9 18.0 18.0 #> [31] 20.6 #>  #> $fact #>  [1] 70 65 63 72 81 83 66 75 80 75 79 76 76 69 75 74 85 86 71 64 78 80 74 72 77 #> [26] 81 82 80 80 80 87 #>  #> $name_of_sample #> [1] \"Girth\" #>  #> $name_of_factor #> [1] \"Height\" #>  #> $matchingCriteria #> [1] \"\" #>"},{"path":"/reference/openGraphCairo.html","id":null,"dir":"Reference","previous_headings":"","what":"Cairo wrapper function — openGraphCairo","title":"Cairo wrapper function — openGraphCairo","text":"Cairo wrapper function returning NULL type specified","code":""},{"path":"/reference/openGraphCairo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cairo wrapper function — openGraphCairo","text":"","code":"openGraphCairo(   width = 640,   height = 480,   fileName = NULL,   type = NULL,   fileDirectory = getwd(),   pointsize = 12,   bg = \"transparent\",   canvas = \"white\",   units = \"px\",   dpi = 150 )"},{"path":"/reference/openGraphCairo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cairo wrapper function — openGraphCairo","text":"width see Cairo() height see Cairo() fileName name file created. include file extension \".type\"  file filedirectory. Default file name \"visstat_plot\". type Supported output types \"png\", \"jpeg\", \"pdf\", \"svg\", \"ps\" \"tiff\". See Cairo() fileDirectory path directory, plot stored. Default current working directory. pointsize see Cairo() bg see Cairo() canvas see Cairo() units see Cairo() dpi DPI used conversion units pixels. Default value 150.","code":""},{"path":"/reference/openGraphCairo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cairo wrapper function — openGraphCairo","text":"NULL, type specified. Otherwise see Cairo()","code":""},{"path":"/reference/openGraphCairo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cairo wrapper function — openGraphCairo","text":"openGraphCairo() Cairo() wrapper function. Differences Cairo: ) prematurely ends function call Cairo() returning NULL, output type  types \"png\", \"jpeg\", \"pdf\", \"svg\", \"ps\" \"tiff\" provided. b) file argument underlying Cairo function generated file.path(fileDirectory,paste(fileName,\".\", type, sep = \"\")).","code":""},{"path":"/reference/openGraphCairo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cairo wrapper function — openGraphCairo","text":"","code":"##  adapted from example in \\code{Cairo()} openGraphCairo(fileName = \"normal_dist\", type = \"pdf\", fileDirectory = tempdir()) plot(rnorm(4000), rnorm(4000), col = \"#ff000018\", pch = 19, cex = 2)  dev.off() # creates a file \"normal_dist.pdf\" in the directory specified in fileDirectory #> agg_png  #>       2  # ## remove the plot from fileDirectory file.remove(file.path(tempdir(), \"normal_dist.pdf\")) #> [1] TRUE"},{"path":"/reference/saveGraphVisstat.html","id":null,"dir":"Reference","previous_headings":"","what":"Saves Graphical Output — saveGraphVisstat","title":"Saves Graphical Output — saveGraphVisstat","text":"Closes graphical devices dev.() saves output fileName type provided.","code":""},{"path":"/reference/saveGraphVisstat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Saves Graphical Output — saveGraphVisstat","text":"","code":"saveGraphVisstat(   fileName = NULL,   type = NULL,   fileDirectory = getwd(),   oldfile = NULL )"},{"path":"/reference/saveGraphVisstat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Saves Graphical Output — saveGraphVisstat","text":"fileName name file created directory fileDirectory without file extension \".type\". type see Cairo(). fileDirectory path directory, graphic stored. Default setting current working directory. oldfile old file name overwritten","code":""},{"path":"/reference/saveGraphVisstat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Saves Graphical Output — saveGraphVisstat","text":"NULL, type fileName provided, TRUE graph created","code":""},{"path":"/reference/saveGraphVisstat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Saves Graphical Output — saveGraphVisstat","text":"","code":"# very simple KDE (adapted from example in Cairo()) openGraphCairo(type = \"png\", fileDirectory = tempdir()) plot(rnorm(4000), rnorm(4000), col = \"#ff000018\", pch = 19, cex = 2)  # save file \"norm.png\" in directory specified in fileDirectory saveGraphVisstat(\"norm\", type = \"png\", fileDirectory = tempdir()) #> [1] TRUE file.remove(file.path(tempdir(), \"norm.png\")) # remove file \"norm.png\" from fileDirectory. #> [1] TRUE"},{"path":"/reference/visAnovaAssumptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualisation of the normality distribution of the standardised residuals of the ANOVA — visAnovaAssumptions","title":"Visualisation of the normality distribution of the standardised residuals of the ANOVA — visAnovaAssumptions","text":"visAnovaAssumptions checks normality standardised residuals ANOVA.    Shapiro-Wilk test shapiro.test() Anderson-Darling test ad.test() check    null standardized residuals normally distributed.    generates scatter plot    standardized residuals versus fitted mean values linear models level fact.    Furthermore normal QQ plot standardized residuals generated.    null homogeneity variances  factor level tested bartlett.test().","code":""},{"path":"/reference/visAnovaAssumptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualisation of the normality distribution of the standardised residuals of the ANOVA — visAnovaAssumptions","text":"","code":"visAnovaAssumptions(   samples,   fact,   conf.level = 0.95,   samplename = \"\",   factorname = \"\",   cex = 1 )"},{"path":"/reference/visAnovaAssumptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualisation of the normality distribution of the standardised residuals of the ANOVA — visAnovaAssumptions","text":"samples vector containing dependent variable, datatype numeric fact vector containing independent variable, datatype factor conf.level confidence level, 0.95=default samplename name sample used graphical output, dataype character , \"\"=default factorname name sample used graphical output, dataype character, \"\"=default cex number indicating amount plotting text symbols scaled relative default. 1=default, 1.5 50% larger, 0.5 50% smaller, etc.","code":""},{"path":"/reference/visAnovaAssumptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualisation of the normality distribution of the standardised residuals of the ANOVA — visAnovaAssumptions","text":"list containing test statistics anova, p values  generated    Shapiro-Wilk test shapiro.test(), Anderson-Darling test ad.test() bartlett.test().","code":""},{"path":"/reference/visAnovaAssumptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualisation of the normality distribution of the standardised residuals of the ANOVA — visAnovaAssumptions","text":"","code":"ToothGrowth$dose <- as.factor(ToothGrowth$dose) visAnovaAssumptions(ToothGrowth$len, ToothGrowth$dose)  #> $summary_anova #>             Df Sum Sq Mean Sq F value   Pr(>F)     #> fact         2   2426    1213   67.42 9.53e-16 *** #> Residuals   57   1026      18                      #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $shapiro_test #>  #> \tShapiro-Wilk normality test #>  #> data:  rstandard(anova) #> W = 0.96731, p-value = 0.1076 #>  #>  #> $ad_test #>  #> \tAnderson-Darling normality test #>  #> data:  rstandard(anova) #> A = 0.68679, p-value = 0.06928 #>  #>  #> $bartlett_test #>  #> \tBartlett test of homogeneity of variances #>  #> data:  samples by fact #> Bartlett's K-squared = 0.66547, df = 2, p-value = 0.717 #>  #>   visAnovaAssumptions(ToothGrowth$len, ToothGrowth$supp)  #> $summary_anova #>             Df Sum Sq Mean Sq F value Pr(>F)   #> fact         1    205  205.35   3.668 0.0604 . #> Residuals   58   3247   55.98                  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $shapiro_test #>  #> \tShapiro-Wilk normality test #>  #> data:  rstandard(anova) #> W = 0.96949, p-value = 0.1378 #>  #>  #> $ad_test #>  #> \tAnderson-Darling normality test #>  #> data:  rstandard(anova) #> A = 0.51449, p-value = 0.185 #>  #>  #> $bartlett_test #>  #> \tBartlett test of homogeneity of variances #>  #> data:  samples by fact #> Bartlett's K-squared = 1.4217, df = 1, p-value = 0.2331 #>  #>  visAnovaAssumptions(iris$Petal.Width, iris$Species)  #> $summary_anova #>              Df Sum Sq Mean Sq F value Pr(>F)     #> fact          2  80.41   40.21     960 <2e-16 *** #> Residuals   147   6.16    0.04                    #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $shapiro_test #>  #> \tShapiro-Wilk normality test #>  #> data:  rstandard(anova) #> W = 0.97217, p-value = 0.003866 #>  #>  #> $ad_test #>  #> \tAnderson-Darling normality test #>  #> data:  rstandard(anova) #> A = 1.8447, p-value = 9.831e-05 #>  #>  #> $bartlett_test #>  #> \tBartlett test of homogeneity of variances #>  #> data:  samples by fact #> Bartlett's K-squared = 39.213, df = 2, p-value = 3.055e-09 #>  #>"},{"path":"/reference/visstat.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualization of statistical hypothesis testing based on decision tree — visstat","title":"Visualization of statistical hypothesis testing based on decision tree — visstat","text":"Based decision tree, visstat() picks statistical hypothesis test highest statistical power dependent variable (response)  independent variable (feature) data.frame named dataframe. Data provided dataframe must structured column wise, varsample varfactor character strings corresponding column names dependent independent variable respectively.","code":""},{"path":"/reference/visstat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualization of statistical hypothesis testing based on decision tree — visstat","text":"","code":"visstat(   dataframe,   varsample,   varfactor,   conf.level = 0.95,   numbers = TRUE,   minpercent = 0.05,   graphicsoutput = NULL,   plotName = NULL,   plotDirectory = getwd() )"},{"path":"/reference/visstat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualization of statistical hypothesis testing based on decision tree — visstat","text":"dataframe data.frame containing least two columns. Data must column wise ordered. varsample column name dependent variable dataframe, datatype character. varsample must one entry list names(dataframe). varfactor column name independent variable dataframe, datatype character.varsample must one entry list names(dataframe). conf.level confidence level interval. numbers logical indicating whether show numbers mosaic count plots. minpercent number 0 1 indicating minimal fraction total count data category displayed    mosaic count plots. graphicsoutput saves plot(s) type \"png\",  \"jpg\", \"tiff\"  \"bmp\" directory specified plotDirectory. graphicsoutput=NULL, plots saved. plotName graphical output stored following naming convention \"plotName.graphicsoutput\" plotDirectory. Without specifying parameter, plotName automatically generated following convention \"statisticalTestName_varsample_varfactor\". plotDirectory specifies directory, generated plots stored. Default current working directory.","code":""},{"path":"/reference/visstat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualization of statistical hypothesis testing based on decision tree — visstat","text":"list containing statistics test highest statistical power meeting assumptions. values returned invisibly copies. Values can accessed assigning return value visstat.","code":""},{"path":"/reference/visstat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualization of statistical hypothesis testing based on decision tree — visstat","text":"test visstat() returns graph main test statistics title well  list  test statistics including eventual post-hoc analysis. Implemented tests: lm(),t.test(), wilcox.test(), aov(), kruskal.test(), fisher.test(), chisqu.test(). Implemented tests normal distribution standardized residuals: shapiro.test() ad.test(). Implemented post-hoc tests: TukeyHSD() aov() pairwise.wilcox.test() kruskal.test(). comparison averages, following algorithm  depends value parameter conf.level, defaults 0.95. p-values standardized residuals  shapiro.test() ks.test() smaller error probability 1-conf.level, kruskal.test() resp. wilcox.test() performed, otherwise oneway.test() aov() resp. t.test() performed displayed. Exception: sample size bigger 100,  wilcox.test() never executed,instead always t.test() performed (Lumley et al. (2002) <doi:10.1146/annurev.publheath.23.100901.140546>). test independence count data, Cochran's rule (Cochran (1954) <doi:10.2307/3001666>) implemented: 20 percent cells count smaller 5,  fisher.test() performed displayed, otherwise chisqu.test(). cases case additional mosaic plot showing Pearson's residuals generated.","code":""},{"path":"/reference/visstat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualization of statistical hypothesis testing based on decision tree — visstat","text":"","code":"## Welch Two Sample t-test (calling t.test()) visstat(mtcars, \"mpg\", \"am\")    ## Wilcoxon rank sum test (calling wilcox.test()) grades_gender <- data.frame(   Sex = as.factor(c(rep(\"Girl\", 20), rep(\"Boy\", 20))),   Grade = c(     19.3, 18.1, 15.2, 18.3, 7.9, 6.2, 19.4,     20.3, 9.3, 11.3, 18.2, 17.5, 10.2, 20.1, 13.3, 17.2, 15.1, 16.2, 17.3,     16.5, 5.1, 15.3, 17.1, 14.8, 15.4, 14.4, 7.5, 15.5, 6.0, 17.4,     7.3, 14.3, 13.5, 8.0, 19.5, 13.4, 17.9, 17.7, 16.4, 15.6   ) ) visstat(grades_gender, \"Grade\", \"Sex\")   ## One-way analysis of means (oneway.test()) anova_npk <- visstat(npk, \"yield\", \"block\")   anova_npk # prints summary of tests #> $`summary statistics_anova` #>             Df Sum Sq Mean Sq F value Pr(>F)   #> fact         5  343.3   68.66   2.318 0.0861 . #> Residuals   18  533.1   29.61                  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $`summary statistics_oneway` #>  #> \tOne-way analysis of means (not assuming equal variances) #>  #> data:  samples and fact #> F = 6.2463, num df = 5.0000, denom df = 8.0508, p-value = 0.01178 #>  #>  #> $adjusted_p_values_tuk #>   Tukey multiple comparisons of means #>     95% family-wise confidence level #>  #> Fit: aov(formula = samples ~ fact) #>  #> $fact #>        diff        lwr       upr     p adj #> 2-1   3.425  -8.804242 15.654242 0.9440575 #> 3-1   6.750  -5.479242 18.979242 0.5166401 #> 4-1  -3.900 -16.129242  8.329242 0.9074049 #> 5-1  -3.500 -15.729242  8.729242 0.9390165 #> 6-1   2.325  -9.904242 14.554242 0.9893559 #> 3-2   3.325  -8.904242 15.554242 0.9503518 #> 4-2  -7.325 -19.554242  4.904242 0.4312574 #> 5-2  -6.925 -19.154242  5.304242 0.4900643 #> 6-2  -1.100 -13.329242 11.129242 0.9996936 #> 4-3 -10.650 -22.879242  1.579242 0.1094850 #> 5-3 -10.250 -22.479242  1.979242 0.1321421 #> 6-3  -4.425 -16.654242  7.804242 0.8539828 #> 5-4   0.400 -11.829242 12.629242 0.9999980 #> 6-4   6.225  -6.004242 18.454242 0.5981409 #> 6-5   5.825  -6.404242 18.054242 0.6604328 #>  #>  #> $conf.level #> [1] 0.95 #>   ## Kruskal-Wallis rank sum test (calling kruskal.test()) visstat(iris, \"Petal.Width\", \"Species\")   visstat(InsectSprays, \"count\", \"spray\")  #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties   ## Linear regression visstat(trees, \"Girth\", \"Height\", conf.level = 0.99)    ## Pearson's Chi-squared test and mosaic plot with Pearson residuals ### Transform array to data.frame HairEyeColorDataFrame <- countsToCases(as.data.frame(HairEyeColor)) visstat(HairEyeColorDataFrame, \"Hair\", \"Eye\")    ## 2x2 contingency tables with Fisher's exact test and mosaic plot with Pearson residuals HairEyeColorMaleFisher <- HairEyeColor[, , 1] ### slicing out a 2 x2 contingency table blackBrownHazelGreen <- HairEyeColorMaleFisher[1:2, 3:4] blackBrownHazelGreen <- countsToCases(as.data.frame(blackBrownHazelGreen)) fisher_stats <- visstat(blackBrownHazelGreen, \"Hair\", \"Eye\")   fisher_stats # print out summary statistics #> $p.value #> [1] 0.503545 #>  #> $conf.int #> [1] 0.07725895 2.40885255 #> attr(,\"conf.level\") #> [1] 0.95 #>  #> $estimate #> odds ratio  #>  0.5062015  #>  #> $null.value #> odds ratio  #>          1  #>  #> $alternative #> [1] \"two.sided\" #>  #> $method #> [1] \"Fisher's Exact Test for Count Data\" #>  #> $data.name #> [1] \"counts\" #>  #> $mosaic_stats #>       Hair Brown Black #> Eye                    #> Hazel         25    10 #> Green         15     3 #>     ## Saving the graphical output in directory plotDirectory ## A) saving graphical output of type \"png\" in temporary directory tempdir() ##    with default naming convention: visstat(blackBrownHazelGreen, \"Hair\", \"Eye\", graphicsoutput = \"png\", plotDirectory = tempdir())  ## remove graphical output from plotDirectory file.remove(file.path(tempdir(), \"chi_squared_or_fisher_Hair_Eye.png\")) #> [1] TRUE file.remove(file.path(tempdir(), \"mosaic_complete_Hair_Eye.png\")) #> [1] TRUE  ## B) Specifying pdf as output type: visstat(iris, \"Petal.Width\", \"Species\", graphicsoutput = \"pdf\", plotDirectory = tempdir())  ## remove graphical output from plotDirectory file.remove(file.path(tempdir(), \"kruskal_Petal_Width_Species.pdf\")) #> [1] TRUE  ## C) Specifiying plotName overwrites default naming convention visstat(iris, \"Petal.Width\", \"Species\",   graphicsoutput = \"pdf\",   plotName = \"kruskal_iris\", plotDirectory = tempdir() ) ## remove graphical output from plotDirectory file.remove(file.path(tempdir(), \"kruskal_iris.pdf\")) #> [1] TRUE"},{"path":[]},{"path":"/news/index.html","id":"news-0-1-2","dir":"Changelog","previous_headings":"","what":"News","title":"visStatistics 0.1.2","text":"Added vignette","code":""},{"path":"/news/index.html","id":"bug-fixes-0-1-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"visStatistics 0.1.2","text":"Regression confidence prediction bands now depend conf.level Post-hoc-Analysis Kruskal-Wallis-test (pairwise.wilcox.test()) now depends family wise error rate 1-conf.int Calculation alphaSidakcorrected leading larger Sidak corrected confidence intervals","code":""}]
