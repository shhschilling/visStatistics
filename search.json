[{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"abstract","dir":"Articles","previous_headings":"","what":"Abstract","title":"visStatistics","text":"R package visStatistics provides means quickly visualise analyse raw data selecting, based decision tree, statistical hypothesis test highest statistical power dependent variable (response) named varsample independent variable (feature) named varfactor data.frame named dataframe. minimal function call structure: visstat(dataframe,varsample,varfactor) data provided dataframe must structured column, varsample varfactor character strings column names dependent (response) independent (feature) variables, respectively. choice statistical tests performed core function visstat() depends wether data numerical categorical, number levels categorical data data distributions (normal versus non-normal). Data class \"numeric\" \"integer\" referred reminder vignette “numerical”, data class \"factor\" referred remainder vignette “categorical”. function returns corresponding test statistics, including post-hoc-analysis, generates graph showing key statistics underlying test. visStatistics provides fully automated workflow. successfully used unbiased analysis raw medical data. remainder vignette focuses algorithm underlying decision tree vistat(), call ?visstat documents parameter settings function. implemented statistical tests called default parameter sets, except conf.level, can adjusted visstat() function call. consequence, paired tests available.","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"comparing-central-tendencies","dir":"Articles","previous_headings":"","what":"Comparing central tendencies","title":"visStatistics","text":"feature consists data class \"factor\" two levels response consists data class \"numeric\" \"integer\" (mode \"numeric\"), tests applied compare central tendencies.","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"two-sample-tests-welchs-t-test-or-wilcoxon-rank-sum-test","dir":"Articles","previous_headings":"Comparing central tendencies","what":"Two sample tests: Welch’s t-test or Wilcoxon rank sum test","title":"visStatistics","text":"feature exactly two levels,Welch’s t-test non-parametric alternative, Wilcoxon rank sum test, performed. Welch’s t-test tests null hypothesis two samples mean. Student’s t-test requires homoscedasticity, Welch’s t-test . loses little robustness compared Student’s t-test assumptions Student’s t-test met (Moser Stevens 1992; Delacre:2017iv?). Therefore implementation Studen’t-test omitted. null hypothesis Wilcoxon rank sum test samples (levels) drawn population identical distributions. test choice follows algorithm : sample size levels greater 30, always perform Welch’s t-test (t.test()) (@ Rasch, Kubinger, Moder 2011; Lumley et al. 2002). large samples, t test shown robust many situations o test test: Paper: Preliminary assessment normality comparing two independent samples sample size least one levels smaller 30, first check normality levels Shapiro-Wilk normality test (shapiro.test()): p-values shapiro.test() levels greater error probability α=1−\\alpha = 1-conf.level, perform Welchs’ t-tes (t.test()). p-value least one levels shapiro.test() smaller error probability α=1−\\alpha=1-conf.level, Wilcoxon rank sum test (wilcox.test()) executed. graphical representation consists box plots overlaid jitter plots showing data point. case Welch’s t-test, theconf.leve⋅100%\\cdot 100 \\% - confidence intervals also shown. test statistics chosen test well summary statistics generated box plots returned list.","code":""},{"path":[]},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"welchs-t-test","dir":"Articles","previous_headings":"Comparing central tendencies > Two sample tests: Welch’s t-test or Wilcoxon rank sum test > Examples","what":"Welch’s t-test","title":"visStatistics","text":"example use motor trend car road test data set (mtcars), consists 32 observations. example mpg denotes miles per US gallon, transmission type ((0 = automatic, 1 = manual)).  Increasing confidence level conf.level default 0.95 0.99 results wider confidence intervals:","code":"mtcars$am <- as.factor(mtcars$am) t_test_statistics <- visstat(mtcars, \"mpg\", \"am\") # t_test_statistics # Uncomment this line to print out the test statistics mtcars$am <- as.factor(mtcars$am) t_test_statistics_99 <- visstat(mtcars, \"mpg\", \"am\", conf.level = 0.99)"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"wilcoxon-rank-sum-test","dir":"Articles","previous_headings":"Comparing central tendencies > Two sample tests: Welch’s t-test or Wilcoxon rank sum test > Examples","what":"Wilcoxon rank sum test","title":"visStatistics","text":"","code":"grades_gender <- data.frame( sex = as.factor(c(rep(\"girl\", 21), rep(\"boy\", 23))), grade = c( 19.3, 18.1, 15.2, 18.3, 7.9, 6.2, 19.4, 20.3, 9.3, 11.3, 18.2, 17.5, 10.2, 20.1, 13.3, 17.2, 15.1, 16.2, 17.0, 16.5, 5.1, 15.3, 17.1, 14.8, 15.4, 14.4, 7.5, 15.5, 6.0, 17.4, 7.3, 14.3, 13.5, 8.0, 19.5, 13.4, 17.9, 17.7, 16.4, 15.6, 17.3, 19.9, 4.4, 2.1 ) )  wilcoxon_statistics <- visstat(grades_gender, \"grade\", \"sex\")"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"one-way-test-anova-or-kruskal-wallis-test","dir":"Articles","previous_headings":"Comparing central tendencies","what":"One-way test, ANOVA or Kruskal-Wallis test","title":"visStatistics","text":"feature consists data class \"factor\" two levels response mode \"numeric\", visstat() performs analysis variance (ANOVA),following null hypotheses rejected chosen error probability error α=1−\\alpha=1-conf.level Normality standardised residuals homoscedasticity. first condition normality residuals met, visstat() performs one-way test (see oneway.test()). normality residuals assumed, Kruskal-Wallis test (kruskal.test()) used. assumptions tested visAnovaAssumptions() function.","code":""},{"path":[]},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"aov_residuals","dir":"Articles","previous_headings":"Comparing central tendencies > One-way test, ANOVA or Kruskal-Wallis test > Checking the ANOVA assumptions","what":"Residual analysis","title":"visStatistics","text":"function visAnovaAssumptions() checks standardised residuals ANOVA fit normality using Shapiro-Wilk-test shapiro.test() Anderson-Darling test ad.test(). plots standardised residuals fitted means linear model level feature varfactorand generates Q-Q plot standardised residuals.","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"homoscedasticity-homogeneity-of-variances-in-each-level-bartlett-test","dir":"Articles","previous_headings":"Comparing central tendencies > One-way test, ANOVA or Kruskal-Wallis test > Checking the ANOVA assumptions","what":"Homoscedasticity: homogeneity of variances in each level: Bartlett test","title":"visStatistics","text":"aov() oneway.test() test whether two samples normal distributions mean. aov() requires homogeneity variances level (group), oneway.test() require variances level necessarily equal. Homoscedasticity assessed using Bartlett test, see bartlett.test(), null hypothesis variances levels equal.","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"one-way-test-and-anova","dir":"Articles","previous_headings":"Comparing central tendencies > One-way test, ANOVA or Kruskal-Wallis test","what":"One-way test and ANOVA","title":"visStatistics","text":"Depending p-value bartlett.test(), corresponding test shown figure title: p-value bartlett.test() greater 1-conf.level, assume homogeneity variances level (group) p-values aov() displayed. Otherwise homoscedasticity assumed p-value oneway.test() reported.","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"post-hoc-analysis-tukeys-honestly-significant-differences-hsd-and-sidak-corrected-confidence-intervals","dir":"Articles","previous_headings":"Comparing central tendencies > One-way test, ANOVA or Kruskal-Wallis test > One-way test and ANOVA","what":"Post-hoc analysis: Tukey`s honestly significant differences (HSD) and Sidak corrected confidence intervals","title":"visStatistics","text":"Simple multiple comparisons means factor levels analysis variance inflate probability declaring significant difference , fact, none . family-wise error rate (also called probability type error) probability least one false positive comparison, null hypothesis falsely rejected, multiple comparisons performed.","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"tukeys-honestly-significant-differences-hsd","dir":"Articles","previous_headings":"","what":"visStatistics","title":"visStatistics","text":"visstat() reduces probability type error using Tukey’s honestly significant differences (HSD, see TukeyHSD()). creates set confidence intervals differences means per factor level specified family-wise probability conf. confidence interval include zero, significant difference pair. set confidence intervals pairwise comparisons returned along Tukey HSD adjusted p-values. graphical representation One-way test ANOVA, green letters two levels differ , Tukey’s HSD corrected p-value two levels smaller α=1−\\alpha=1-conf.int.","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"sidak-corrected-confidence-intervals","dir":"Articles","previous_headings":"Comparing central tendencies > One-way test, ANOVA or Kruskal-Wallis test > One-way test and ANOVA","what":"Sidak corrected confidence intervals","title":"visStatistics","text":"Tukey`s HSD procedure based pairwise comparisons differences means factor level produces set corresponding confidence intervals. Sidak procedure, hand, addresses problems type error lowering acceptable probability type error comparisons levels independent, categorical variable. Sidak corrected acceptable probability error (Šidák 1967) defined αSidak=1\\alpha_{Sidak}=1-conf.int1/M^{1/M}, M=n⋅(n−1)2M=\\frac{n\\cdot (n-1)}{2} number pairwise comparisons nn levels categorical variable. graphical display One-way test ANOVA, visstat() displays conf.level ⋅100%\\cdot\\; 100 \\% confidence intervals alongside larger, Sidak-corrected (1−αSidak)⋅100%(1-\\alpha_{Sidak})\\cdot 100\\;\\% confidence intervals.","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"limitations","dir":"Articles","previous_headings":"Comparing central tendencies > One-way test, ANOVA or Kruskal-Wallis test > One-way test and ANOVA","what":"Limitations","title":"visStatistics","text":"Note current structure visstat() allow study interactions different levels independent variable.","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"kruskal-wallis-test","dir":"Articles","previous_headings":"Comparing central tendencies > One-way test, ANOVA or Kruskal-Wallis test","what":"Kruskal-Wallis test","title":"visStatistics","text":"p-value standardised residuals computed shapiro.test() smaller error probability 1-conf.level, visstat() chooses non-parametric alternative, Kruskal-Wallis rank sum test. kruskal.test() tests null medians equal group level. post-hoc-analysis pairwise Wilcoxon rank sum test pairwise.wilcox.test() used, applying default Holm method multiple comparisons(Holm 1979). Holm-adjusted p-value pair smaller 1-confint, green letters corresponding two box plots differ. Otherwise graphical representation Kruskal-Wallis test similar Wilcoxon rank sum test described . list test statistics Kruskal-Wallis rank sum test p-values pairwise comparisons adjusted Holm method returned.","code":""},{"path":[]},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"one-way-test","dir":"Articles","previous_headings":"Comparing central tendencies > One-way test, ANOVA or Kruskal-Wallis test > Examples","what":"One-way test:","title":"visStatistics","text":"npk dataset reports yield peas pounds/block six blocks, application nitrogen (N), phosphate (P) potassium (K) fertilisers varied. Either , one, two three different fertilisers applied blocks.  can assume residuals normally distributed based scatterplots standardised residuals, normal quantile-quantile plot (Q-Q plot), p-values Shapiro-Wilk test Anderson-Darling test. given confidence level homogeneity variances assumed (p<αp< \\alpha calculated bartlett.test()), p-value oneway.test() displayed. Post-hoc analysis TukeyHSD() shows significant difference yield different blocks (green letters equal).","code":"oneway_npk <- visstat(npk, \"yield\", \"block\")"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"anova","dir":"Articles","previous_headings":"Comparing central tendencies > One-way test, ANOVA or Kruskal-Wallis test > Examples","what":"ANOVA","title":"visStatistics","text":"InsectSprays data gives counts insects agricultural experimental units treated six different insecticides. stabilise variance counts, transform count data InsectSprays data set square root. transformation, homogeneity variances can assumed (p>αp> \\alpha calculated bartlett.test()), p-value aov() displayed.","code":"insect_sprays_tr <- InsectSprays insect_sprays_tr$count_sqrt <- sqrt(InsectSprays$count) visstat(insect_sprays_tr, \"count_sqrt\", \"spray\")"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"kruskal-wallis-rank-sum-test","dir":"Articles","previous_headings":"Comparing central tendencies > One-way test, ANOVA or Kruskal-Wallis test > Examples","what":"Kruskal-Wallis rank sum test","title":"visStatistics","text":"iris data set gives measurement petal width cm three different iris species.  iris data example, graphical analysis scatter plots standardised residuals well Q-Q plot suggest residuals normally distributed. visual inspection confirmed small p-values implemented tests normality, Shapiro-Wilk test Anderson-Darling test. p-values Shapiro-Wilk test Anderson-Darling test smaller α=1−\\alpha=1-conf.int (example ), visstat switches non-parametric alternative kruskal.test(). Post-hoc analysis pairwise.wilcox.test() reveals significant differences petal width three species (green letters differ).","code":"visstat(iris, \"Petal.Width\", \"Species\")"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"linear-regression","dir":"Articles","previous_headings":"","what":"Linear Regression","title":"visStatistics","text":"feature varfactor response varsample one level type numerical integer, visstat() performs simple linear regression.","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"residual-analysis","dir":"Articles","previous_headings":"Linear Regression","what":"Residual analysis","title":"visStatistics","text":"visstat() checks normal distribution standardised residuals derived lm() graphically Shapiro-Wilk Anderson test (analogue section Residual analysis). p-values null standardised residuals normally distributed Shapiro-Wilk Anderson test smaller 1-conf.int, title residual plot display message “Requirement normally distributed residuals met”. Regardless result residual analysis, visstat() performs regression next step. title graphical output indicates chosen confidence level conf.level,regression parameter confidence intervals p-values, adjusted R2R^2. graph shows raw data, regression line confidence prediction bands corresponding chosen conf.level. visstat() returns list test statistics linear regression, p-values normality tests standardised residuals pointwise estimates confidence prediction bands.","code":""},{"path":[]},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"data-set-cars","dir":"Articles","previous_headings":"Linear Regression > Examples","what":"Data set: cars","title":"visStatistics","text":"cars data set reports speed cars mph distance (dist) ft taken stop.  Increasing confidence level conf.level default 0.95 0.99 results wider confidence prediction bands:  p-values greater conf.level Anderson-Darling normality test Shapiro-Wilk test standardised residuals indicate normality assumption residuals underlying linear regression met.","code":"linreg_cars <- visstat(cars, \"dist\", \"speed\") linreg_cars <- visstat(cars, \"dist\", \"speed\", conf.level = 0.99)"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"data-set-trees","dir":"Articles","previous_headings":"Linear Regression > Examples","what":"Data set: trees","title":"visStatistics","text":"trees data set provides measurements diameter (called “Girth”) inches height feet black cherry trees.  graphical analysis standardised residuals p-values less conf.level Anderson-Darling normality test Shapiro-Wilk test standardised residuals suggest condition normally distributed residuals regression model met. Furthermore linear regression model explains 24% total variance dependent variables “Height” cherry trees. user might consider regression models. tests provided visstat().","code":"linreg_cars <- visstat(trees, \"Height\", \"Girth\", conf.level = 0.9)"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"chi2--and-fisher-test","dir":"Articles","previous_headings":"","what":"χ2{\\chi}^2- and Fisher Test","title":"visStatistics","text":"feature varfactor response varsample categorical type factor, visstat tests null hypothesis, feature response independent . Categorical data usually presented multidimensional arrays, called contingency tables. values cell contingency table observed frequencies unique combination feature response. Based observed frequencies, visstat() calculates expected frequencies null hypothesis. expected frequencies large, large defined least 80% expected frequencies greater 5 none expected frequencies less 1, chisqu.test() performed, otherwise fisher.test() [@Cochran]. case 2--2 contingency tables, continuity correction applied thechisqu.test()`. visstat() prints grouped column plot p-value corresponding test title mosaic plot Pearson’s residuals (details see documentation function mosaic() vcd package ) generated.","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"converting-a-contingency-tables-to-a-data-frame-","dir":"Articles","previous_headings":"χ2{\\chi}^2- and Fisher Test","what":"Converting a contingency tables to a data.frame.","title":"visStatistics","text":"visstat() needs data.frame column structure input. Contingency tables can transformed structure helper function counts_to_cases().","code":""},{"path":[]},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"creating-a-data-frame-from-a-contingency-table","dir":"Articles","previous_headings":"χ2{\\chi}^2- and Fisher Test > Examples based on data set: HairEyeColor","what":"Creating a data.frame from a contingency table","title":"visStatistics","text":"counts_to_cases() transforms contingency table HairEyeColor data.frame named HairEyeColorDataFrame.","code":"HairEyeColorDataFrame <- counts_to_cases(as.data.frame(HairEyeColor))"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"pearsons-chi-squared-test","dir":"Articles","previous_headings":"χ2{\\chi}^2- and Fisher Test > Examples based on data set: HairEyeColor","what":"Pearson’s Chi-squared test —","title":"visStatistics","text":"","code":"hair_eye_color_df <- counts_to_cases(as.data.frame(HairEyeColor)) visstat(hair_eye_color_df, \"Hair\", \"Eye\")"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"pearsons-chi-squared-test-with-yates-continuity-correction","dir":"Articles","previous_headings":"χ2{\\chi}^2- and Fisher Test > Examples based on data set: HairEyeColor","what":"Pearson’s Chi-squared test with Yate’s continuity correction","title":"visStatistics","text":"2 2 contingency tables, vistat() applies continuity correction test statistics Chi-squared test. following example, select participants black brown hair brown blue eyes resulting 2 2 contingency table.","code":"hair_black_brown_eyes_brown_blue <- HairEyeColor[1:2, 1:2, ] #Transform to data frame hair_black_brown_eyes_brown_blue_df<- counts_to_cases(as.data.frame(hair_black_brown_eyes_brown_blue)) #Chi-squared test visstat(hair_black_brown_eyes_brown_blue_df, \"Hair\", \"Eye\")"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"fishers-exact-test-and-mosaic-plot-with-pearson-residuals","dir":"Articles","previous_headings":"χ2{\\chi}^2- and Fisher Test > Examples based on data set: HairEyeColor","what":"Fisher’s exact test and mosaic plot with Pearson residuals","title":"visStatistics","text":", cut 2 x2 contingency table full data set, time keeping male participants black brown hair hazel green eyes. Pearson’s Chi-squared 2 x2 contingency table give expected value less 5 one four cells (corresponding 25% cells), violating requirement Chi-squared test expected value least 5 majority (80%) cells (Cochran 1954). Therefore Fisher exact test chosen.","code":"hair_eye_color_male <- HairEyeColor[, , 1] # Slice out a 2 by 2 contingency table black_brown_hazel_green_male <- hair_eye_color_male[1:2, 3:4] #Transform to data frame black_brown_hazel_green_male <- counts_to_cases(as.data.frame(black_brown_hazel_green_male)) # Fisher test fisher_stats <- visstat(black_brown_hazel_green_male, \"Hair\", \"Eye\")"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"saving-the-graphical-output","dir":"Articles","previous_headings":"","what":"Saving the graphical output","title":"visStatistics","text":"generated graphics can saved file formats supported Cairo(): “png”, “jpeg”, “pdf”, “svg”, “ps” “tiff”. following example store graphics files output format “png” plotDirectory tempdir(). naming convention used graphics file reflects chosen statistical test variable names. Remove graphical output plotDirectory:","code":"visstat(black_brown_hazel_green_male, \"Hair\", \"Eye\", graphicsoutput = \"png\", plotDirectory =  tempdir() ) file.remove(file.path(tempdir(), \"chi_squared_or_fisher_Hair_Eye.png\")) #> [1] TRUE file.remove(file.path(tempdir(), \"mosaic_complete_Hair_Eye.png\")) #> [1] TRUE"},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"overview-of-implemented-tests","dir":"Articles","previous_headings":"","what":"Overview of implemented tests","title":"visStatistics","text":"t.test(), wilcox.test(), aov(), kruskal.test(), lm(),fisher.test(), chisqu.test()","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"implemented-tests-to-check-the-normal-distribution-of-standardised-residuals","dir":"Articles","previous_headings":"Overview of implemented tests","what":"Implemented tests to check the normal distribution of standardised residuals","title":"visStatistics","text":"shapiro.test() ad.test()","code":""},{"path":"https://shhschilling.github.io/visStatistics/articles/visStatistics.html","id":"implemented-post-hoc-tests","dir":"Articles","previous_headings":"Overview of implemented tests","what":"Implemented post-hoc tests","title":"visStatistics","text":"TukeyHSD() aov() pairwise.wilcox.test() kruskal.test().","code":""},{"path":[]},{"path":"https://shhschilling.github.io/visStatistics/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sabine Schilling. Maintainer, author, copyright holder. Peter Kauf. Contributor.","code":""},{"path":"https://shhschilling.github.io/visStatistics/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schilling S (2025). visStatistics: Automated Visualization Statistical Tests. R package version 0.1.2, https://github.com/shhschilling/visStatistics/.","code":"@Manual{,   title = {visStatistics: Automated Visualization of Statistical Tests},   author = {Sabine Schilling},   year = {2025},   note = {R package version 0.1.2},   url = {https://github.com/shhschilling/visStatistics/}, }"},{"path":"https://shhschilling.github.io/visStatistics/reference/colorscheme.html","id":null,"dir":"Reference","previous_headings":"","what":"colorscheme(x) selects color scheme of graphical output. Function parameter NULL lists all available color schemes, 1 a color tuple of green and blue 2 a color tuple of dark green and turquoi, 3 a colorplaette as defined by RcolorBrewer — colorscheme","title":"colorscheme(x) selects color scheme of graphical output. Function parameter NULL lists all available color schemes, 1 a color tuple of green and blue 2 a color tuple of dark green and turquoi, 3 a colorplaette as defined by RcolorBrewer — colorscheme","text":"colorscheme(x) selects color scheme graphical output. Function parameter NULL lists available color schemes, 1 color tuple green blue 2 color tuple dark green turquoi, 3 colorplaette defined RcolorBrewer","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/colorscheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"colorscheme(x) selects color scheme of graphical output. Function parameter NULL lists all available color schemes, 1 a color tuple of green and blue 2 a color tuple of dark green and turquoi, 3 a colorplaette as defined by RcolorBrewer — colorscheme","text":"","code":"colorscheme(colorcode = NULL)"},{"path":"https://shhschilling.github.io/visStatistics/reference/colorscheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"colorscheme(x) selects color scheme of graphical output. Function parameter NULL lists all available color schemes, 1 a color tuple of green and blue 2 a color tuple of dark green and turquoi, 3 a colorplaette as defined by RcolorBrewer — colorscheme","text":"colorcode selects color scheme. parameters NULL: list available color schemes, 1: colortuple, 2, colortuple2, 3, ColorPalette","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/colorscheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"colorscheme(x) selects color scheme of graphical output. Function parameter NULL lists all available color schemes, 1 a color tuple of green and blue 2 a color tuple of dark green and turquoi, 3 a colorplaette as defined by RcolorBrewer — colorscheme","text":"selected color scheme, colors given Hex Code #RRGGBB names","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/counts_to_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data frame of counts to data frame of cases. data frame must contain a column with frequencies (counts) as generated by as.data.frame from a contingency table — counts_to_cases","title":"Convert data frame of counts to data frame of cases. data frame must contain a column with frequencies (counts) as generated by as.data.frame from a contingency table — counts_to_cases","text":"Convert data frame counts data frame cases. data frame must contain column frequencies (counts) generated .data.frame contingency table","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/counts_to_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data frame of counts to data frame of cases. data frame must contain a column with frequencies (counts) as generated by as.data.frame from a contingency table — counts_to_cases","text":"","code":"counts_to_cases(x, countcol = \"Freq\")"},{"path":"https://shhschilling.github.io/visStatistics/reference/counts_to_cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data frame of counts to data frame of cases. data frame must contain a column with frequencies (counts) as generated by as.data.frame from a contingency table — counts_to_cases","text":"x data.frame counts generated contingency table. countcol character string, name column x containing counts. Default name column  \"Freq\".","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/counts_to_cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert data frame of counts to data frame of cases. data frame must contain a column with frequencies (counts) as generated by as.data.frame from a contingency table — counts_to_cases","text":"data frame cases dimension (total number counts sum \"Freq\" x) times 2.","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/counts_to_cases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert data frame of counts to data frame of cases. data frame must contain a column with frequencies (counts) as generated by as.data.frame from a contingency table — counts_to_cases","text":"","code":"counts_to_cases(as.data.frame(HairEyeColor[, , 1]), countcol = \"Freq\") #>        Hair   Eye #> 1     Black Brown #> 1.1   Black Brown #> 1.2   Black Brown #> 1.3   Black Brown #> 1.4   Black Brown #> 1.5   Black Brown #> 1.6   Black Brown #> 1.7   Black Brown #> 1.8   Black Brown #> 1.9   Black Brown #> 1.10  Black Brown #> 1.11  Black Brown #> 1.12  Black Brown #> 1.13  Black Brown #> 1.14  Black Brown #> 1.15  Black Brown #> 1.16  Black Brown #> 1.17  Black Brown #> 1.18  Black Brown #> 1.19  Black Brown #> 1.20  Black Brown #> 1.21  Black Brown #> 1.22  Black Brown #> 1.23  Black Brown #> 1.24  Black Brown #> 1.25  Black Brown #> 1.26  Black Brown #> 1.27  Black Brown #> 1.28  Black Brown #> 1.29  Black Brown #> 1.30  Black Brown #> 1.31  Black Brown #> 2     Brown Brown #> 2.1   Brown Brown #> 2.2   Brown Brown #> 2.3   Brown Brown #> 2.4   Brown Brown #> 2.5   Brown Brown #> 2.6   Brown Brown #> 2.7   Brown Brown #> 2.8   Brown Brown #> 2.9   Brown Brown #> 2.10  Brown Brown #> 2.11  Brown Brown #> 2.12  Brown Brown #> 2.13  Brown Brown #> 2.14  Brown Brown #> 2.15  Brown Brown #> 2.16  Brown Brown #> 2.17  Brown Brown #> 2.18  Brown Brown #> 2.19  Brown Brown #> 2.20  Brown Brown #> 2.21  Brown Brown #> 2.22  Brown Brown #> 2.23  Brown Brown #> 2.24  Brown Brown #> 2.25  Brown Brown #> 2.26  Brown Brown #> 2.27  Brown Brown #> 2.28  Brown Brown #> 2.29  Brown Brown #> 2.30  Brown Brown #> 2.31  Brown Brown #> 2.32  Brown Brown #> 2.33  Brown Brown #> 2.34  Brown Brown #> 2.35  Brown Brown #> 2.36  Brown Brown #> 2.37  Brown Brown #> 2.38  Brown Brown #> 2.39  Brown Brown #> 2.40  Brown Brown #> 2.41  Brown Brown #> 2.42  Brown Brown #> 2.43  Brown Brown #> 2.44  Brown Brown #> 2.45  Brown Brown #> 2.46  Brown Brown #> 2.47  Brown Brown #> 2.48  Brown Brown #> 2.49  Brown Brown #> 2.50  Brown Brown #> 2.51  Brown Brown #> 2.52  Brown Brown #> 3       Red Brown #> 3.1     Red Brown #> 3.2     Red Brown #> 3.3     Red Brown #> 3.4     Red Brown #> 3.5     Red Brown #> 3.6     Red Brown #> 3.7     Red Brown #> 3.8     Red Brown #> 3.9     Red Brown #> 4     Blond Brown #> 4.1   Blond Brown #> 4.2   Blond Brown #> 5     Black  Blue #> 5.1   Black  Blue #> 5.2   Black  Blue #> 5.3   Black  Blue #> 5.4   Black  Blue #> 5.5   Black  Blue #> 5.6   Black  Blue #> 5.7   Black  Blue #> 5.8   Black  Blue #> 5.9   Black  Blue #> 5.10  Black  Blue #> 6     Brown  Blue #> 6.1   Brown  Blue #> 6.2   Brown  Blue #> 6.3   Brown  Blue #> 6.4   Brown  Blue #> 6.5   Brown  Blue #> 6.6   Brown  Blue #> 6.7   Brown  Blue #> 6.8   Brown  Blue #> 6.9   Brown  Blue #> 6.10  Brown  Blue #> 6.11  Brown  Blue #> 6.12  Brown  Blue #> 6.13  Brown  Blue #> 6.14  Brown  Blue #> 6.15  Brown  Blue #> 6.16  Brown  Blue #> 6.17  Brown  Blue #> 6.18  Brown  Blue #> 6.19  Brown  Blue #> 6.20  Brown  Blue #> 6.21  Brown  Blue #> 6.22  Brown  Blue #> 6.23  Brown  Blue #> 6.24  Brown  Blue #> 6.25  Brown  Blue #> 6.26  Brown  Blue #> 6.27  Brown  Blue #> 6.28  Brown  Blue #> 6.29  Brown  Blue #> 6.30  Brown  Blue #> 6.31  Brown  Blue #> 6.32  Brown  Blue #> 6.33  Brown  Blue #> 6.34  Brown  Blue #> 6.35  Brown  Blue #> 6.36  Brown  Blue #> 6.37  Brown  Blue #> 6.38  Brown  Blue #> 6.39  Brown  Blue #> 6.40  Brown  Blue #> 6.41  Brown  Blue #> 6.42  Brown  Blue #> 6.43  Brown  Blue #> 6.44  Brown  Blue #> 6.45  Brown  Blue #> 6.46  Brown  Blue #> 6.47  Brown  Blue #> 6.48  Brown  Blue #> 6.49  Brown  Blue #> 7       Red  Blue #> 7.1     Red  Blue #> 7.2     Red  Blue #> 7.3     Red  Blue #> 7.4     Red  Blue #> 7.5     Red  Blue #> 7.6     Red  Blue #> 7.7     Red  Blue #> 7.8     Red  Blue #> 7.9     Red  Blue #> 8     Blond  Blue #> 8.1   Blond  Blue #> 8.2   Blond  Blue #> 8.3   Blond  Blue #> 8.4   Blond  Blue #> 8.5   Blond  Blue #> 8.6   Blond  Blue #> 8.7   Blond  Blue #> 8.8   Blond  Blue #> 8.9   Blond  Blue #> 8.10  Blond  Blue #> 8.11  Blond  Blue #> 8.12  Blond  Blue #> 8.13  Blond  Blue #> 8.14  Blond  Blue #> 8.15  Blond  Blue #> 8.16  Blond  Blue #> 8.17  Blond  Blue #> 8.18  Blond  Blue #> 8.19  Blond  Blue #> 8.20  Blond  Blue #> 8.21  Blond  Blue #> 8.22  Blond  Blue #> 8.23  Blond  Blue #> 8.24  Blond  Blue #> 8.25  Blond  Blue #> 8.26  Blond  Blue #> 8.27  Blond  Blue #> 8.28  Blond  Blue #> 8.29  Blond  Blue #> 9     Black Hazel #> 9.1   Black Hazel #> 9.2   Black Hazel #> 9.3   Black Hazel #> 9.4   Black Hazel #> 9.5   Black Hazel #> 9.6   Black Hazel #> 9.7   Black Hazel #> 9.8   Black Hazel #> 9.9   Black Hazel #> 10    Brown Hazel #> 10.1  Brown Hazel #> 10.2  Brown Hazel #> 10.3  Brown Hazel #> 10.4  Brown Hazel #> 10.5  Brown Hazel #> 10.6  Brown Hazel #> 10.7  Brown Hazel #> 10.8  Brown Hazel #> 10.9  Brown Hazel #> 10.10 Brown Hazel #> 10.11 Brown Hazel #> 10.12 Brown Hazel #> 10.13 Brown Hazel #> 10.14 Brown Hazel #> 10.15 Brown Hazel #> 10.16 Brown Hazel #> 10.17 Brown Hazel #> 10.18 Brown Hazel #> 10.19 Brown Hazel #> 10.20 Brown Hazel #> 10.21 Brown Hazel #> 10.22 Brown Hazel #> 10.23 Brown Hazel #> 10.24 Brown Hazel #> 11      Red Hazel #> 11.1    Red Hazel #> 11.2    Red Hazel #> 11.3    Red Hazel #> 11.4    Red Hazel #> 11.5    Red Hazel #> 11.6    Red Hazel #> 12    Blond Hazel #> 12.1  Blond Hazel #> 12.2  Blond Hazel #> 12.3  Blond Hazel #> 12.4  Blond Hazel #> 13    Black Green #> 13.1  Black Green #> 13.2  Black Green #> 14    Brown Green #> 14.1  Brown Green #> 14.2  Brown Green #> 14.3  Brown Green #> 14.4  Brown Green #> 14.5  Brown Green #> 14.6  Brown Green #> 14.7  Brown Green #> 14.8  Brown Green #> 14.9  Brown Green #> 14.10 Brown Green #> 14.11 Brown Green #> 14.12 Brown Green #> 14.13 Brown Green #> 14.14 Brown Green #> 15      Red Green #> 15.1    Red Green #> 15.2    Red Green #> 15.3    Red Green #> 15.4    Red Green #> 15.5    Red Green #> 15.6    Red Green #> 16    Blond Green #> 16.1  Blond Green #> 16.2  Blond Green #> 16.3  Blond Green #> 16.4  Blond Green #> 16.5  Blond Green #> 16.6  Blond Green #> 16.7  Blond Green"},{"path":"https://shhschilling.github.io/visStatistics/reference/get_samples_fact_inputfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Selects columns defined by characters varsample and varfactor from a data.frame — get_samples_fact_inputfile","title":"Selects columns defined by characters varsample and varfactor from a data.frame — get_samples_fact_inputfile","text":"Selects columns defined characters varsample varfactor dataframe, returns selected columns names.","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/get_samples_fact_inputfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selects columns defined by characters varsample and varfactor from a data.frame — get_samples_fact_inputfile","text":"","code":"get_samples_fact_inputfile(dataframe, varsample, varfactor)"},{"path":"https://shhschilling.github.io/visStatistics/reference/get_samples_fact_inputfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Selects columns defined by characters varsample and varfactor from a data.frame — get_samples_fact_inputfile","text":"dataframe data.frame list containing least two columns column headings data type character. Data must column wise ordered. varsample column name dependent variable dataframe, datatype character varfactor column name independent variable dataframe, datatype character","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/get_samples_fact_inputfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Selects columns defined by characters varsample and varfactor from a data.frame — get_samples_fact_inputfile","text":"selected columns, sample, factor, name_of_sample (character string equaling varsample), name_of_factor (character string equaling varsample)","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/get_samples_fact_inputfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Selects columns defined by characters varsample and varfactor from a data.frame — get_samples_fact_inputfile","text":"","code":"get_samples_fact_inputfile(trees, \"Girth\", \"Height\") #> $samples #>  [1]  8.3  8.6  8.8 10.5 10.7 10.8 11.0 11.0 11.1 11.2 11.3 11.4 11.4 11.7 12.0 #> [16] 12.9 12.9 13.3 13.7 13.8 14.0 14.2 14.5 16.0 16.3 17.3 17.5 17.9 18.0 18.0 #> [31] 20.6 #>  #> $fact #>  [1] 70 65 63 72 81 83 66 75 80 75 79 76 76 69 75 74 85 86 71 64 78 80 74 72 77 #> [26] 81 82 80 80 80 87 #>  #> $name_of_sample #> [1] \"Girth\" #>  #> $name_of_factor #> [1] \"Height\" #>  #> $matchingCriteria #> [1] \"\" #>"},{"path":"https://shhschilling.github.io/visStatistics/reference/openGraphCairo.html","id":null,"dir":"Reference","previous_headings":"","what":"Cairo wrapper function — openGraphCairo","title":"Cairo wrapper function — openGraphCairo","text":"Cairo wrapper function returning NULL type specified","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/openGraphCairo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cairo wrapper function — openGraphCairo","text":"","code":"openGraphCairo(   width = 640,   height = 480,   fileName = NULL,   type = NULL,   fileDirectory = getwd(),   pointsize = 12,   bg = \"transparent\",   canvas = \"white\",   units = \"px\",   dpi = 150 )"},{"path":"https://shhschilling.github.io/visStatistics/reference/openGraphCairo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cairo wrapper function — openGraphCairo","text":"width see Cairo() height see Cairo() fileName name file created. include file extension \".type\"  file filedirectory. Default file name \"visstat_plot\". type Supported output types \"png\", \"jpeg\", \"pdf\", \"svg\", \"ps\" \"tiff\". See Cairo() fileDirectory path directory, plot stored. Default current working directory. pointsize see Cairo() bg see Cairo() canvas see Cairo() units see Cairo() dpi DPI used conversion units pixels. Default value 150.","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/openGraphCairo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cairo wrapper function — openGraphCairo","text":"NULL, type specified. Otherwise see Cairo()","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/openGraphCairo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cairo wrapper function — openGraphCairo","text":"openGraphCairo() Cairo() wrapper function. Differences Cairo: ) prematurely ends function call Cairo() returning NULL, output type  types \"png\", \"jpeg\", \"pdf\", \"svg\", \"ps\" \"tiff\" provided. b) file argument underlying Cairo function generated file.path(fileDirectory,paste(fileName,\".\", type, sep = \"\")).","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/openGraphCairo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cairo wrapper function — openGraphCairo","text":"","code":"##  adapted from example in \\code{Cairo()} openGraphCairo(fileName = \"normal_dist\", type = \"pdf\", fileDirectory = tempdir()) plot(rnorm(4000), rnorm(4000), col = \"#ff000018\", pch = 19, cex = 2) dev.off() # creates a file \"normal_dist.pdf\" in the directory specified in fileDirectory #> pdf  #>   2  # ## remove the plot from fileDirectory file.remove(file.path(tempdir(), \"normal_dist.pdf\")) #> [1] TRUE"},{"path":"https://shhschilling.github.io/visStatistics/reference/saveGraphVisstat.html","id":null,"dir":"Reference","previous_headings":"","what":"Saves Graphical Output — saveGraphVisstat","title":"Saves Graphical Output — saveGraphVisstat","text":"Closes graphical devices dev.() saves output fileName type provided.","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/saveGraphVisstat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Saves Graphical Output — saveGraphVisstat","text":"","code":"saveGraphVisstat(   fileName = NULL,   type = NULL,   fileDirectory = getwd(),   oldfile = NULL )"},{"path":"https://shhschilling.github.io/visStatistics/reference/saveGraphVisstat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Saves Graphical Output — saveGraphVisstat","text":"fileName name file created directory fileDirectory without file extension \".type\". type see Cairo(). fileDirectory path directory, graphic stored. Default setting current working directory. oldfile old file name overwritten","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/saveGraphVisstat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Saves Graphical Output — saveGraphVisstat","text":"NULL, type fileName provided, TRUE graph created","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/saveGraphVisstat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Saves Graphical Output — saveGraphVisstat","text":"","code":"# very simple KDE (adapted from example in Cairo()) openGraphCairo(type = \"png\", fileDirectory = tempdir()) plot(rnorm(4000), rnorm(4000), col = \"#ff000018\", pch = 19, cex = 2) # save file \"norm.png\" in directory specified in fileDirectory saveGraphVisstat(\"norm\", type = \"png\", fileDirectory = tempdir()) #> [1] TRUE file.remove(file.path(tempdir(), \"norm.png\")) # remove file \"norm.png\" from fileDirectory. #> [1] TRUE"},{"path":"https://shhschilling.github.io/visStatistics/reference/vis_anova_assumptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualisation of the normality distribution of the standardised residuals of the ANOVA — vis_anova_assumptions","title":"Visualisation of the normality distribution of the standardised residuals of the ANOVA — vis_anova_assumptions","text":"vis_anova_assumptions checks normality standardised residuals ANOVA.    Shapiro-Wilk test shapiro.test() Anderson-Darling test ad.test() check    null standardised residuals normally distributed.    generates scatter plot    standardised residuals versus fitted mean values linear models level fact.    Furthermore normal QQ plot standardised residuals generated.    null homogeneity variances  factor level tested bartlett.test().","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/vis_anova_assumptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualisation of the normality distribution of the standardised residuals of the ANOVA — vis_anova_assumptions","text":"","code":"vis_anova_assumptions(   samples,   fact,   conf.level = 0.95,   samplename = \"\",   factorname = \"\",   cex = 1 )"},{"path":"https://shhschilling.github.io/visStatistics/reference/vis_anova_assumptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualisation of the normality distribution of the standardised residuals of the ANOVA — vis_anova_assumptions","text":"samples vector containing dependent variable, datatype numeric fact vector containing independent variable, datatype factor conf.level confidence level, 0.95=default samplename name sample used graphical output, dataype character , \"\"=default factorname name sample used graphical output, dataype character, \"\"=default cex number indicating amount plotting text symbols scaled relative default. 1=default, 1.5 50% larger, 0.5 50% smaller, etc.","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/vis_anova_assumptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualisation of the normality distribution of the standardised residuals of the ANOVA — vis_anova_assumptions","text":"list containing test statistics anova, p values  generated    Shapiro-Wilk test shapiro.test(), Anderson-Darling test ad.test() bartlett.test().","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/vis_anova_assumptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualisation of the normality distribution of the standardised residuals of the ANOVA — vis_anova_assumptions","text":"","code":"ToothGrowth$dose <- as.factor(ToothGrowth$dose) vis_anova_assumptions(ToothGrowth$len, ToothGrowth$dose)  #> $summary_anova #>             Df Sum Sq Mean Sq F value   Pr(>F)     #> fact         2   2426    1213   67.42 9.53e-16 *** #> Residuals   57   1026      18                      #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $shapiro_test #>  #> \tShapiro-Wilk normality test #>  #> data:  rstandard(anova) #> W = 0.96731, p-value = 0.1076 #>  #>  #> $ad_test #>  #> \tAnderson-Darling normality test #>  #> data:  rstandard(anova) #> A = 0.68679, p-value = 0.06928 #>  #>  #> $bartlett_test #>  #> \tBartlett test of homogeneity of variances #>  #> data:  samples by fact #> Bartlett's K-squared = 0.66547, df = 2, p-value = 0.717 #>  #>   vis_anova_assumptions(ToothGrowth$len, ToothGrowth$supp)  #> $summary_anova #>             Df Sum Sq Mean Sq F value Pr(>F)   #> fact         1    205  205.35   3.668 0.0604 . #> Residuals   58   3247   55.98                  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $shapiro_test #>  #> \tShapiro-Wilk normality test #>  #> data:  rstandard(anova) #> W = 0.96949, p-value = 0.1378 #>  #>  #> $ad_test #>  #> \tAnderson-Darling normality test #>  #> data:  rstandard(anova) #> A = 0.51449, p-value = 0.185 #>  #>  #> $bartlett_test #>  #> \tBartlett test of homogeneity of variances #>  #> data:  samples by fact #> Bartlett's K-squared = 1.4217, df = 1, p-value = 0.2331 #>  #>  vis_anova_assumptions(iris$Petal.Width, iris$Species)  #> $summary_anova #>              Df Sum Sq Mean Sq F value Pr(>F)     #> fact          2  80.41   40.21     960 <2e-16 *** #> Residuals   147   6.16    0.04                    #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $shapiro_test #>  #> \tShapiro-Wilk normality test #>  #> data:  rstandard(anova) #> W = 0.97217, p-value = 0.003866 #>  #>  #> $ad_test #>  #> \tAnderson-Darling normality test #>  #> data:  rstandard(anova) #> A = 1.8447, p-value = 9.831e-05 #>  #>  #> $bartlett_test #>  #> \tBartlett test of homogeneity of variances #>  #> data:  samples by fact #> Bartlett's K-squared = 39.213, df = 2, p-value = 3.055e-09 #>  #>"},{"path":"https://shhschilling.github.io/visStatistics/reference/visstat.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualization of statistical hypothesis testing based on decision tree — visstat","title":"Visualization of statistical hypothesis testing based on decision tree — visstat","text":"Based decision tree, visstat() picks statistical hypothesis test highest statistical  power dependent variable (response)  independent variable (feature) data.frame named dataframe. Data provided dataframe must structured column wise, varsample varfactor character strings corresponding column names dependent independent variable respectively. test visstat() returns graph main test statistics title well  list  test statistics including eventual post-hoc analysis.","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/visstat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualization of statistical hypothesis testing based on decision tree — visstat","text":"","code":"visstat(   dataframe,   varsample,   varfactor,   conf.level = 0.95,   numbers = TRUE,   minpercent = 0.05,   graphicsoutput = NULL,   plotName = NULL,   plotDirectory = getwd() )"},{"path":"https://shhschilling.github.io/visStatistics/reference/visstat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualization of statistical hypothesis testing based on decision tree — visstat","text":"dataframe data.frame containing least two columns. Data must column wise ordered. varsample column name dependent variable dataframe, datatype character. varsample must one entry list names(dataframe). varfactor column name independent variable dataframe, datatype character.varsample must one entry list names(dataframe). conf.level confidence level interval. numbers logical indicating whether show numbers mosaic count plots. minpercent number 0 1 indicating minimal fraction total count data category displayed    mosaic count plots. graphicsoutput saves plot(s) type \"png\",  \"jpg\", \"tiff\"  \"bmp\" directory specified plotDirectory. graphicsoutput=NULL, plots saved. plotName graphical output stored following naming convention \"plotName.graphicsoutput\" plotDirectory. Without specifying parameter, plotName automatically generated following convention \"statisticalTestName_varsample_varfactor\". plotDirectory specifies directory, generated plots stored. Default current working directory.","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/visstat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualization of statistical hypothesis testing based on decision tree — visstat","text":"list containing statistics test highest statistical power meeting assumptions. values returned invisibly copies. Values can accessed assigning return value visstat.","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/visstat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualization of statistical hypothesis testing based on decision tree — visstat","text":"Implemented tests: lm(),t.test(), wilcox.test(), aov(), kruskal.test(), fisher.test(), chisqu.test(). Implemented tests normal distribution standardized residuals: shapiro.test() ad.test(). Implemented post-hoc tests: TukeyHSD() aov() pairwise.wilcox.test() kruskal.test(). comparison averages, following algorithm  depends value parameter conf.level, defaults 0.95. p-values standardized residuals  shapiro.test() ks.test() smaller error probability 1-conf.level, kruskal.test() resp. wilcox.test() performed, otherwise oneway.test() aov() resp. t.test() performed displayed. Exception: sample size levels bigger 30,  wilcox.test() never executed,instead always t.test() performed (Lumley et al. (2002) <doi:10.1146/annurev.publheath.23.100901.140546>). test independence count data, Cochran's rule (Cochran (1954) <doi:10.2307/3001666>) implemented: 20 percent cells expected count smaller 5 expected cell count zero,  fisher.test() performed displayed, otherwise chisqu.test(). cases case additional mosaic plot showing Pearson's residuals generated.","code":""},{"path":"https://shhschilling.github.io/visStatistics/reference/visstat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualization of statistical hypothesis testing based on decision tree — visstat","text":"","code":"## Welch Two Sample t-test (calling t.test()) visstat(mtcars, \"mpg\", \"am\")    ## Wilcoxon rank sum test (calling wilcox.test()) grades_gender <- data.frame(   Sex = as.factor(c(rep(\"Girl\", 20), rep(\"Boy\", 20))),   Grade = c(     19.3, 18.1, 15.2, 18.3, 7.9, 6.2, 19.4,     20.3, 9.3, 11.3, 18.2, 17.5, 10.2, 20.1, 13.3, 17.2, 15.1, 16.2, 17.3,     16.5, 5.1, 15.3, 17.1, 14.8, 15.4, 14.4, 7.5, 15.5, 6.0, 17.4,     7.3, 14.3, 13.5, 8.0, 19.5, 13.4, 17.9, 17.7, 16.4, 15.6   ) ) visstat(grades_gender, \"Grade\", \"Sex\")   ## One-way analysis of means (oneway.test()) anova_npk <- visstat(npk, \"yield\", \"block\")   anova_npk # prints summary of tests #> $`summary statistics_anova` #>             Df Sum Sq Mean Sq F value Pr(>F)   #> fact         5  343.3   68.66   2.318 0.0861 . #> Residuals   18  533.1   29.61                  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $`summary statistics_oneway` #>  #> \tOne-way analysis of means (not assuming equal variances) #>  #> data:  samples and fact #> F = 6.2463, num df = 5.0000, denom df = 8.0508, p-value = 0.01178 #>  #>  #> $adjusted_p_values_tuk #>   Tukey multiple comparisons of means #>     95% family-wise confidence level #>  #> Fit: aov(formula = samples ~ fact) #>  #> $fact #>        diff        lwr       upr     p adj #> 2-1   3.425  -8.804242 15.654242 0.9440575 #> 3-1   6.750  -5.479242 18.979242 0.5166401 #> 4-1  -3.900 -16.129242  8.329242 0.9074049 #> 5-1  -3.500 -15.729242  8.729242 0.9390165 #> 6-1   2.325  -9.904242 14.554242 0.9893559 #> 3-2   3.325  -8.904242 15.554242 0.9503518 #> 4-2  -7.325 -19.554242  4.904242 0.4312574 #> 5-2  -6.925 -19.154242  5.304242 0.4900643 #> 6-2  -1.100 -13.329242 11.129242 0.9996936 #> 4-3 -10.650 -22.879242  1.579242 0.1094850 #> 5-3 -10.250 -22.479242  1.979242 0.1321421 #> 6-3  -4.425 -16.654242  7.804242 0.8539828 #> 5-4   0.400 -11.829242 12.629242 0.9999980 #> 6-4   6.225  -6.004242 18.454242 0.5981409 #> 6-5   5.825  -6.404242 18.054242 0.6604328 #>  #>  #> $conf.level #> [1] 0.95 #>   ## Kruskal-Wallis rank sum test (calling kruskal.test()) visstat(iris, \"Petal.Width\", \"Species\")   visstat(InsectSprays, \"count\", \"spray\")  #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties #> Warning: cannot compute exact p-value with ties   ## Linear regression visstat(trees, \"Girth\", \"Height\", conf.level = 0.99)    ## Pearson's Chi-squared test and mosaic plot with Pearson residuals ### Transform array to data.frame HairEyeColorDataFrame <- counts_to_cases(as.data.frame(HairEyeColor)) visstat(HairEyeColorDataFrame, \"Hair\", \"Eye\")    ## 2x2 contingency tables with Fisher's exact test and mosaic plot with Pearson residuals HairEyeColorMaleFisher <- HairEyeColor[, , 1] ### slicing out a 2 x2 contingency table blackBrownHazelGreen <- HairEyeColorMaleFisher[1:2, 3:4] blackBrownHazelGreen <- counts_to_cases(as.data.frame(blackBrownHazelGreen)) fisher_stats <- visstat(blackBrownHazelGreen, \"Hair\", \"Eye\")   fisher_stats # print out summary statistics #> $p.value #> [1] 0.503545 #>  #> $conf.int #> [1] 0.07725895 2.40885255 #> attr(,\"conf.level\") #> [1] 0.95 #>  #> $estimate #> odds ratio  #>  0.5062015  #>  #> $null.value #> odds ratio  #>          1  #>  #> $alternative #> [1] \"two.sided\" #>  #> $method #> [1] \"Fisher's Exact Test for Count Data\" #>  #> $data.name #> [1] \"counts\" #>  #> $mosaic_stats #>       Hair Brown Black #> Eye                    #> Hazel         25    10 #> Green         15     3 #>     ## Saving the graphical output in directory plotDirectory ## A) saving graphical output of type \"png\" in temporary directory tempdir() ##    with default naming convention: visstat(blackBrownHazelGreen, \"Hair\", \"Eye\", graphicsoutput = \"png\",  plotDirectory = tempdir())  ## remove graphical output from plotDirectory file.remove(file.path(tempdir(), \"chi_squared_or_fisher_Hair_Eye.png\")) #> [1] TRUE file.remove(file.path(tempdir(), \"mosaic_complete_Hair_Eye.png\")) #> [1] TRUE  ## B) Specifying pdf as output type: visstat(iris, \"Petal.Width\", \"Species\", graphicsoutput = \"pdf\",  plotDirectory = tempdir())  ## remove graphical output from plotDirectory file.remove(file.path(tempdir(), \"kruskal_Petal_Width_Species.pdf\")) #> [1] TRUE  ## C) Specifiying plotName overwrites default naming convention visstat(iris, \"Petal.Width\", \"Species\",   graphicsoutput = \"pdf\",   plotName = \"kruskal_iris\", plotDirectory = tempdir() ) ## remove graphical output from plotDirectory file.remove(file.path(tempdir(), \"kruskal_iris.pdf\")) #> [1] TRUE"},{"path":[]},{"path":"https://shhschilling.github.io/visStatistics/news/index.html","id":"news-0-1-2","dir":"Changelog","previous_headings":"","what":"News","title":"visStatistics 0.1.2","text":"Added vignette","code":""},{"path":"https://shhschilling.github.io/visStatistics/news/index.html","id":"bug-fixes-0-1-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"visStatistics 0.1.2","text":"Regression confidence prediction bands now depend conf.level. Post-hoc-Analysis Kruskal-Wallis-test (pairwise.wilcox.test()) now depends 1-conf.int Switch fisher.test() now depends expected cell counts","code":""}]
