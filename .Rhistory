library(visStatistics)
test=visstat(cars,"dist","speed",conf.level=0.9)
library(visStatistics)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/detach_package.R', echo=TRUE)
detach_package("visStatistics")
saveRDS(version = 2)
library(visStatistics)
test=visstat(cars,"dist","speed",conf.level=0.9)
devtools::load_all(".")
test=visstat(cars,"dist","speed",conf.level=0.9)
library(visStatistics)
test=visstat(cars,"dist","speed",conf.level=0.9)
test
library(visStatistics)
test=visstat(cars,"dist","speed",conf.level=0.9)
cars
?mtcars
data()
?trees
?cars
library(visStatistics)
test=visstat(cars,"dist","speed",conf.level=0.9)
test
test$anderson_darling_test_residuals
?cars
linreg_cars=visstat(cars,"dist","speed",conf.level=0.99)
linreg_cars$shapiro_test_residuals
?iris
linreg_cars
linreg_cars$anderson_darling_test_residuals
?cars
?iris
vis_anova_assumptions(cars,"dist","speed",conf.level=0.99)
vis_anova_assumptions(cars,"dist","speed")
vis_anova_assumptions(iris$Petal.Width,iris$Species)
data()
ChickWeight
test=visstat(ChickWeight,"weight","time",conf.level=0.9)
test=visstat(chickWeight,"weight","time",conf.level=0.9)
test=visstat(ChickWeight,"weight","time",conf.level=0.9)
hickWeight
ChickWeight
test=visstat(ChickWeight$weight,ChickWeight$time,conf.level=0.9)
as.data.frame(ChickWeight)
test=visstat(as.data.frame(ChickWeight),"weight","time",conf.level=0.9)
library(visStatistics)
vis_anova_assumptions(iris$Petal.Width,iris$Species)
visstat(iris$Petal.Width,iris$Species)
library(visStatistics)
inreg_cars=visstat(cars,"dist","speed",conf.level=0.99)
inewf
inreg
inreg_cars=visstat(cars,"dist","speed",conf.level=0.99)
library(visStatistics)
inreg_cars=visstat(cars,"dist","speed",conf.level=0.99)
library(visStatistics)
?vis_anova_assumptions
anova_npk=visstat(npk,"yield","block")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/vis_anova_assumptions.R', echo=TRUE)
visstat(iris,"Petal.Width", "Species")
install_github("shhschilling/visStatistics")
library(devtools)
install_github("shhschilling/visStatistics")
library(visStatistics)
visstat(mtcars,"mpg","am")`
``
visstat(mtcars,"mpg","am")
test=visstat(mtcars,"mpg","am")
test
ttestStatistics=visstat(mtcars,"mpg","am")
ttestStatistics
library(visStatistics)
an = aov(samples ~ fact)
library(visStatistics)
anova_npk=visstat(npk,"yield","block")
one.way <- oneway(InsectSprays$spray, y = InsectSprays$count, posthoc = 'games-howell')
install.libraries("userfriendlyscience")
install.packages("userfriendlyscience")
library(visStatistics)
anova_npk=visstat(npk,"yield","block")
library(visStatistics)
anova_npk=visstat(npk,"yield","block")
?oneway.test
?tuk
TukeyHSD
?TukeyHSD
library(visStatistics)
anova_npk=visstat(npk,"yield","block")
library(visStatistics)
anova_npk=visstat(npk,"yield","block")
anova_npk
post hoc analysis after one way test
library(userfriendlyscience)
library(visStatistics)
anova_npk=visstat(npk,"yield","block")
visstat(InsectSprays, "count", "spray")
InsectSprays
?InsectSprays
visstat(InsectSprays, "count", "spray")
InsectSprays2=InsectSprays
InsectSprays2$count=sqrt(InsectSprays$count)
InsectSprays2
visstat(InsectSprays2, "count", "spray")
InsectSprays2$count=sqrt(InsectSprays$count)
InsectSprays_tr=InsectSprays
InsectSprays_tr$count=sqrt(InsectSprays$count)
visstat(InsectSprays_tr, "count", "spray")
InsectSprays_tr=InsectSprays
InsectSprays_tr$count=sqrt(InsectSprays$count)
visstat(InsectSprays_tr, "count", "spray")
InsectSprays2$count=sqrt(InsectSprays$count)
InsectSprays_tr=InsectSprays
InsectSprays_tr$count=sqrt(InsectSprays$count)
visstat(InsectSprays_tr, "count", "spray")
test=visstat(InsectSprays_tr, "count", "spray")
test
label_aov="ANOVA"
label_aov
pippo=list(label_aov=c(1,2,3))
pippo
string(label_aov)
char.expand(label_aov)
which(label_aov)
typeof(label_aov)
typeof("adjusted_p_values_tuk")
class("adjusted_p_values_tuk")
class(label_aov)
p_bart=0.5
if (p_bart>1-conf.level){
p_aov=summaryAnova[[1]][["Pr(>F)"]]
label_aov="ANOVA"
summarystat=summaryAnova
}else{
p_aov=oneway$p.value
label_aov="One-Way test"
summarystat=oneway
}
conf.level=0.95
if (p_bart>1-conf.level){
p_aov=summaryAnova[[1]][["Pr(>F)"]]
label_aov="ANOVA"
summarystat=summaryAnova
}else{
p_aov=oneway$p.value
label_aov="One-Way test"
summarystat=oneway
}
test
library(visStatistics)
InsectSprays_tr=InsectSprays
InsectSprays_tr$count=sqrt(InsectSprays$count)
visstat(InsectSprays_tr, "count", "spray")
p_aov
label_aov
InsectSprays_tr=InsectSprays
InsectSprays_tr$count=sqrt(InsectSprays$count)
visstat(InsectSprays_tr, "count", "spray")
InsectSprays_tr=InsectSprays
InsectSprays_tr$count=sqrt(InsectSprays$count)
visstat(InsectSprays_tr, "count", "spray")
InsectSprays_tr=InsectSprays
InsectSprays_tr$count=sqrt(InsectSprays$count)
visstat(InsectSprays_tr, "count", "spray")
label_aov
InsectSprays_tr=InsectSprays
InsectSprays_tr$count=sqrt(InsectSprays$count)
visstat(InsectSprays_tr, "count", "spray")
test=visstat(InsectSprays_tr, "count", "spray")
test
label_aov="hans"
list(label_aov=1)
list(as.character(label_aov)=1)
list(label_aov=1)
label_apv
label_aov
str(label_aov)
list(str(label_aov)=1)
list(str(label_aov) = 1)
label_aov="hans"
str(label_aov)
test=str(label_aov)
list(test = 1)
library(visStatistics)
test=visstat(InsectSprays_tr, "count", "spray")
test
library(visStatistics)
test=visstat(InsectSprays_tr, "count", "spray")
library(visStatistics)
test=visstat(InsectSprays_tr, "count", "spray")
library(visStatistics)
test=visstat(InsectSprays_tr, "count", "spray")
library(visStatistics)
test=visstat(InsectSprays_tr, "count", "spray")
library(visStatistics)
test=visstat(InsectSprays_tr, "count", "spray")
library(visStatistics)
install.packags("rstatix")
install.packages("rstatix")
source('~/OneDrive - Hochschule Luzern/Forschung/post-hoc.tests.R', echo=TRUE)
games_howell_test(TootGrowth$len ~ TootGrowth$dose)
games_howell_test(ToothGrowth$len ~ ToothGrowth$dose)
games_howell_test(TootGrowth$len ~ TootGrowth$dose)
ToothGrowth %>% games_howell_test(len ~ dose)
games_howell_test(ToothGrowth,len ~ dose)
ToothGrowth %>% games_howell_test(len ~ dose)
TukeyHSD(ToothGrowth,len ~ dose)
?TukeyHSD
TukeyHSD(aov(ToothGrowth),len ~ dose)
TukeyHSD(aov(ToothGrowth)
)
TukeyHSD(aov(ToothGrowth, len ~ dose)
)
aov(ToothGrowth, len ~ dose))
aov(ToothGrowth, len ~ dose)
aov(ToothGrowth$len ~ TooGrowth$dose)
aov(ToothGrowth$len ~ ToothGrowth$dose)
test=aov(ToothGrowth$len ~ ToothGrowth$dose)
Tuckey(test)
TukeyHSDkey(test)
TukeyHSD(test)
library(visStatistics)
?wilcox.test
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/vis_anova_assumptions.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
linreg_cars=visstat(cars,"dist","speed")
linreg_cars=bartlett.test(cars,"dist","speed")
linreg_cars
anova = aov(samples ~ fact)
anova = aov(cars$dist~cars$speed)
anova
lm = lm(cars$dist~cars$speed)
lm
anova = aov(cars$dist~cars$speed)
summary(anova)
lm
summary(lm)
library(visStatistics)
linreg_cars=visstat(cars,"dist","speed")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/detach_package.R', echo=TRUE)
detach_package("visSatistics")
library(visStatistics)
linreg_cars=visstat(cars,"dist","speed")
library(visStatistics)
linreg_cars=visstat(cars,"dist","speed")
library(visStatistics)
linreg_cars=visstat(cars,"dist","speed")
?shapiro.test
vis_normality_assumptions(
cars$speed,
cars$dist)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
vis_normality_assumptions(
cars$speed,
cars$dist)
library(nortest)
vis_normality_assumptions(
cars$speed,
cars$dist)
linreg_cars=visstat(cars,"dist","speed")
linreg_cars
visstat(trees,"Girth","Height",conf.level=0.99)
test1=isstat(trees,"Girth","Height",conf.level=0.99)
test1=isstat(trees,"Girth","Height",conf.level=0.95)
test1=visstat(trees,"Girth","Height",conf.level=0.95)
test2=lm(trees,"Girth"~"Height")
test2=lm(trees,Girth~Height)
test2=lm(trees$Girth~trees$Height)
test2
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
test2=lm(trees$Girth~trees$Height)
test2
test2=lm(trees$Girth~trees$Height)
test1=visstat(trees,"Girth","Height",conf.level=0.95)
test1
test1=visstat(trees,"Girth","Height",conf.level=0.95)
visstat(trees,"Girth","Height",conf.level=0.95)
test1=visstat(trees,"Girth","Height",conf.level=0.95)
test1
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
test1=visstat(trees,"Girth","Height",conf.level=0.95)
?shapiro.test
shapiro.test(rstandard(lm(trees$Girth ~ trees$Height)))
lm(trees$Girth ~ trees$Height)
ad.test(rstandard(lm(trees$Girth ~ trees$Height)))
lm(trees$Girth ~ trees$Height)
linreg_cars=visstat(cars,"dist","speed")
?trees
linreg_cars=visstat(cars,"dist","speed",conf.level=0.99)
linreg_cars$anderson_darling_test_residuals
linreg_cars$shapiro_test_residuals
linreg_cars=visstat(trees,"Height","Girth",conf.level=0.9)
anova_npk=visstat(npk,"yield","block")
library(visStatistics)
visstat(blackBrownHazelGreen,"Hair","Eye",graphicsoutput = "png",plotDirectory=tempdir())
HairEyeColorMaleFisher = HairEyeColor[,,1]
#slicing out a 2 x2 contingency table
blackBrownHazelGreen = HairEyeColorMaleFisher[1:2,3:4]
blackBrownHazelGreen = counts_to_cases(as.data.frame(blackBrownHazelGreen));
fisher_stats=visstat(blackBrownHazelGreen,"Hair","Eye")
fisher_stats #print out summary statistics
visstat(blackBrownHazelGreen,"Hair","Eye",graphicsoutput = "png",plotDirectory=tempdir())
library(visStatistics)
linreg_cars=visstat(trees,"Height","Girth",conf.level=0.9)
saveGraphVisstat(fileName = )
?saveGraphVisstat
?openGraphCairo
visstat(counts_to_cases(as.data.frame(HairEyeColor[,,1])),"Hair","Eye")
library(visStatistics)
tools::check_packages_in_dir(reverse = list())
library(visStatistics)
tools::check_packages_in_dir(reverse = list())
library(visStatistics)
tools::package_dependencies(reverse = TRUE)
library(visStatistics)
counts_to_cases(as.data.frame(HairEyeColor[,,1])
)
counts_to_cases(as.data.frame(HairEyeColor))
typeof(HairEyeColor)
?HairEyeColor
HairEyeColorDataframe=counts_to_cases(as.data.frame(HairEyeColor[,,1]))
HairEyeColorDataFrame=counts_to_cases(as.data.frame(HairEyeColor[,,1]))
HairEyeColorDataFrame
HairEyeColorDataFrame=counts_to_cases(as.data.frame(HairEyeColor))
HairEyeColorDataFrame
visstat(HairEyeColorDataFrame,"Hair","Eye")
library(visStatistics)
visstat(HairEyeColorDataFrame,"Hair","Eye")
visstat(counts_to_cases(as.data.frame(HairEyeColor),"Hair","Eye")
)
visstat(counts_to_cases(as.data.frame(HairEyeColor),"Hair","Eye"))
as.data.frame(HairEyeColor)
HairEyeColorDataFrame=counts_to_cases(as.data.frame(HairEyeColor))
visstat(HairEyeColorDataFrame,"Hair","Eye")
library(visStatistics)
?npk
npk
counts_to_cases(npk)
?npk
npk.aov <- aov(yield ~ block + N*P*K, npk)
?Titanic
Titanic
counts_to_cases(Titanic)
Titanic
apply(Titanic, c(3, 4), sum)
count_to_cases(apply(Titanic, c(3, 4), sum))
counts_to_cases(apply(Titanic, c(3, 4), sum))
apply(Titanic, c(3, 4), sum)
Titanic(c3,4)
Titanic[,3)
Titanic[,3]
Titanic
apply(Titanic, c(3, 4), sum)
aov(tyre$Mileage~tyre$Brands)
library(car)
tyre<-read.csv("https://datascienceplus.com/wp-content/uploads/2017/08/tyre.csv")
tyre
oneway_npk=visstat(npk,"yield","block")
library(visStatistics)
oneway_npk=visstat(npk,"yield","block")
onewway_npk
oneway_np
oneway_npk
oneway.test(npk$yield~npk$block)
TukeyHSD(npk$yield~npk$block)
?TukeyHSD
oneway_npk
test=neway.test(npk$yield~npk$block)
test=oneway.test(npk$yield~npk$block)
TukeyHSD(test)
TukeyHSD(summary(test)
test=oneway.test(npk$yield~npk$block)
TukeyHSD(summary(test))
test=aov(npk$yield~npk$block)
TukeyHSD(summary(test))
test=aov(npk$yield~npk$block)
TukeyHSD(test)
test=aov(npk$yield~npk$block)
TukeyHSD(test)
test=oneway.test(npk$yield~npk$block)
TukeyHSD(test)
paste("mean with", conf.level*100 ,"% conf. intervall ")
conf.level
conf.level=0.95
paste("mean with", conf.level*100 ,"% conf. intervall ")
c("mean +- sd ", paste("mean with", conf.level*100 ,"% conf. intervall "))
library(visStatistics)
oneway_npk=visstat(npk,"yield","block")
visstat
oneway_npk=visstat(npk,"yield","block")
oneway_npk
choose(6,2)
library(visStatistics)
oneway_npk=visstat(npk,"yield","block")
library(visStatistics)
oneway_npk=visstat(npk,"yield","block")
binom(2,2)
choose(2,2)
InsectSprays_tr=InsectSprays
InsectSprays_tr$count=sqrt(InsectSprays$count)
visstat(InsectSprays_tr, "count", "spray")
choose(6,2)
choose(3,2)
library(visStatistics)
oneway_npk=visstat(npk,"yield","block")
InsectSprays_tr=InsectSprays
InsectSprays_tr$count=sqrt(InsectSprays$count)
visstat(InsectSprays_tr, "count", "spray")
library(visStatistics)
InsectSprays_tr=InsectSprays
InsectSprays_tr$count=sqrt(InsectSprays$count)
visstat(InsectSprays_tr, "count", "spray")
library(visStatistics)
InsectSprays_tr=InsectSprays
InsectSprays_tr$count=sqrt(InsectSprays$count)
visstat(InsectSprays_tr, "count", "spray")
oneway_npk=visstat(npk,"yield","block")
mtcars$am=as.factor(mtcars$am)
ttestStatistics=visstat(mtcars,"mpg","am")
oneway_npk=visstat(npk,"yield","block")
TooGrowth
ToothGrowth
?ToothGrowth
oneway_npk=visstat(npk,"yield","block")
oneway_npk
npk
block[,2]
npk[,2]
npktest=npk
npk[,2]==1
npk[,2]==1=N
npk[,2]==1="N"
(npk[,2]==1)="N"
replace((npk[,2]==1),"N)"
)
replace((npk[,2]==1),"N))
""
replace(npk[,2]==1),"N")
replace(npk[,2]==1,"N")
?replace
replace(npk[,2],1,"N")
replace(npktest[,2],1,"N")
oneway_npk=visstat(npk,"yield","block",conf.level=0.99)
oneway_npk=visstat(npk,"yield","block",conf.level=0.1)
InsectSprays_tr$count=sqrt(InsectSprays$count)
visstat(InsectSprays_tr, "count", "spray")
visstat(InsectSprays, "count", "spray")
?pairwise.wilcox.test
ttach(airquality)
Month <- factor(Month, labels = month.abb[5:9])
attach(airquality)
Month <- factor(Month, labels = month.abb[5:9])
visstaat(airquality,"Ozone","Month")
visstat(airquality,"Ozone","Month")
airquality$Month <- factor(airquality$Month)
visstaat(airquality,"Ozone","Month")
visstat(airquality,"Ozone","Month")
visstat(iris,"Petal.Width", "Species")
saveRDS(version = 2)
visstat(iris,"Petal.Width", "Species")
visstat(InsectSprays, "count", "spray")
visstat(InsectSprays_tr, "count", "spray")
test=visstat(InsectSprays_tr, "count", "spray")
test
plot(test$fact)
test=aov(InsectSprays_tr$count~ InsectSprays_tr$spray)
test
TukeyHSD(test)
t=TukeyHSD(test)
plot(t)
library(visStatistics)
mtcars$am=as.factor(mtcars$am)
ttestStatistics=visstat(mtcars,"mpg","am")
library(visStatistics)
ttestStatistics=visstat(mtcars,"mpg","am")
library(visStatistics)
ttestStatistics=visstat(mtcars,"mpg","am")
library(visStatistics)
ttestStatistics=visstat(mtcars,"mpg","am")
library(visStatistics)
test=aov(InsectSprays_tr$count~ InsectSprays_tr$spray)
visstat(InsectSprays_tr, "count", "spray")
library(visStatistics)
visstat(InsectSprays_tr, "count", "spray")
visstat(iris,"Petal.Width", "Species")
visstat(InsectSprays, "count", "spray")
ttestStatistics=visstat(mtcars,"mpg","am")
neway_npk=visstat(npk,"yield","block")
oneway_npk=visstat(npk,"yield","block")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
library(visStatistics)
oneway_npk=visstat(npk,"yield","block")
library(visStatistics)
oneway_npk=visstat(npk,"yield","block")
signif((1-alpha_sidak)*100,2)
signif((1-a0.003)*100,2)
signif((1-0.003)*100,2)
alpha=0.05
round((1-0.003)*100,2)
library(visStatistics)
oneway_npk=visstat(npk,"yield","block")
visstat(iris,"Petal.Width", "Species")
test=aov(InsectSprays_tr$count~ InsectSprays_tr$spray)
visstat(InsectSprays_tr, "count", "spray")
library(visStatistics)
visstat(InsectSprays_tr, "count", "spray")
?legend
library(visStatistics)
visstat(InsectSprays_tr, "count", "spray")
library(visStatistics)
visstat(InsectSprays_tr, "count", "spray")
