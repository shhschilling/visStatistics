vis_anova_assumptions(ToothGrowth$len, ToothGrowth$dose)
vis_anova(ToothGrowth$len, ToothGrowth$dose)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R')
vis_anova(ToothGrowth$len, ToothGrowth$dose)
library(visStatistics)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat.R')
unloadNamespace("visStatistics")
library(visStatistics)
visstat(trees,"Girth","Height") #without saving of plot
unloadNamespace("visStatistics")
library(visStatistics)
visstat(trees,"Girth","Height") #without saving of plot
visstat(trees,"Girth","Height",graphicsoutput = "png")
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am")
visstat(mtcars,"mpg","am",graphicsoutput = "png") #not producing png
visstat(InsectSprays,"count","spray") #not showing output on screen
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
visstat(InsectSpraysAB,"count","spray")
visstat(InsectSpraysAB,"count","spray",graphicsoutput = "png") #not functioning
small=rnorm(100);
big=rnorm(100)*2
test_t_test=data.frame(small,big)
rm(InsectSpraysAB)
visstat(test_t_test,"small","big")
visstat(InsectSprays,"count","spray")
InsectSprays
graphicsooutput="png"
openGraphCairo(type = graphicsoutput)
graphicsoutput="png"
openGraphCairo(type = graphicsoutput)
vis_sample_fact = vis_anova(InsectSprays$count,
InsectSprays$spray,
samplename = "spray",
factorname = "factor")
source(test_and_visuals.R)
pwd
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R')
graphicsoutput="png"
openGraphCairo(type = graphicsoutput)
vis_sample_fact = vis_anova(InsectSprays$count,
InsectSprays$spray,
samplename = "spray",
factorname = "factor")
saveGraphVisstat(paste("anova."),
type = graphicsoutput)
openGraphCairo(type = graphicsoutput)
vis_sample_fact = vis_anova(InsectSprays$count,
InsectSprays$spray,
samplename = "spray",
factorname = "factor")
vis_sample_fact = vis_anova(InsectSprays$count,
InsectSprays$spray,
samplename = "spray",
factorname = "factor")
visstat(ChickWeight,"weight", "Diet")
visstat(ChickWeight,"weight", "Diet",graphicsoutput = "png")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R')
openGraphCairo(type="png",mag =2.54) #mag is conversion factor cm to inch
plot(rnorm(4000),rnorm(4000),col ="#ff000018",pch=19,cex=2) # semi-transparent red
saveGraphVisstat(file="random",type ="png")
pngplots=dir(getwd(),pattern=".png")
file.remove(pngplots)
visstat(ChickWeight,"weight", "Diet")
visstat(ChickWeight,"weight", "Diet",graphicsoutput = "png")
visstat(ToothGrowth,"len", "supp")
visstat(ToothGrowth,"len", "supp",graphicsoutput = "png")
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
visstat(titanic_train,"Survived","Pclass")
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
rm(HairEyeColorMale)
vector1=rnorm(100)
vector2=rnorm(100)*2
longvector=c(vector1,vector2)
matrix(longvector,nrow=100,ncol=2)
pngplots=dir(getwd(),pattern=".png")
file.remove(pngplots)
graphicsoutput="png"
openGraphCairo(type = graphicsoutput)
vis_sample_fact = vis_anova(InsectSprays$count,
InsectSprays$spray,
samplename = "spray",
factorname = "factor")
library(visStatistics)
if (!interactive()) file.remove("random.png")
library(visStatistics)
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am")
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am")
visstat(mtcars,"mpg","am",graphicsoutput = "png") #not producing png
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R')
visstat(mtcars,"mpg","am",graphicsoutput = "png") #not producing png
visstat(mtcars,"mpg","am")
visstat(mtcars,"mpg","am",graphicsoutput = "png") #not producing png
visstat(InsectSprays,"count","spray") #not showing output on screen
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
visstat(InsectSpraysAB,"count","spray")
visstat(InsectSpraysAB,"count","spray",graphicsoutput = "png") #not functioning
visstat(ChickWeight,"weight", "Diet")
visstat(ChickWeight,"weight", "Diet",graphicsoutput = "png")
visstat(ChickWeight,"weight", "Diet")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R')
library(multcompView)
visstat(ChickWeight,"weight", "Diet")
visstat(ChickWeight,"weight", "Diet",graphicsoutput = "png")
rm(list = setdiff(ls(), lsf.str()))
rm(list = ls(all.names = TRUE))
rm(list = ls())
unloadNamespace("visStatistics")
library(visStatistics)
visstat(InsectSprays,"count","spray")
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
visstat(InsectSpraysAB,"count","spray")
visstat(InsectSprays,"count","spray")
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
visstat(InsectSpraysAB,"count","spray")
visstat(InsectSpraysAB,"count","spray",graphicsoutput = "png")
visstat(InsectSpraysAB,"count","spray")
visstat(InsectSpraysAB,"count","spray",graphicsoutput = "png")
visstat(InsectSprays,"count","spray")
visstat(InsectSprays,"count","spray",graphicsoutput = "png")
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am")
visstat(mtcars,"mpg","am",graphicsoutput = "png")
visstat(InsectSprays,"count","spray")
visstat(InsectSprays,"count","spray",graphicsoutput = "png")
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
visstat(InsectSpraysAB,"count","spray")
visstat(InsectSpraysAB,"count","spray",graphicsoutput = "png")
visstat(InsectSprays,"count","spray")
visstat(iris,"Petal.Width", "Species")
visstat(iris,"Petal.Width", "Species",graphicsoutput = "png")
visstat(ChickWeight,"weight", "Diet")
visstat(ChickWeight,"weight", "Diet",graphicsoutput = "png")
visstat(ToothGrowth,"len", "supp")
visstat(ToothGrowth,"len", "supp",graphicsoutput = "png")
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
visstat(titanic_train,"Survived","Pclass")
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
rm(HairEyeColorMale)
visstat(HairEyeColorMale,"Hair","Eye")
visstat(HairEyeColorMale,"Hair","Eye",,graphicsoutput = "png")
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
visstat(HairEyeColorMale,"Hair","Eye",,graphicsoutput = "png")
mosaicoutput=visstat(HairEyeColorMale,"Hair","Eye")
load(vcd)
library(vcd)
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
mosaicoutput=visstat(HairEyeColorMale,"Hair","Eye")
mosaicoutput
visstat(HairEyeColorMale,"Hair","Eye",,graphicsoutput = "png")
visstat(HairEyeColorMale,"Hair","Eye")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R')
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat.R')
pngplots=dir(getwd(),pattern=".png")
file.remove(pngplots)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat.R')
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R')
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat.R')
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am")
visstat(InsectSprays,"count","spray")
visstat(InsectSpraysAB,"count","spray")
openGraphCairo()
visstat(InsectSprays,"count","spray")
visstat(InsectSpraysAB,"count","spray")
visstat(InsectSprays,"count","spray")
visstat(InsectSpraysAB,"count","spray")
visstat(InsectSprays,"count","spray")
visstat(InsectSpraysAB,"count","spray")
visstat(InsectSprays,"count","spray")
visstat(InsectSpraysAB,"count","spray")
visstat(InsectSprays,"count","spray",graphicsoutput = "png")
visstat(InsectSpraysAB,"count","spray")
visstat(InsectSpraysAB,"count","spray",graphicsoutput = "png")
visstat(InsectSprays,"count","spray")
visstat(iris,"Petal.Width", "Species")
visstat(iris,"Petal.Width", "Species",graphicsoutput = "png")
visstat(ChickWeight,"weight", "Diet")
visstat(ChickWeight,"weight", "Diet",graphicsoutput = "png")
visstat(ToothGrowth,"len", "supp")
visstat(ToothGrowth,"len", "supp",graphicsoutput = "png")
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
visstat(titanic_train,"Survived","Pclass")
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R')
visstat(InsectSpraysAB,"count","spray")
visstat(InsectSprays,"count","spray")
visstat(InsectSprays,"count","spray",graphicsoutput = "png")
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
visstat(InsectSpraysAB,"count","spray")
visstat(InsectSpraysAB,"count","spray",graphicsoutput = "png")
reset_par()
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/reset_par.R')
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am")
visstat(mtcars,"mpg","am",graphicsoutput = "png")
visstat(InsectSprays,"count","spray")
visstat(InsectSprays,"count","spray",graphicsoutput = "png")
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
visstat(InsectSpraysAB,"count","spray",graphicsoutput = "png")
visstat(InsectSprays,"count","spray")
visstat(iris,"Petal.Width", "Species")
visstat(iris,"Petal.Width", "Species",graphicsoutput = "png")
visstat(ChickWeight,"weight", "Diet")
visstat(ChickWeight,"weight", "Diet",graphicsoutput = "png")
visstat(ToothGrowth,"len", "supp")
visstat(ToothGrowth,"len", "supp",graphicsoutput = "png")
library(titanic)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R')
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat.R')
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat_graphcsoutput.R')
pngplots=dir(getwd(),pattern=".png")
file.remove(pngplots)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat_graphcsoutput.R')
visstat(mtcars,"mpg","am")
visstat(mtcars,"mpg","am",graphicsoutput = "png")
reset_par()# resets graphical values to defaulg graphical parameter values
visstat(mtcars,"mpg","am",graphicsoutput = "png")
dput(par(no.readonly=TRUE))
dev.off()
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/reset_par.R')
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R')
visstat(mtcars,"mpg","am",graphicsoutput = "png")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R')
visstat(mtcars,"mpg","am",graphicsoutput = "png")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/reset_par.R')
reset_par()
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R')
visstat(mtcars,"mpg","am",graphicsoutput = "png")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat_graphcsoutput.R')
visstat(mtcars,"mpg","am",graphicsoutput = "png")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R')
visstat(mtcars,"mpg","am",graphicsoutput = "png")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R')
oldpar <-reset_par()
oldpar()
oldpar
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat_graphcsoutput.R')
warnings()
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am",graphicsoutput = "png")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat_graphcsoutput.R')
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_openGraphCairo.R')
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat.R')
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat.R', echo=TRUE)
visstat(mtcars,"mpg","am")
visstat(InsectSprays,"count","spray")
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
visstat(InsectSpraysAB,"count","spray")
visstat(InsectSprays,"count","spray")
visstat(iris,"Petal.Width", "Species")
visstat(ChickWeight,"weight", "Diet")
visstat(ToothGrowth,"len", "supp")
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
visstat(titanic_train,"Survived","Pclass")
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
visstat(HairEyeColorMale,"Hair","Eye",,graphicsoutput = "png")
visstat(HairEyeColorMale,"Hair","Eye")
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat.R', echo=TRUE)
visstat(trees,"Girth","Height",graphicsoutput = "png") #checked
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am",graphicsoutput = "png")
par()
par("new")
par=reset_par()
par("new")
dev.off()
par()
par("new")
dput(par(no.readonly=TRUE
)
dput(par(no.readonly=TRUE))
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/reset_par.R', echo=TRUE)
reset_par()
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/reset_par.R', echo=TRUE)
reset_par()
dput(par(no.readonly = TRUE)
)
par("new")
dev.off()
par("new")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/reset_par.R', echo=TRUE)
reset_par()
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/reset_par.R', echo=TRUE)
oldpar <-reset_par()
dev.off()
oldpar <-par(no.readonly = TRUE)
on.exit(par(oldpar))
par("new")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat_graphcsoutput.R', echo=TRUE)
warnings()
visstat(trees,"Girth","Height",graphicsoutput = "png") #checked
odpar
par(oldpar)
par("new")
oldpar("new")
dev.off()
oldpar <-par(no.readonly = TRUE) #default graphical parameter values
oldpar
oldpar("new")
oldpar
oldpar("New")
reset_par <- function(){
op <- structure(dput(par(no.readonly = TRUE))
)
return(par(op))
}
reset_par <- function(){
op <- structure(dput(par(no.readonly = TRUE))
)
return(par(op))
}
oldpar <-par(no.readonly = TRUE)
oldpar("new")
hund=on.exit(par(oldpar))
hund=par(oldpar)
hund("new")
oldpar =par(no.readonly = TRUE)
oldpar
par(oldpar)
dev.off()
oldpar =par(no.readonly = TRUE)
par()
par("new")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
oldpar =par(no.readonly = TRUE)
hund=par(oldpar)
hund
hund("new")
par(oldpar)
par("new")
dev.off()
oldpar =par(no.readonly = TRUE) #default graphical parameter values
on.exit(par(oldpar))
par(oldpar)
par("new")
dev.off()
par("new")
par(no.readonly = TRUE)
par(oldpar)
par("new")
dev.off()
oldpar =par(no.readonly = TRUE)
dput(par(no.readonly = TRUE)
)
dput(par(no.readonly = TRUE)
)
reset_par()
par("new")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/reset_par.R', echo=TRUE)
reset_par()
par(op)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/reset_par.R', echo=TRUE)
reset_par
oldpar =reset_par()#default graphical parameter values
oldpar
oldpar("new")
par(oldpar)
par("new")
par("mkh")
par("new")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/reset_par.R', echo=TRUE)
reset_par()
hund=rese_par()
hund=reset_par()
hund
hund("new")
hund$new
par(oldpar)
par("new")
oldpar =reset_par()#default list of graphical parameter values
par()
oldpar =par(reset_par())
oldpar("new")
oldpar =par(reset_par())
oldpar("new")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/reset_par.R', echo=TRUE)
reset_par()
test=reset_par()
test
test("new")
reset_par()
test=reset_par()
test
par(test)
oldpar=par()
test=par(no.readonly = TRUE)
test=reset_par()
on.exit(test)
par()
library(visStatistics)
detach_package(visStatistics)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/detach_package.R', echo=TRUE)
detach_package(visStatistics)
library(visStatistics)
detach_package(visStatistics)
openGraphCairo()
plot(rnorm(4000),rnorm(4000),col ="#ff000018",pch=19,cex=2) # semi-transparent red
saveGraphVisstat()
openGraphCairo(type="png",mag =2.54) #mag is conversion factor cm to inch
plot(rnorm(4000),rnorm(4000),col ="#ff000018",pch=19,cex=2) # semi-transparent red
saveGraphVisstat(file="random",type ="png")
pngplots=dir(getwd(),pattern=".png")
library(visStatistics)
detach_package("visStatistics")
library(visStatistics)
openGraphCairo()
plot(rnorm(4000),rnorm(4000),col ="#ff000018",pch=19,cex=2) # semi-transparent red
saveGraphVisstat()
openGraphCairo(type="png",mag =2.54) #mag is conversion factor cm to inch
plot(rnorm(4000),rnorm(4000),col ="#ff000018",pch=19,cex=2) # semi-transparent red
saveGraphVisstat(file="random",type ="png")
pngplots=dir(getwd(),pattern=".png")
file.remove(pngplots)
dev.off()
oldpar =par(no.readonly = TRUE)
oldpar
par("new")
par(oldpar)
par("new")
dev.off()
par("new")
on.exit(par(oldpar))
par("new")
on.exit(reset_par())
par("new")
typeof(reset_par())
old_parameter=reset_par()
par("new")
on.exit(old_parameter)
par("new")
old_parameter=reset_par()
on.exit(old_parameter)
par("new")
old_parameter_list=reset_par()
on.exit(old_parameter_list)
old_parameter_list=reset_par()
on.exit(old_parameter_list)
par("new")
old_parameter_list=reset_par()
on.exit(old_parameter_list)
par("new")
dev.off()
par("new")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat_graphcsoutput.R', echo=TRUE)
visstat(trees,"Girth","Height",graphicsoutput = "png") #checked
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am",graphicsoutput = "png")
visstat(InsectSprays,"count","spray")
library(vcd)
visstat(InsectSprays,"count","spray",graphicsoutput = "png")
#example Welch two sample t.test
visstat(InsectSprays,"count","spray",graphicsoutput = "png")
library(visStatistics)
visstat(InsectSprays,"count","spray",graphicsoutput = "png")
visstat(trees,"Girth","Height",graphicsoutput = "png") #checked
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am",graphicsoutput = "png")
visstat(InsectSprays,"count","spray",graphicsoutput = "png")
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
visstat(InsectSpraysAB,"count","spray",graphicsoutput = "png")
visstat(InsectSprays,"count","spray",graphicsoutput = "png")
visstat(iris,"Petal.Width", "Species",graphicsoutput = "png")
visstat(ChickWeight,"weight", "Diet",graphicsoutput = "png")
visstat(ToothGrowth,"len", "supp",graphicsoutput = "png")
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
visstat(titanic_train,"Survived","Pclass")
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
visstat(HairEyeColorMale,"Hair","Eye",,graphicsoutput = "png")
rm(HairEyeColorMale)
librar(vcd)
library(vcd)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat_graphcsoutput.R', echo=TRUE)
