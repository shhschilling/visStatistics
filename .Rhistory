oldpar()
oldpar
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat_graphcsoutput.R')
warnings()
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am",graphicsoutput = "png")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat_graphcsoutput.R')
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_openGraphCairo.R')
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat.R')
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat.R', echo=TRUE)
visstat(mtcars,"mpg","am")
visstat(InsectSprays,"count","spray")
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
visstat(InsectSpraysAB,"count","spray")
visstat(InsectSprays,"count","spray")
visstat(iris,"Petal.Width", "Species")
visstat(ChickWeight,"weight", "Diet")
visstat(ToothGrowth,"len", "supp")
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
visstat(titanic_train,"Survived","Pclass")
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
visstat(HairEyeColorMale,"Hair","Eye",,graphicsoutput = "png")
visstat(HairEyeColorMale,"Hair","Eye")
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat.R', echo=TRUE)
visstat(trees,"Girth","Height",graphicsoutput = "png") #checked
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am",graphicsoutput = "png")
par()
par("new")
par=reset_par()
par("new")
dev.off()
par()
par("new")
dput(par(no.readonly=TRUE
)
dput(par(no.readonly=TRUE))
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/reset_par.R', echo=TRUE)
reset_par()
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/reset_par.R', echo=TRUE)
reset_par()
dput(par(no.readonly = TRUE)
)
par("new")
dev.off()
par("new")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/reset_par.R', echo=TRUE)
reset_par()
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/reset_par.R', echo=TRUE)
oldpar <-reset_par()
dev.off()
oldpar <-par(no.readonly = TRUE)
on.exit(par(oldpar))
par("new")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat_graphcsoutput.R', echo=TRUE)
warnings()
visstat(trees,"Girth","Height",graphicsoutput = "png") #checked
odpar
par(oldpar)
par("new")
oldpar("new")
dev.off()
oldpar <-par(no.readonly = TRUE) #default graphical parameter values
oldpar
oldpar("new")
oldpar
oldpar("New")
reset_par <- function(){
op <- structure(dput(par(no.readonly = TRUE))
)
return(par(op))
}
reset_par <- function(){
op <- structure(dput(par(no.readonly = TRUE))
)
return(par(op))
}
oldpar <-par(no.readonly = TRUE)
oldpar("new")
hund=on.exit(par(oldpar))
hund=par(oldpar)
hund("new")
oldpar =par(no.readonly = TRUE)
oldpar
par(oldpar)
dev.off()
oldpar =par(no.readonly = TRUE)
par()
par("new")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
oldpar =par(no.readonly = TRUE)
hund=par(oldpar)
hund
hund("new")
par(oldpar)
par("new")
dev.off()
oldpar =par(no.readonly = TRUE) #default graphical parameter values
on.exit(par(oldpar))
par(oldpar)
par("new")
dev.off()
par("new")
par(no.readonly = TRUE)
par(oldpar)
par("new")
dev.off()
oldpar =par(no.readonly = TRUE)
dput(par(no.readonly = TRUE)
)
dput(par(no.readonly = TRUE)
)
reset_par()
par("new")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/reset_par.R', echo=TRUE)
reset_par()
par(op)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/reset_par.R', echo=TRUE)
reset_par
oldpar =reset_par()#default graphical parameter values
oldpar
oldpar("new")
par(oldpar)
par("new")
par("mkh")
par("new")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/reset_par.R', echo=TRUE)
reset_par()
hund=rese_par()
hund=reset_par()
hund
hund("new")
hund$new
par(oldpar)
par("new")
oldpar =reset_par()#default list of graphical parameter values
par()
oldpar =par(reset_par())
oldpar("new")
oldpar =par(reset_par())
oldpar("new")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/reset_par.R', echo=TRUE)
reset_par()
test=reset_par()
test
test("new")
reset_par()
test=reset_par()
test
par(test)
oldpar=par()
test=par(no.readonly = TRUE)
test=reset_par()
on.exit(test)
par()
library(visStatistics)
detach_package(visStatistics)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/detach_package.R', echo=TRUE)
detach_package(visStatistics)
library(visStatistics)
detach_package(visStatistics)
openGraphCairo()
plot(rnorm(4000),rnorm(4000),col ="#ff000018",pch=19,cex=2) # semi-transparent red
saveGraphVisstat()
openGraphCairo(type="png",mag =2.54) #mag is conversion factor cm to inch
plot(rnorm(4000),rnorm(4000),col ="#ff000018",pch=19,cex=2) # semi-transparent red
saveGraphVisstat(file="random",type ="png")
pngplots=dir(getwd(),pattern=".png")
library(visStatistics)
detach_package("visStatistics")
library(visStatistics)
openGraphCairo()
plot(rnorm(4000),rnorm(4000),col ="#ff000018",pch=19,cex=2) # semi-transparent red
saveGraphVisstat()
openGraphCairo(type="png",mag =2.54) #mag is conversion factor cm to inch
plot(rnorm(4000),rnorm(4000),col ="#ff000018",pch=19,cex=2) # semi-transparent red
saveGraphVisstat(file="random",type ="png")
pngplots=dir(getwd(),pattern=".png")
file.remove(pngplots)
dev.off()
oldpar =par(no.readonly = TRUE)
oldpar
par("new")
par(oldpar)
par("new")
dev.off()
par("new")
on.exit(par(oldpar))
par("new")
on.exit(reset_par())
par("new")
typeof(reset_par())
old_parameter=reset_par()
par("new")
on.exit(old_parameter)
par("new")
old_parameter=reset_par()
on.exit(old_parameter)
par("new")
old_parameter_list=reset_par()
on.exit(old_parameter_list)
old_parameter_list=reset_par()
on.exit(old_parameter_list)
par("new")
old_parameter_list=reset_par()
on.exit(old_parameter_list)
par("new")
dev.off()
par("new")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat_graphcsoutput.R', echo=TRUE)
visstat(trees,"Girth","Height",graphicsoutput = "png") #checked
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am",graphicsoutput = "png")
visstat(InsectSprays,"count","spray")
library(vcd)
visstat(InsectSprays,"count","spray",graphicsoutput = "png")
#example Welch two sample t.test
visstat(InsectSprays,"count","spray",graphicsoutput = "png")
library(visStatistics)
visstat(InsectSprays,"count","spray",graphicsoutput = "png")
visstat(trees,"Girth","Height",graphicsoutput = "png") #checked
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am",graphicsoutput = "png")
visstat(InsectSprays,"count","spray",graphicsoutput = "png")
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
visstat(InsectSpraysAB,"count","spray",graphicsoutput = "png")
visstat(InsectSprays,"count","spray",graphicsoutput = "png")
visstat(iris,"Petal.Width", "Species",graphicsoutput = "png")
visstat(ChickWeight,"weight", "Diet",graphicsoutput = "png")
visstat(ToothGrowth,"len", "supp",graphicsoutput = "png")
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
visstat(titanic_train,"Survived","Pclass")
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
visstat(HairEyeColorMale,"Hair","Eye",,graphicsoutput = "png")
rm(HairEyeColorMale)
librar(vcd)
library(vcd)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat_graphcsoutput.R', echo=TRUE)
visstat(trees,"Girth","Height") #without saving of plot
library(visStatistics)
visstat(trees,"Girth","Height") #without saving of plot
visstat(trees,"Girth","Height",graphicsoutput = "png") #checked
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am")
test_norm(trees$Girth)
visstat(InsectSprays,"count","spray")
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
visstat(InsectSpraysAB,"count","spray")
visstat(InsectSprays,"count","spray")
visstat(ChickWeight,"weight", "Diet")
visstat(ToothGrowth,"len", "supp")
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
visstat(titanic_train,"Survived","Pclass")
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
rm(HairEyeColorMale)
visstat(HairEyeColorMale,"Hair","Eye")
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
?mosaic
visstat(HairEyeColorMale,"Hair","Eye")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/detach_package.R', echo=TRUE)
detach_package(visstat)
library(visStatistics)
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
visstat(titanic_train,"Survived","Pclass")
library(vcd)
visstat(titanic_train,"Survived","Pclass")
library(visStatistics)
pngplots=dir(getwd(),pattern=".png")
file.remove(pngplots)
visstat(InsectSprays,"count","spray",graphicsoutput="png")
detach_package(visstat)
library(visStatistics)
visstat(InsectSprays,"count","spray",graphicsoutput="png")
?multcompLetters
import(multcompView)
library(multcompView)
visstat(InsectSprays,"count","spray",graphicsoutput="png")
file.remove("anova_count_spray.png")
library(visStatistics)
visstat(trees,"Girth","Height")
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am")
visstat(iris,"Petal.Width", "Species")
visstat(InsectSprays,"count","spray",graphicsoutput="png")
visstat(InsectSprays,"count","spray")
visstat(ToothGrowth,"len", "supp")
mtcars$am=as.factor(mtcars$am)
visstat(mtcars,"mpg","am")
visstat(counts_to_cases(as.data.frame(HairEyeColor[,,1])),"Hair","Eye")
?chisq.test
?fisher_chi
??fisher_chi
visstat(HairEyeColorMale,"Hair","Eye")
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
visstat(titanic_train,"Survived","Pclass")
library(visStatistics)
file.remove("anova_count_spray.png")
library(visStatistics)
visstat(ChickWeight,"weight", "Diet")
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
#Pearsons Chi squared, mosaic plot with Pearson's residuals
visstat(titanic_train,"Survived","Pclass")
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
HairEyeColorMale
HairEyeColor[,,1]]
HairEyeColor[,,1]
HairEyeColorMaleFisher=HairEyeColor[,,1]
whicis(HairEyeColor)
whichis(HairEyeColor)
type(HairEyeColor)
typeof(HairEyeColorMale)
HairEyeColorMale
HairEyeColorMaleFisher
typeof(HairEyeColorMaleFisher)
b=HairEyeColorMaleFisher
typeof(b)
b
i = findInterval(3, b)
sort(b)
i = findInterval(3, sort(b)
)
i
i = findInterval(3, sort(b))
i = findInterval(8, sort(b))
i
i = findInterval(10, sort(b))
i
vapply(v, function(x, b) min(b[b>=x]), numeric(1), b)
?vapply
vapply(b, function(x) x<5, x=1, b)
b[ b<10 ] <- 3
b
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10]=3
visstat(HairEyeColorMaleFisher,"Hair","Eye")
HairEyeColorMaleFisher
HairEyeColorMaleFisher=HairEyeColor[,,1]
#replace cells to smaller values to enforce Cochran's rule
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10]=2
visstat(HairEyeColorMaleFisher,"Hair","Eye")
HairEyeColorMaleFisher=HairEyeColor[,,1]
#replace cells to smaller values to enforce Cochran's rule
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10]=2
visstat(HairEyeColorMaleFisher,"Hair","Eye")
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher);
visstat(HairEyeColorMaleFisher,"Hair","Eye")
pngplots=dir(getwd(),pattern=".png")
file.remove(pngplots)
HairEyeColorMaleFisher=HairEyeColor[,,1]
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10]=2
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher));
visstat(HairEyeColorMaleFisher,"Hair","Eye")
library(visStatistics)
HairEyeColorMale
remove(HairEyeColorMaleFisher)
visstat(HairEyeColorMaleFisher,"Hair","Eye")
HairEyeColorMaleFisher=HairEyeColor[,,1]
#replace cells to smaller values to enforce Cochran's rule
HairEyeColorMaleFisher[HairEyeColorMaleFisher<6]=4
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher));
visstat(HairEyeColorMaleFisher,"Hair","Eye")
HairEyeColorMaleFisher=HairEyeColor[,,1]
#replace cells to smaller values to enforce Cochran's rule
HairEyeColorMaleFisher[HairEyeColorMaleFisher<6]=4
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher));
visstat(HairEyeColorMaleFisher,"Hair","Eye")
HairEyeColorMaleFisher=HairEyeColor[,,1]
#replace cells to smaller values to enforce Cochran's rule
HairEyeColorMaleFisher[HairEyeColorMaleFisher<5]=2
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher));
visstat(HairEyeColorMaleFisher,"Hair","Eye")
HairEyeColorMaleFisher=HairEyeColor[,,1]
#replace cells to smaller values to enforce Cochran's rule
HairEyeColorMaleFisher[HairEyeColorMaleFisher<5]=2
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher));
visstat(HairEyeColorMaleFisher,"Hair","Eye")
HairEyeColorMaleFisher=HairEyeColor[,,1]
HairEyeColorMaleFisher[HairEyeColorMaleFisher<5]=2
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher));
visstat(HairEyeColorMaleFisher,"Hair","Eye")
HairEyeColorMaleFisher=HairEyeColor[,,1]
HairEyeColorMaleFisher[HairEyeColorMaleFisher<5]=2
HairEyeColorMaleFisher
HairEyeColor[,,1]
HairEyeColorMaleFisher<5
HairEyeColorMaleFisher=HairEyeColor[,,1]
HairEyeColorMaleFisher<5]
HairEyeColorMaleFisher<5
HairEyeColorMaleFisher[HairEyeColorMaleFisher<5]=2
HairEyeColorMaleFisher<5
HairEyeColorMaleFisher=HairEyeColor[,,1]
#replace cells to smaller values to enforce Cochran's rule
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10]=2
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher));
visstat(HairEyeColorMaleFisher,"Hair","Eye")
HairEyeColorMaleFisher=HairEyeColor[,,1]
#replace cells to smaller values to enforce Cochran's rule
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10]=4
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher));
visstat(HairEyeColorMaleFisher,"Hair","Eye")
HairEyeColorMaleFisher=HairEyeColor[,,1]
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10]=4
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher))
visstat(HairEyeColorMaleFisher,"Hair","Eye")
visstat(trees,"Girth","Height")
library(visStatistics)
visstat(InsectSprays,"count","spray")
library(visStatistics)
detach_package("visStatistics")
library(visStatistics)
visstat(InsectSprays,"count","spray")
library(multcompView)
visstat(InsectSprays,"count","spray")
library(visStatistics)
library visstat
library(visStatistics)
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
#Pearsons Chi squared, mosaic plot with Pearson's residuals
visstat(titanic_train,"Survived","Pclass")
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye") #can not find mosaic function
HairEyeColorMaleFisher=HairEyeColor[,,1]
#replace cells to smaller values to enforce Cochran's rule
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10]=4
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher));
visstat(HairEyeColorMaleFisher,"Hair","Eye")
HairEyeColorMaleFisher=HairEyeColor[,,1]
#replace cells to smaller values to enforce Cochran's rule
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10]=4
HairEyeColorMaleFisher
HairEyeColorMaleFisher=HairEyeColor[,,1]
HairEyeColorMaleFisher
a=HairEyeColorMaleFisher
a[1,..]
a[1,]
a[1:2,]
a[1:2,3:4]
blackBrownHazelGreen=HairEyeColorMaleFisher[1:2,3:4]
visstat(HairEyeColorMaleFisher,"Hair","Eye")
visstat(blackBrownHazelGreen,"Hair","Eye")
HairEyeColorMaleFisher=HairEyeColor[,,1]
#slicing out a 2 x2 contingency table
blackBrownHazelGreen=HairEyeColorMaleFisher[1:2,3:4]
blackBrownHazelGreen= counts_to_cases(as.data.frame(blackBrownHazelGreen));
visstat(blackBrownHazelGreen,"Hair","Eye")
library(vcd)
HairEyeColorMaleFisher=HairEyeColor[,,1]
#slicing out a 2 x2 contingency table
blackBrownHazelGreen=HairEyeColorMaleFisher[1:2,3:4]
blackBrownHazelGreen= counts_to_cases(as.data.frame(blackBrownHazelGreen));
visstat(blackBrownHazelGreen,"Hair","Eye")
?fisher.test
blackBrownHazelGreen=HairEyeColorMaleFisher[1:2,3:4]
fisher.test(lackBrownHazelGreen)
fisher.test(blackBrownHazelGreen)
fisher.test(blackBrownHazelGreenn,hybrid=TRUE)
fisher.test(blackBrownHazelGreen,hybrid=TRUE)
blackBrownHazelGreen= counts_to_cases(as.data.frame(blackBrownHazelGreen));
visstat(blackBrownHazelGreen,"Hair","Eye")
blackBrownHazelGreen= counts_to_cases(as.data.frame(blackBrownHazelGreen));
visstat(blackBrownHazelGreen,"Hair","Eye")
HairEyeColorMaleFisher=HairEyeColor[,,1]
fisher.test(HairEyeColorMaleFisher,hybrid=TRUE)
fisher.test(HairEyeColorMaleFisher)
HairEyeColorMaleFisher=HairEyeColor[,,1]
#slicing out a 2 x2 contingency table
blackBrownHazelGreen=HairEyeColorMaleFisher[1:2,3:4]
blackBrownHazelGreen= counts_to_cases(as.data.frame(blackBrownHazelGreen));
visstat(blackBrownHazelGreen,"Hair","Eye")
HairEyeColorMaleFisher=HairEyeColor[,,1]
#slicing out a 2 x2 contingency table
blackBrownHazelGreen=HairEyeColorMaleFisher[1:2,3:4]
fishertest=blackBrownHazelGreen
blackBrownHazelGreen= counts_to_cases(as.data.frame(blackBrownHazelGreen));
visstat(blackBrownHazelGreen,"Hair","Eye")
fisher.test(fishertest)
?fisher.test
library(visStatistics)
usethis::use_citation()
library(usethis)
install.packages("usethis")
library(usethis)
usethis::use_citation()
