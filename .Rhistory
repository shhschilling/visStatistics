library(visStatistics)
library(multcompView)
visstat(InsectSprays,"count","spray")
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
visstat(InsectSpraysAB,"count","spray")
visstat(InsectSprays,"count","spray")
visstat(iris,"Petal.Width", "Species")
visstat(ChickWeight,"weight", "Diet")
visstat(ToothGrowth,"len", "supp")
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
visstat(titanic_train,"Survived","Pclass")
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye") #can not find mosaic function
HairEyeColorMaleFisher=HairEyeColor[,,1]
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10]=4
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher));
visstat(HairEyeColorMaleFisher,"Hair","Eye")
HairEyeColorMaleFisher=HairEyeColor[,,1]
blackBrownHazelGreen=HairEyeColorMaleFisher[1:2,3:4]
fishertest=blackBrownHazelGreen
blackBrownHazelGreen= counts_to_cases(as.data.frame(blackBrownHazelGreen));
visstat(blackBrownHazelGreen,"Hair","Eye")
fisher.test(fishertest)
pngplots=dir(getwd(),pattern=".png")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
library(visStatistics)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
HairEyeColorMaleFisher=HairEyeColor[,,1]
blackBrownHazelGreen=HairEyeColorMaleFisher[1:2,3:4]
fishertest=blackBrownHazelGreen
blackBrownHazelGreen= counts_to_cases(as.data.frame(blackBrownHazelGreen));
visstat(blackBrownHazelGreen,"Hair","Eye")
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
visstat(titanic_train,"Survived","Pclass")
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye") #can not find mosaic function
HairEyeColor[,,1]
visstat(HairEyeColorMale,"Hair","Eye") #can not find mosaic function
1/8
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10]=4
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher));
visstat(HairEyeColorMaleFisher,"Hair","Eye")
HairEyeColor[,,1])
HairEyeColor[,,1]
a=HairEyeColor[,,1]
fisher.test(a)
fisher.test(a,simulate.p.value = TRUE)
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye") #can not find mosaic function
HairEyeColorMaleFisher=HairEyeColor[,,1]
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10]=4
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher));
visstat(HairEyeColorMaleFisher,"Hair","Eye")
HairEyeColorMaleFisher=HairEyeColor[,,1]
blackBrownHazelGreen=HairEyeColorMaleFisher[1:2,3:4]
fishertest=blackBrownHazelGreen
blackBrownHazelGreen= counts_to_cases(as.data.frame(blackBrownHazelGreen));
visstat(blackBrownHazelGreen,"Hair","Eye")
fisher.test(fishertest)
HairEyeColorMaleFisher=HairEyeColor[,,1]
#slicing out a 2 x2 contingency table
blackBrownHazelGreen=HairEyeColorMaleFisher[1:2,3:4]
fishertest=blackBrownHazelGreen
blackBrownHazelGreen= counts_to_cases(as.data.frame(blackBrownHazelGreen));
visstat(blackBrownHazelGreen,"Hair","Eye")
pngplots=dir(getwd(),pattern=".png")
file.remove(pngplots)
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
HairEyeColorMaleFisher=HairEyeColor[,,1]
#replace cells to smaller values to enforce Cochran's rule
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10]=4
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher));
visstat(HairEyeColorMaleFisher,"Hair","Eye")
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
#Pearsons Chi squared, mosaic plot with Pearson's residuals
visstat(titanic_train,"Survived","Pclass")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
visstat(trees,"Girth","Height") #linear regression without saving of plot
install.packages("nortest")
library(nortest)
adtest(trees)
adtest(tres)
ad.test(trees)
?ad.test
visstat(trees,"Girth","Height") #linear regression without saving of plot
?ks.test
trees
visstat(InsectSprays,"count","spray")
InsectSprays
?shapiro.test
visstat(InsectSprays,"count","spray")
visstat(trees,"Girth","Height") #linear regression without saving of plot
visstat(InsectSprays,"count","spray")
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
visstat(InsectSpraysAB,"count","spray")
visstat(iris,"Petal.Width", "Species")
visstat(ChickWeight,"weight", "Diet")
visstat(ToothGrowth,"len", "supp")
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
visstat(titanic_train,"Survived","Pclass")
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
HairEyeColorMaleFisher=HairEyeColor[,,1]
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10]=4
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher));
visstat(HairEyeColorMaleFisher,"Hair","Eye")
HairEyeColorMaleFisher=HairEyeColor[,,1]
blackBrownHazelGreen=HairEyeColorMaleFisher[1:2,3:4]
fishertest=blackBrownHazelGreen
blackBrownHazelGreen= counts_to_cases(as.data.frame(blackBrownHazelGreen));
visstat(blackBrownHazelGreen,"Hair","Eye")
pngplots=dir(getwd(),pattern=".png")
file.remove(pngplots)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
library(visStatistics)
library("exams")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Unterricht/Fragensammlung_Statistik/Rexams-ABMUP41-FS20/main_qti.R', echo=TRUE)
setwd("~/Documents/workspace/OneDrive - Hochschule Luzern/Unterricht/Fragensammlung_Statistik/Rexams-ABMUP41-FS20")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Unterricht/Fragensammlung_Statistik/Rexams-ABMUP41-FS20/main_qti.R', echo=TRUE)
exams2html("/exercises/Startup")
exams2html("/exercises/Startup.Rnw")
exams2html("/exercises/Startup-t-test.Rnw")
exams2html("exercises/Startup-t-test.Rnw")
exams2pdf(exam, n = 1,
encoding = "UTF-8",
edir = "exercises",
dir = "output_pdf",name = "DeutschSeed5")
exam=c(Startup,KanisterDeutsch,Auto)
exams2pdf(exam, n = 1,
encoding = "UTF-8",
edir = "exercises",
dir = "output_pdf",name = "Aufgaben_Schilling_Deutsch_mit_LoesungSeed5")
exams2pdf(exam, n = 1,
encoding = "UTF-8",
edir = "exercises",
dir = "output_pdf",name = "Aufgaben_Schilling_Deutsch_mit_LoesungSeed5")
?cat
cat("a","b")
cat("a","",b")
)
""
cat("a","","b")
cat("a","","b",append=TRUE)
cat("a","b",append=TRUE)
cat("a","b",sep="_")
cat("Aufgaben_Schilling_Deutsch_mit_Loesung_seed",seednumber,sep="_")
?exams2nops
cat("Aufgaben_Schilling_Deutsch_mit_Loesung_seed",seednumber,sep="_")
exams2nops(exam, n = 1,
encoding = "UTF-8",
edir = "exercises",language="en",title="ABMUP41 FS 2020 Modulendpr\"ufung",
dir = "output_pdf", name = cat("Aufgaben_Schilling_Deutsch_mit_Loesung_seed",seednumber,sep="_"))
?exams2nops
?exams2pdf
exams2pdf(exam, n = 1,
encoding = "UTF-8",
edir = "exercises",
dir = "output_pdf",name = cat("Aufgaben_Schilling_Deutsch_mit_Loesung_Seed_",seednumber,sep="_"))
exams2nops(Startup, n = 1,
encoding = "UTF-8",
edir = "exercises",
dir = "output_pdf",name = cat("StartupOhneLoesung_",seednumber,sep="_"))
exams2pdf(Kanister, n = replicates,
encoding = "UTF-8",
edir = "exercises",
dir = "output_pdf",name = cat("Kanister",seednumber,sep="_"))
exams2pdf(Kanister, n = replicates,
encoding = "UTF-8",
edir = "exercises",
dir = "output_pdf",name = cat("Kanister",seednumber,sep="_"))
exams2pdf(Kanister, n = replicates,
encoding = "UTF-8",
edir = "exercises",
dir = "output_pdf",name = cat("Kanister",seednumber,sep="_"))
exams2pdf(Kanister, n = replicates,
encoding = "UTF-8",
edir = "exercises",
dir = "output_pdf",name = "Kanister")
exams2pdf(startup, n = 1,
encoding = "UTF-8",
edir = "exercises",
dir = "output_pdf",name = cat("Aufgaben_Schilling_Deutsch_mit_Loesung_Seed_",seednumber,sep="_"))
exams2pdf(Startup, n = 1,
encoding = "UTF-8",
edir = "exercises",
dir = "output_pdf",name = cat("Aufgaben_Schilling_Deutsch_mit_Loesung_Seed_",seednumber,sep="_"))
xams2pdf(exam, n = 1,
encoding = "UTF-8",
edir = "exercises",
dir = "output_pdf",name = "Aufgaben_Schilling_Deutsch_mit_Loesung_Seed_")
exams2pdf(exam, n = 1,
encoding = "UTF-8",
edir = "exercises",
dir = "output_pdf",name = "Aufgaben_Schilling_Deutsch_mit_Loesung_Seed_")
exams2pdf(KanisterEnglisch, n = replicates,
encoding = "UTF-8",
edir = "exercises",
dir = "output_pdf",name = "KanisterEnglisch_Seed_")
exam=c(Startup,Auto,Kanister)
exams2pdf(exam, n = 1,
encoding = "UTF-8",
edir = "exercises",
dir = "output_pdf",name = "Aufgaben_Schilling__mit_Loesung_Seed_")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Unterricht/Fragensammlung_Statistik/Rexams-ABMUP41-FS20/main_qti.R', echo=TRUE)
?exams2qti12
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Unterricht/Fragensammlung_Statistik/Rexams-ABMUP41-FS20/main_qti.R', echo=TRUE)
exams2qti12(Auto, n = replicates,
encoding = "UTF-8",
dir = "output_xml",
edir = "exercises",name ="Auto_",
zip = FALSE, maxattempts = 1,solutionswitch = FALSE)
replicates
exams2qti12(Auto, n = replicates,
encoding = "UTF-8",
dir = "output_xml",
edir = "exercises",name ="Auto_",
zip = FALSE, maxattempts = 1,solutionswitch = FALSE)
230*1.15
44.*1.2
Startup <- c("Startup-t-test.Rnw","Startup-Anteilstest.Rnw","Startup-Chi2.Rnw")
exams2ilias(Startup, n = 1,
encoding = "UTF-8",
dir = "output_xml",
edir = "exercises",name ="Startup",
zip = FALSE, maxattempts = 1,solutionswitch = FALSE)
library(exams)
exams2ilias(Startup, n = 1,
encoding = "UTF-8",
dir = "output_xml",
edir = "exercises",name ="Startup",
zip = FALSE, maxattempts = 1,solutionswitch = FALSE)
setwd("~/Documents/workspace/OneDrive - Hochschule Luzern/Unterricht/Fragensammlung_Statistik/Rexams-ABMUP41-FS20")
exams2ilias(Startup, n = 1,
encoding = "UTF-8",
dir = "output_xml",
edir = "exercises",name ="Startup",
zip = FALSE, maxattempts = 1,solutionswitch = FALSE)
set.seed(seednumber)
exams2ilias(Startup, n = 1,
encoding = "UTF-8",
dir = "output_xml",
edir = "exercises",name ="Startup",
zip = FALSE, maxattempts = 1,solutionswitch = FALSE)
}
set.seed(seednumber)
exams2ilias(Startup, n = 1,
encoding = "UTF-8",
dir = "output_xml",
edir = "exercises",name ="Startup",
zip = FALSE, maxattempts = 1,solutionswitch = FALSE)
exams2ilias(Startup, n = 1,
encoding = "UTF-8",
dir = "output_xml",
edir = "exercises",name ="Startup",
zip = FALSE)
Startup <- c("Startup-t-test.Rnw","Startup-Anteilstest.Rnw","Startup-Chi2.Rnw")
set.seed(seednumber)
exams2ilias(Startup, n = 1,
encoding = "UTF-8",
dir = "output_xml",
edir = "exercises",name ="Startup",
zip = FALSE)
Startup <- c("Startup-t-test.Rnw","Startup-Anteilstest.Rnw","Startup-Chi2.Rnw")
exams2ilias(Startup, n = 1,
encoding = "UTF-8",
dir = "output_xml",
edir = "exercises",name ="Startup",
zip = FALSE)
}
exams2ilias(Startup, n = 1,
encoding = "UTF-8",
dir = "output_xml",
edir = "exercises",name ="Startup",
zip = FALSE)
Startup
exams2ilias(StartupTtest, n = 1,
encoding = "UTF-8",
dir = "output_xml",
edir = "exercises",name ="StartupTtest",
zip = FALSE)
exams2qti12(Startup, n = 1,
encoding = "UTF-8",
dir = "output_xml",
edir = "exercises",name ="StartupTtest",
zip = FALSE)
exams2qti12(Startup, n = 1,
encoding = "UTF-8",
dir = "output_xml",
edir = "exercises",name ="StartupTtest",
zip = FALSE)
rm(list=ls(all=TRUE))
library("exams")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Unterricht/Fragensammlung_Statistik/Rexams-ABMUP41-FS20/main_qti.R', echo=TRUE)
exams2ilias(StartupTtest, n = 1,
encoding = "UTF-8",
dir = "output_xml",
edir = "exercises",name ="StartupT_Ilias",
zip = FALSE)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Unterricht/Fragensammlung_Statistik/Rexams-ABMUP41-FS20/main_qti.R', echo=TRUE)
pippo <- c("Startup-t-test.Rnw","Startup-Anteilstest.Rnw","Startup-Chi2.Rnw")
pippo
exams2ilias(pippo, n = 1,
encoding = "UTF-8",
dir = "output_xml",
edir = "exercises",name ="Startup_Ilias",
zip = FALSE)
exams2qti12(Startup, n = replicates,
encoding = "UTF-8",
dir = "output_xml",
edir = "exercises",name ="Startup_qti12",
zip = FALSE, maxattempts = 1)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Unterricht/Fragensammlung_Statistik/Rexams-ABMUP41-FS20/main_qti.R', echo=TRUE)
exams2ilias(pippo, n = 1,
encoding = "UTF-8",
dir = "output_xml",
edir = "exercises",name ="Startup_Ilias",
zip = FALSE)
exams2ilias(StartupTtest, n = 1,
encoding = "UTF-8",
dir = "output_xml",
edir = "exercises",name ="StartupTtest",
zip = FALSE)
library(visStatistics)
visstat(trees,"Girth","Height") #linear regression without saving of plot
visstat(trees,"Girth","Height",graphicsoutput = "png")
visstat(InsectSprays,"count","spray")
aov(trees$Girth,trees$Height)
aov(trees$Girth)
equire(graphics)
## Full mosaic
mosaicplot(HairEyeColor)
## Aggregate over sex (as in Snee's original data)
x <- apply(HairEyeColor, c(1, 2), sum)
x
mosaicplot(x, main = "Relation between hair and eye color")
equire(graphics)
## Full mosaic
mosaicplot(HairEyeColor)
## Aggregate over sex (as in Snee's original data)
x <- apply(HairEyeColor, c(1, 2), sum)
x
mosaicplot(x, main = "Relation between hair and eye color")
visstat(InsectSprays,"count","spray")
?TuckeyHSD
invisible(cat("Hi\n"))
?cat
visstat(iris,"Petal.Width", "Species")
visstat(iris,"Petal.Width", "Species"):
:
;
visstat(iris,"Petal.Width", "Species");
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R', echo=TRUE)
visstat(iris,"Petal.Width", "Species");
visstat(iris,"Petal.Width", "Species")
?str
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R', echo=TRUE)
visstat(iris,"Petal.Width", "Species")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R', echo=TRUE)
visstat(iris,"Petal.Width", "Species")
library(visStatistics)
visstat(trees,"Girth","Height") #linear regression without saving of plot
visstat(iris,"Petal.Width", "Species")
test=visstat(iris,"Petal.Width", "Species")
test
visstat(iris,"Petal.Width", "Species")
library(visStatistics)
visstat(iris,"Petal.Width", "Species")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R', echo=TRUE)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
visstat(iris,"Petal.Width", "Species")
library(visStatistics)
visstat(iris,"Petal.Width", "Species")
?invisible
a=rnorm(1:100)
a
b=rnorm(1:100)
b
t.test(a,b)
??t.test
t.test(a,b);
getAnywhere(t.ttest)
getAnywhere(t.test)
getAnywhere("t.test")
getMethod("t.test")
getMethod(t.test)
getAnywhere(t.test.stats)
getMethod(t.test.stats)
getMethods(t.test.stats)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/detach_package.R', echo=TRUE)
detach_package("visStatistics")
visstat(InsectSprays,"count","spray")
library(visStatistics)
detach_package("visStatistics")
library(visStatistics)
visstat(InsectSprays,"count","spray")
visstat(iris,"Petal.Width", "Species")
library(visStatistics)
visstat(iris,"Petal.Width", "Species")
library(visStatistics)
counts_to_cases(as.data.frame(HairEyeColor[,,1]))
as.data.frame(HairEyeColor[,,1])
counts_to_cases(as.data.frame(HairEyeColor[,,1]),countcol="Freq)
""
)
0
``
counts_to_cases(as.data.frame(HairEyeColor[,,1]),countcol="Freq")
counts_to_cases(as.data.frame(HairEyeColor[,,1]),"Freq")
as.data.frame(HairEyeColor[,,1])
counts_to_cases(as.data.frame(HairEyeColor[,,1]),"Eye")
HairEyeColor
a=as.data.frame(HairEyeColor[,,1])
whos a
which a
size(a)
size a
dim(a)
a
counts_to_cases(a_)
counts_to_cases(a)
b=counts_to_cases(a)
size a
size(a)
dim(a)
dim(b)
16*3
a
16*3*3
dim(b)
b
a
dim(b)
b
a
b
b[1.1"1.1"]
b[1,1]
b[1,:]
b
b[16.7]
b
?b
b[1:]
whos b
??b
tempdir()
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
visstat(trees,"Girth","Height") #linear regression without saving of plot
visstat(trees,"Girth","Height",graphicsoutput = "png") #wring a png -file
getwd()
ls -larth
pngplots=dir(getwd(),pattern=".png")
file.remove(pngplots)
visstat(trees,"Girth","Height",graphicsoutput = "png") #wring a png -file
ls *.png
getwd()
pngplots=dir(getwd(),pattern=".png")
file.remove(pngplots)
setwd("~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples")
visstat(trees,"Girth","Height",graphicsoutput = "png") #writing a png file to current directory
file.remove("regression_Girth_Height.png")
visstat(trees,"Girth","Height",graphicsoutput = "png"); file.remove("regression_Girth_Height.png") #writing a png file to current directory and removing it;
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
visstat(iris,"Petal.Width", "Species")
?t.test
visstat(iris,"Petal.Width", "Species")
#'
t.test(1:10, y = c(7:20))
visstat(trees,"Girth","Height",graphicsoutput = "png");
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
library(visStatistics)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
setwd(tempdir())#set working directory to temporary directory
visstat(trees,"Girth","Height") #linear regression without saving of plot
visstat(trees,"Girth","Height",graphicsoutput = "png"); file.remove("regression_Girth_Height.png") #writing a png file to current directory and removing it;
visstat(trees,"Girth","Height") #linear regression without saving of plot
visstat(trees,"Girth","Height",graphicsoutput = "png"); file.remove("regression_Girth_Height.png") #writing a png file to current directory and removing it;
visstat(trees,"Girth","Height",graphicsoutput = "png");
getwd()
setwd("~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples")
visstat(trees,"Girth","Height",graphicsoutput = "png")
visstat(iris,"Petal.Width", "Species")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/detach_package.R', echo=TRUE)
detach_package("visStatistics")
detach_package(visStatistics)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
debugSource('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
?oneway.test
library(visStatistics)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
visstat(trees,"Girth","Height")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/detach_package.R', echo=TRUE)
detach_package("visStatistics")
library(visStatistics)
visstat(trees,"Girth","Height")
