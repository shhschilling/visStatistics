#' openGraphCairo()
#'
#' # very simple KDE (adapted from example in \code{Cairo()})
#' openGraphCairo(type="png",mag=2.54) #mag is conversion factor cm to inch
#' plot(rnorm(4000),rnorm(4000),col="#ff000018",pch=19,cex=2) # semi-transparent red
#' dev.off() # creates a file "visstat_plot.png" with the above plot
#'## remove the example files if not in an interactive session
if (!interactive()) unlink(c("visstat_plot.png","plot.pdf"))
#' @import Cairo
#' @export openGraphCairo
openGraphCairo =  function(width = 640,
height = 480 , file=NULL, type=NULL,pointsize=12,
bg = "transparent", canvas = "white", units = "px",
dpi=150, mag=1,
...)
{
if (is.null(type))
{return()}
else{
if(is.null(file)) {
file="visstat_plot"}
picture_type=type
Cairo(paste(file, ".", type, sep = ""),
type = picture_type,
width = width * mag,
height = height * mag,
units = units,
dpi =dpi,
pointsize = pointsize)
}
## saveGraphCairo function-------
#'
#' Saving graphical output
#'
#' \code{saveGraphCairo()} prematurely ends the function call and returns null, if no output \code{type}  is provided.
#' Otherwise it saves the graphical output initialized by \code{openGraphCairo()} to \code{file}.
#'
#' @param file of the file to be created or connection to write to without .\code{type} extension
#' @param type see \code{Cairo()}
#' @param oldPlotName plot name  without file extension generated opening the graphics device with \code{Cairo()}
#'
#' @return
#' @examples
#' #returning NULL
#' saveGraphCairo()
#'
#' @import Cairo
#' @export saveGraphCairo
saveGraphCairo = function(file=NULL, type=NULL,oldPlotName =NULL) {
#close file first
if(is.null(type))
{return()}
else{
if(is.null(oldPlotName)) {
dummy_name="visstat_plot"
oldPlotName=paste(dummy_name,".",type,sep="")
}
#dev.off()
while (!is.null(dev.list()))  dev.off()
file2 = gsub("[^[:alnum:]]", "_", file)
file3 = gsub("_{2,}", "_", file2)
newFileName = paste0(file3,".", type)
file.copy(oldPlotName,newFileName,overwrite=T)
file.remove(oldPlotName)
}
#Remove spurious empty Rplots.pdf----
deleteRplotspdf = function()
{
if (file.exists("Rplots.pdf"))
{
file.remove("Rplots.pdf")
}
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/wrapper_Cairo.R')
?openGraphCairo
??openGraphCairo
library(visStatistics)
??openGraphCairo
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R')
?visstat
?openGraphCairo
??openGraphCairo
library(visStatistics)
?visstat
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/wrapper_Cairo.R')
library(visStatistics)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/wrapper_Cairo.R')
library(visStatistics)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/openGraphCairo.R')
openGraphCairo()
openGraphCairo(type="png",mag=2.54)
library(Cairo)
library(visStatistics)
openGraphCairo(type="png",mag=2.54)
library(visStatistics)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/openGraphCairo.R')
library(visStatistics)
rm(list = ls())
rm(list = ls(all.names = TRUE))
detach("package:visStatistics", unload=TRUE)
library(visStatistics)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/openGraphCairo.R')
library(visStatistics)
#' openGraphCairo is a Cairo wrapper function
library(visStatistics)
detach("package:visStatistics", unload=TRUE)
rm(list = ls(all.names = TRUE))
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R')
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_openGraphCairo.R')
library(visStatistics)
rm(list = ls(all.names = TRUE))
detach("package:visStatistics", unload=TRUE)
library(visStatistics)
interactive
interactive()
if (!interactive()) unlink("Rplots.pdf")
deleteRplotspdf()
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R')
deleteRplotspdf()
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R')
library(visStatistics)
rm(list = ls(all.names = TRUE))
detach("package:visStatistics", unload=TRUE)
library(visStatistics)
detach("package:visStatistics", unload=TRUE)
library(visStatistics)
?Cairo
library(Cairo)
?Cairo
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R')
library(visStatistics)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_openGraphCairo.R')
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat.R')
library(visStatistics)
visstat(trees,"Girth","Height") #without saving of plot
detach("package:visStatistics", unload=TRUE)
library(visStatistics)
detach("package:visStatistics", unload=TRUE)
rm(list = ls(all.names = TRUE))
library(visStatistics)
visstat(trees,"Girth","Height") #without saving of plot
visstat(iris,"Petal.Width", "Species")
visstat(trees,"Girth","Height") #without saving of plot
visstat(iris,"Petal.Width", "Species")
visstat(iris,"Petal.Width", "Species",graphicsoutput="png")
visstat(iris,"Petal.Width", "Petal.Length")
cexsize
cex
??cex
fisher_chi
?fisher_chi
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R')
?mtext
??mtext
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R')
library(visStatistics)
visstat(trees,"Girth","Height") #without saving of plot
visstat(iris,"Petal.Width", "Species")
visstat(iris,"Petal.Width", "Species",graphicsoutput="png")
visstat(iris,"Petal.Width", "Petal.Length")
visstat(trees,"Girth","Height") #without saving of plot
mtcars$am=as.factor(mtcars$am)
visstat(mtcars,"mpg","am")
data
data()
ChickWeight
?ChickWeight
head(ChickWeight)
ChickWeight$Diet=as.factor(ChickWeight$Diet)
ChickWeight$Diet = as.factor(ChickWeight$Diet)
visstat(ChickWeight,"weight","Diet")
visstat(InsectSprays,"count","spray")
head(InsectSprays)
table(InsectSprays)
InsectSprays
?InsectSprays
InsectSpraysAB <- InsectSprays[sprayAB]
sprayAB=c("A","B")
InsectSpraysAB <- InsectSprays[sprayAB]
InsectSprays
sprayAB
InsectSprays[sprayAB]
InsectSprays$spray <- InsectSprays$spray[sprayAB]
InsectSprays
InsectSpraysAB =  InsectSprays[1:24,]
visstat(InsectSprays[1:24,],"mpg","am")
visstat(InsectSprays[1:24,],"count","spray")
visstat(InsectSprays[1:23,],"count","spray")
InsectSprays[1:23,]
InsectSprays[1:24,]
InsectSprays[1:25,]
visstat(InsectSprays[1:24,],"count","spray")
visstat(InsectSpraysAB,"count","spray")
visstat(mtcars,"mpg","am")
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am")
visstat(InsectSpraysAB,"count","spray")
visstat(InsectSprays,"count","spray")
InsectSprays
visstat(InsectSpraysAB,"count","spray")
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB
visstat(InsectSpraysAB,"count","spray")
InsectSpraysAB
two_sample_tTest(InsectSpraysAB$count,InsectSpraysAB$spray)
dev.off()
two_sample_tTest(InsectSpraysAB$count,InsectSpraysAB$spray)
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am")
get_samples_fact_inputfile(trees,"Girth","Height")
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
visstat(InsectSpraysAB,"count","spray")
visstat(iris,"Petal.Width", "Species")
visstat(ChickWeight,"weight","Diet")
visstat(InsectSpraysAB,"count","spray")
visstat(InsectSprays,"count","spray")
InsectSpraysAB
ChickWeight$Diet = as.factor(ChickWeight$Diet)
visstat(ChickWeight,"weight","Diet")
ChickWeigth12 <- ChickWeight[ which(ChickWeigth$Diet == 1
| ChickWeigth$spray == 2), ]
ChickWeight12 <- ChickWeight[ which(ChickWeight$Diet == 1
| ChickWeight$spray == 2), ]
ChickWeight12
ChickWeight
ChickWeight12
ChickWeight[ which(ChickWeight$Diet == '1'
| ChickWeight$Diet == '2'), ]
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat.R')
data()
airmiles
head(ChickWeight)
visstat(ChickWeight,"weight", "Chick")
visstat(ChickWeight,"weight", "Diet")
whos(ChickWeight)
which(ChickWeight)
typeof(ChickWeight)
ChickWeight(1)
ChickWeight[1]
ChickWeight[2]
visstat(ChickWeight,"weight", "Diet")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat.R')
visstat(trees,"Girth","Height") #without saving of plot
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am")
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
visstat(InsectSprays,"count","spray")
visstat(InsectSpraysAB,"count","spray")
visstat(InsectSprays,"count","spray")
visstat(iris,"Petal.Width", "Species")
visstat(iris,"Petal.Width", "Species",graphicsoutput = "png")
visstat(ChickWeight,"weight", "Diet")
visstat(InsectSprays,"count","spray")
library(titanic)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat.R')
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
visstat(titanic_train,"Survived","Pclass")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R')
data()
head(AirPassengers)
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
visstat(titanic_train,"Survived","Pclass")
data()
mdeaths
nhtemp
?str
str(ChickWeight12)
str(ChickWeight)
str(ChickWeight12)
visstat(InsectSprays,"count","spray")
visstat(InsectSpraysAB,"count","spray")
str(InsectSprays)
str(InsectSpraysAB)
InsectSpraysAB <- factor(InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ])
InsectSpraysAB
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
str(InsectSpraysAB)
visstat(InsectSpraysAB,"count","spray")
visstat(InsectSprays,"count","spray")
InsectSpraysEF <- InsectSprays[ which(InsectSprays$spray == 'E'
| InsectSprays$spray == 'F'), ]
InsectSpraysEF$spray = factor(InsectSpraysEF$spray)
visstat(InsectSpraysEF,"count","spray")
data()
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R')
?on.exit
require(graphics)
opar <- par(mai = c(1,1,1,1))
on.exit(par(opar))
opar
opar <- par(mai = c(1,1,1,1))
opar
on.exit(par(opar))
opar
opar <- par(mai = c(1,1,1,1))
opar
on.exit(par(opar))
par
opar
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R')
?oma
par(oma)
?par
par()
par$oma
oldpar <- par(no.readonly = TRUE)
oldpar
oldpar()
par(oldpar)
?par
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R')
par(no.readonly = TRUE)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R')
?cex
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R')
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat.R')
?missing
missing
?missing
typeof(data.frame)
typeof(cars)
typeof(InsectSprays)
is.list
is.list(typeof(InsectSprays))
is.list((InsectSprays))
is.data.frame((InsectSprays))
!is.data.frame((InsectSprays))
!is.data.matrix((InsectSprays))
!is.matrix((InsectSprays))
!is.data.frame(InsectSprays)|!is.matrix(InsectSprays)
!is.data.frame(InsectSprays)
!is.matrix(InsectSprays)
!is.data.frame(InsectSprays)
!is.matrix(InsectSprays)
!is.data.frame(dataframe)&!is.matrix(dataframe)
!is.data.frame(InsectSprays) & !is.matrix(InsectSprays)
!is.data.frame(dataframe)
!is.data.frame(InsectSprays)
test=c(1,2,3)
dataframe=test
!is.data.frame(dataframe) & !is.matrix(dataframe)
dataframe=InsectSprays
!is.data.frame(InsectSprays) & !is.matrix(InsectSprays)
tyeof(test)
typeof(test)
test=c(1,2,3)
typeof(test)
wich(test)
test=c(1,2,3)
head(test)
names(test)
names(InsectSprays)
?names
mtcars
names(mtcars)
"disp" in names(mtcars)
"cyl" %in% names(mtcars)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R')
?missing
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R')
source('~/.active-rstudio-document')
g()
g(3,4)
g(3)
g(a=5)
g(b=5)
g(1,3)
g(3)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/dummy.R')
g(b=3)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/dummy.R')
g(b=3)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R')
cex
?cex
par()
par$cex
par()
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R')
character()
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R')
col_vec_Brower
col_vec_browser
?rainbow
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R')
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatisticsrunningcopy/R/tests_and_visuals.R')
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/tests_and_visuals.R')
library(visStatistics)
ArgumentCheck
library(ArgumentCheck)
?ArgumentCheck
??ArgumentCheck
newArgCheck
?ArgCheck
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat.R')
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R')
install.packagesz(ArgumentCheck)
install.packages(ArgumentCheck)
install.packages("ArgumentCheck")
library(visStatistics)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R')
library(visStatistics)
visstat(iris,"Petal.Width", "Species")
names(iris)
visstat(iris,"Petal.Width", "Species")
?msg
??msgWindopar()
par()
par(no.readonly = TRUE)
oldpar1=par(no.readonly = TRUE)
oldpar2=par()
olpar1-oldpar2
oldpar1-oldpar2
olpar2
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/testfilesvisStatistics/testinputfile.R')
install.packages("checkmates")
install.packages("checkmate")
checkDataFrame(iris)
library(checkmate)
checkDataFrame(iris)
checkMatrix(iris)
checkArray(iris)
checkArray(mtcars)
checkArray(Titanic)
par
par()
par()=oldpar
oldpar <- par(no.readonly = TRUE)
par()=oldpar
par
par(oldpar)
oldpar <- par(no.readonly = TRUE)
par(oldpar)
oldpar
reset_par <- function(){
op <- structure(list(xlog = FALSE, ylog = FALSE, adj = 0.5, ann = TRUE,
ask = FALSE, bg = "transparent", bty = "o", cex = 1, cex.axis = 1,
cex.lab = 1, cex.main = 1.2, cex.sub = 1, col = "black",
col.axis = "black", col.lab = "black", col.main = "black",
col.sub = "black", crt = 0, err = 0L, family = "", fg = "black",
fig = c(0, 1, 0, 1), fin = c(6.99999895833333, 6.99999895833333
), font = 1L, font.axis = 1L, font.lab = 1L, font.main = 2L,
font.sub = 1L, lab = c(5L, 5L, 7L), las = 0L, lend = "round",
lheight = 1, ljoin = "round", lmitre = 10, lty = "solid",
lwd = 1, mai = c(1.02, 0.82, 0.82, 0.42), mar = c(5.1, 4.1,
4.1, 2.1), mex = 1, mfcol = c(1L, 1L), mfg = c(1L, 1L, 1L,
1L), mfrow = c(1L, 1L), mgp = c(3, 1, 0), mkh = 0.001, new = FALSE,
oma = c(0, 0, 0, 0), omd = c(0, 1, 0, 1), omi = c(0, 0, 0,
0), pch = 1L, pin = c(5.75999895833333, 5.15999895833333),
plt = c(0.117142874574832, 0.939999991071427, 0.145714307397962,
0.882857125425167), ps = 12L, pty = "m", smo = 1, srt = 0,
tck = NA_real_, tcl = -0.5, usr = c(0.568, 1.432, 0.568,
1.432), xaxp = c(0.6, 1.4, 4), xaxs = "r", xaxt = "s", xpd = FALSE,
yaxp = c(0.6, 1.4, 4), yaxs = "r", yaxt = "s", ylbias = 0.2), .Names = c("xlog",
"ylog", "adj", "ann", "ask", "bg", "bty", "cex", "cex.axis",
)
))))
par()
?on.exit
library(visStatistics)
visstat(ToothGrowth,"len", "supp")
par.cex
par::cex
par()
par$cex
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
visstat(ChickWeight,"weight", "Diet")
library(visStatistics)
detach(visstat())
detach("visstat")
detach("visStatistics")
detach("package:visStatistics", unload=TRUE)
library(visStatistics)
rm(list = setdiff(ls(), lsf.str()))
library(visStatistics)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat.R')
visstat(iris,"Petal.Width", "Species")
library(visStatistics)
rm(list = setdiff(ls(), lsf.str()))
visstat(trees,"Girth","Height") #without saving of plot
pwd
getwd()
visstat(trees,"Girth","Height")
remove.packages("visStatistis")
remove.packages("visStatistics")
library(visStatistics)
visstat(trees,"Girth","Height")
remove.packages("visStatistics")
visstat(trees,"Girth","Height")
?visstat
visstat(trees,"Girth","Height")
??visstat
visstat(trees,"Girth","Height")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/testthat/examples_visstat.R')
?visstat
remove.packages("ArgumentCheck")
?visstat
visstat(trees,"Girth","Height")
??visstat
?visstat
visstat(trees,"Girth","Height")
