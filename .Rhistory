dev.off()
library(visStatistics)
options(warn=2) #for debugging also warnings
#only while developing, comment on when installed from CRAN
library(nortest)
library(vcd)
library(multcompView)
library(Cairo)
linear_regression_trees=visstat(trees,"Girth","Height");
linear_regression_trees=visstat(trees,"Girth","Height",graphicsoutput = "png",plotDirectory=filedir) ;
linear_regression_trees=visstat(trees,"Girth","Height",graphicsoutput = "pdf",plotName="hugo",plotDirectory=filedir) ;
linear_regression_trees=visstat(trees,"Girth","Height",graphicsoutput = "svg",,plotName="dante",plotDirectory=filedir) ;
#display stats of linear regression
linear_regression_trees
#Welch two sample t.test: mtcars data set ----
mtcars$am = as.factor(mtcars$am)
welch_cars=visstat(mtcars,"mpg","am")
#store graphical output in different formats in directory defined in argument plotDirectory
welch_cars=visstat(mtcars,"mpg","am",graphicsoutput="png",plotName="hans",plotDirectory=filedir )
#standard naming convention
welch_cars=visstat(mtcars,"mpg","am",graphicsoutput="pdf",plotDirectory=filedir)
#load libraries -----
library(visStatistics)
#only while developing, comment on when installed from CRAN
library(nortest)
library(vcd)
library(multcompView)
library(Cairo)
#specify directory where plots will be stored----
#Without definition of plotDirectory: current working directory
filedir=tempdir()
par()
par(new=FALSE)
par()
par(new=FALSE)
on.exit(par(oldparwilcox))
par(oldparwilcox)
oldparwilcox <- par(no.readonly = TRUE)
par(oldparwilcox)
par(new=FALSE)
oldparwilcox <- par(no.readonly = TRUE)
on.exit(par(oldparwilcox))
par(new=FALSE)
oldparwilcox <- par(no.readonly = TRUE)
par(oldparwilcox)
par(new=FALSE)
oldparwilcox <- par(no.readonly = TRUE)
par(oldparwilcox)
par(new=FALSE)
oldparwilcox <- par()   #make a copy of current values
par(oldparwilcox)
par(new=FALSE)
oldparwilcox <- par(no.readonly = TRUE)   #make a copy of current values
par(oldparwilcox)
par(new=FALSE)
oldparwilcox <- par(no.readonly = TRUE)   #make a copy of current values
par(oldparwilcox)
oldparwilcox <- par(no.readonly = TRUE) #make a copy of current values
par(new=FALSE)
par(oldparwilcox)
oldparwilcox <- par(no.readonly = TRUE) #make a copy of current values
par(new=FALSE)
par(oldparwilcox)
oldparwilcox
par(new=FALSE)
par()
par(new = TRUE)
#as if it were on a new device.
lines(density(x), col = "blue")
par(new = FALSE)
par()
par(new=FALSE)
oldparchi <- par(no.readonly = TRUE)
on.exit(par(oldparchi))
colortuple = colorscheme(1)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
par(new=FALSE)
oldparchi <- par(no.readonly = TRUE)
on.exit(par(oldparchi))
colortuple = colorscheme(1)
#store default graphical parameters------
oldparnormvis <- par(no.readonly = TRUE)
on.exit(par(oldparnormvis))
#store default graphical parameters------
oldparnormvis <- par(no.readonly = TRUE)
on.exit(par(oldparnormvis))
par(mfrow = c(1, 2), oma = c(0, 0, 3, 0))
#Remove NA from x
x <- x[!is.na(x)]
n = length(x)
norm_dens = function(z) {
dnorm(z, mean(x), sd(x))
}
ymax = max(norm_dens(x))
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
grades_gender <- data.frame(
Sex = as.factor(c(rep("Girl", 20), rep("Boy", 20))),
Grade = c(19.25, 18.1, 15.2, 18.34, 7.99, 6.23, 19.44, 20.33, 9.33, 11, 18.2,17.5,10,20,13.3,17.2,15.1,16.2,17.3,
16.5, 5.1, 15, 17.41, 14.5, 15, 14.3, 7.53, 15.23, 6,.33, 7.25, 14,13.5,8,19.5,13.4,17.5,17.4,16.5,15.6))
visstat(grades_gender,"Grade", "Sex")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
warnings()
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat_plots.R', echo=TRUE)
#debugging: stop with warnings
options(warn=2)
#load libraries -----
library(visStatistics)
#only while developing, comment on when installed from CRAN
library(nortest)
library(vcd)
library(multcompView)
library(Cairo)
#specify directory where plots will be stored----
#Without definition of plotDirectory: current working directory
filedir=tempdir()
welch_cars=visstat(mtcars,"mpg","am")
welch_cars=visstat(mtcars,"mpg","am",graphicsoutput = "png",plotDirectory=filedir)
welch_cars
#Kruskal-Wallis test: iris----
iris_kruskal=visstat(iris,"Petal.Width", "Species")
iris_kruskal=visstat(iris,"Petal.Width", "Species",graphicsoutput="png",plotDirectory=filedir)
iris_kruskal=visstat(iris,"Petal.Width", "Species") #error: overlaying plots
iris_kruskal
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat_plots.R', echo=TRUE)
visstat(weight_gender,"weight","gender") #sorts independent variable in alhabetial order
vis_weight=visstat(weight_gender,"weight","gender2")
visstat(weight_gender,"weight","gender3")
visstat(weight_gender,"weight","gender4")
visstat(weight_gender,"weight","gender5")
vis_weight=visstat(weight_gender,"weight","gender2")
visstat(weight_gender,"weight","gender3")
visstat(weight_gender,"weight","gender4")
visstat(weight_gender,"weight","gender5")
visstat(weight_gender,"weight","gender6")
#Chi squared, mosaic plots with Titanic data set----
#install.packages("titanic")
#example categorical data,
library(titanic)
#without the transformation to factors Kruskal -Wallis is peformed
titanic_train$Survived = as.factor(titanic_train$Survived)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
library(visStatistics)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat_plots.R', echo=TRUE)
warnings()
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat_plots.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
visstat(grades_gender,"Grade", "Sex")
#Welcht-t-Test
visstat(InsectSpraysAB,"count","spray") #plots not saved
visstat(grades_gender,"Grade", "Sex")
visstat(InsectSpraysAB,"count","spray",graphicsoutput = "png",plotName="insect_count_spray",plotDirectory=filedir)
visstat(grades_gender,"Grade", "Sex")
visstat(InsectSpraysAB,"count","spray",graphicsoutput = "png",plotName="insect_count_spray",plotDirectory=filedir)
#Wilcoxon rank sum test:Grades by gender
grades_gender <- data.frame(
Sex = as.factor(c(rep("Girl", 20), rep("Boy", 20))),
Grade = c(
19.25, 18.1, 15.2, 18.34, 7.99, 6.23, 19.44, 20.33, 9.33, 11, 18.2,17.5,10,20,13.3,17.2,15.1,16.2,17.3,
16.5, 5.1, 15, 17.41, 14.5, 15, 14.3, 7.53, 15.23, 6,.33, 7.25, 14,13.5,8,19.5,13.4,17.5,17.4,16.5,15.6))
visstat(grades_gender,"Grade", "Sex")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat_plots.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat_plots.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat_plots.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
debugSource('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
visstat(grades_gender,"Grade", "Sex")
visstat(grades_gender,"Grade", "Sex"graphicsoutput = "png",plotDirectory=filedir)
visstat(grades_gender,"Grade", "Sex",graphicsoutput = "png",plotDirectory=filedir)
visstat(grades_gender,"Grade", "Sex")
debugSource('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
visstat(grades_gender,"Grade", "Sex")
debugSource('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
oldparwilcox <- par(no.readonly = TRUE)
par(oldparwilcox)
par()
par(new=FALSE)
par()
debugSource('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
debugSource('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
#Define color palette
colortuple2 = colorscheme(2)
debugSource('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat_plots.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
oldparvisstat
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
debugSource('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
par(new=FALSE)
par()
par("new")
par("new"=FALSE)
par("new")
par(new=FALSE)
par("new")
par()
par("new")
dev.off()
par("new")
#store default graphical parameters------
oldparvisstat=resetPar()
resetPar()
debugSource('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
resetPar()
debugSource('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
resetPar()
debugSource('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
options(warn=0) #for debugging also warnings
debugSource('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
resetPar()
resetPar <- function() {
dev.new
while (!is.null(dev.list()))  dev.off() #restores to default values
oldpar <- par(no.readonly = TRUE)
return(oldpar)
}
resetPar <- function() {
dev.new
while (!is.null(dev.list()))  dev.off() #restores to default values
oldpar <- par(no.readonly = TRUE)
return(oldpar)
}
resetPar()
oldparvisstat=resetPar()
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
library(visStatistics)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
par("new")
par(new=F)
par("new")
par=("new"=F)
par("new"=F)
par("new")
par("new"=F)
par("new")
par("new"=FALSE)
par("new")
dev.off()
par("new")
dev.new
dev.new()
while (!is.null(dev.list()))  dev.off() #restores to default values
oldpar <- par(no.readonly = TRUE)
return(oldpar)
dev.new
while (!is.null(dev.list()))  dev.off() #restores to default values
oldpar <- par(no.readonly = TRUE)
oldpar()
oldpar
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
oldparregr <- par(no.readonly = TRUE)
on.exit(par(oldparregr))
alpha = 1 - conf.level
P = alpha
oldparmosaic <- par(no.readonly = TRUE)
oldparmosaic
oldparmosaic$new=TRUE
oldparmosaic
par(oldparmosaic)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
library(visStatistics)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
library(visStatistics)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
visstat(grades_gender,"Grade", "Sex")
grades_gender <- data.frame(
Sex = as.factor(c(rep("Girl", 20), rep("Boy", 20))),
Grade = c(19.25, 18.1, 15.2, 18.34, 7.99, 6.23, 19.44, 20.33, 9.33, 11, 18.2,17.5,10,20,13.3,17.2,15.1,16.2,17.3,
16.5, 5.1, 15, 17.41, 14.5, 15, 14.3, 7.53, 15.23, 6,.33, 7.25, 14,13.5,8,19.5,13.4,17.5,17.4,16.5,15.6))
visstat(grades_gender,"Grade", "Sex")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
#store default graphical parameters------
oldparvisstat <- par(no.readonly = TRUE)
oldparvisstat$new=FALSE #default value
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat_plots.R', echo=TRUE)
library(visStatistics)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
warnings()
oldparCairo <- resetPar()
# If graphicsoutput parameter is set, all plots are stored in the directory specified in the parameter plotDirectory.
# Default directory of plotDirectory is the working directory.
# Graphical output is named following the naming convention
#"statisticalTestName_varsample_varfactor.graphicsoutput"
#
linear_regression_trees=visstat(trees,"Girth","Height");
linear_regression_trees=visstat(trees,"Girth","Height",graphicsoutput = "png",plotDirectory=filedir) ;
# If graphicsoutput parameter is set, all plots are stored in the directory specified in the parameter plotDirectory.
# Default directory of plotDirectory is the working directory.
# Graphical output is named following the naming convention
#"statisticalTestName_varsample_varfactor.graphicsoutput"
#
linear_regression_trees=visstat(trees,"Girth","Height");
linear_regression_trees=visstat(trees,"Girth","Height",graphicsoutput = "png",plotDirectory=filedir) ;
#Kruskal-Wallis test: iris----
visstat(iris,"Petal.Width", "Species")
visstat(iris,"Petal.Width", "Species",graphicsoutput="pdf",plotDirectory=filedir)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/openGraphCairo.R', echo=TRUE)
#Kruskal-Wallis test: iris----
iris_kruskal=visstat(iris,"Petal.Width", "Species")
iris_kruskal=visstat(iris,"Petal.Width", "Species",graphicsoutput="png",plotDirectory=filedir)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/openGraphCairo.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
#Kruskal-Wallis test: iris----
visstat(iris,"Petal.Width", "Species")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/openGraphCairo.R', echo=TRUE)
#Kruskal-Wallis test: iris----
visstat(iris,"Petal.Width", "Species")
visstat(iris,"Petal.Width", "Species",graphicsoutput="pdf",plotDirectory=filedir)
visstat(iris,"Petal.Width", "Species",graphicsoutput="pdf",plotName="iris_kruskal",plotDirectory=filedir)
#Welch two sample t.test: InsectSprays ----
# select sprays A and B
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
#Welcht-t-Test
visstat(InsectSpraysAB,"count","spray") #plots not saved
library(visStatistics)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
warnings()
# If graphicsoutput parameter is set, all plots are stored in the directory specified in the parameter plotDirectory.
# Default directory of plotDirectory is the working directory.
# Graphical output is named following the naming convention
#"statisticalTestName_varsample_varfactor.graphicsoutput"
#
linear_regression_trees=visstat(trees,"Girth","Height");
linear_regression_trees=visstat(trees,"Girth","Height",graphicsoutput = "png",plotDirectory=filedir) ;
# If graphicsoutput parameter is set, all plots are stored in the directory specified in the parameter plotDirectory.
# Default directory of plotDirectory is the working directory.
# Graphical output is named following the naming convention
#"statisticalTestName_varsample_varfactor.graphicsoutput"
#
linear_regression_trees=visstat(trees,"Girth","Height");
library(visStatistics)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
grades_gender <- data.frame(
Sex = as.factor(c(rep("Girl", 20), rep("Boy", 20))),
Grade = c(19.25, 18.1, 15.2, 18.34, 7.99, 6.23, 19.44, 20.33, 9.33, 11.3, 18.2,17.5,10.22,20.33,13.3,17.2,15.1,16.2,17.3,
16.5, 5.1, 15.25, 17.41, 14.5, 15, 14.3, 7.53, 15.23, 6,17.33, 7.25, 14,13.5,8,19.5,13.4,17.5,17.4,16.5,15.6))
visstat(grades_gender,"Grade", "Sex")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
visstat(InsectSprays,"count","spray")
mtcars
crop.data
?aov
npk
visstat(npk,"yield","block")
anova_npk=visstat(npk,"yield","block")
anova_npk
summary(anova_npk)
visstat(counts_to_cases(as.data.frame(HairEyeColor[,,1])),"Hair","Eye")
?chisq.test
x <- trunc(5 * runif(100))
x
table(x)
visstat(mtcars,"mpg","am")
## Pearson's Chi-squared test and mosaic plot with Pearson residuals
visstat(counts_to_cases(as.data.frame(HairEyeColor[,,1])),"Hair","Eye")
M <- as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
dimnames(M) <- list(gender = c("F", "M"),
party = c("Democrat","Independent", "Republican"))
M
visstat(M,"gender","party")
tyepof(M)
class(M)
as.dataframe(M)
as.data.frame(M)
counts_to_cases(as.data.frame(M))
#Chi squared, mosaic plots with HairEyeColor----
#HairEyeColor data set: Pearsons Chi squared, mosaic plot with Pearson's residuals
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
#Chi squared, mosaic plots with HairEyeColor----
#HairEyeColor data set: Pearsons Chi squared, mosaic plot with Pearson's residuals
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
#Chi squared, mosaic plots with HairEyeColor----
#HairEyeColor data set: Pearsons Chi squared, mosaic plot with Pearson's residuals
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
#Pearsons Chi squared, mosaic plot with Pearson's residuals
visstat(titanic_train,"Survived","Pclass")
visstat(titanic_train,"Survived","Pclass",graphicsoutput="png",plotDirectory=filedir)
visstat(titanic_train,"Survived","Pclass",plotName="picasso",graphicsoutput="png",plotDirectory=filedir)
visstat(titanic_train,"Survived","Pclass",plotName="picasso_ps",graphicsoutput="ps",plotDirectory=filedir)
#Chi squared, mosaic plots with HairEyeColor----
#HairEyeColor data set: Pearsons Chi squared, mosaic plot with Pearson's residuals
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/openGraphCairo.R', echo=TRUE)
#Pearsons Chi squared, mosaic plot with Pearson's residuals
visstat(titanic_train,"Survived","Pclass")
library(visStatistics)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
titanic_train$Survived = as.factor(titanic_train$Survived)
#Chi squared, mosaic plots with Titanic data set----
#install.packages("titanic")
#example categorical data,
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
#Pearsons Chi squared, mosaic plot with Pearson's residuals
visstat(titanic_train,"Survived","Pclass")
warnings()
#Pearsons Chi squared, mosaic plot with Pearson's residuals
visstat(titanic_train,"Survived","Pclass")
visstat(titanic_train,"Survived","Pclass",graphicsoutput="png",plotDirectory=filedir)
visstat(titanic_train,"Survived","Pclass",plotName="picasso",graphicsoutput="png",plotDirectory=filedir)
visstat(titanic_train,"Survived","Pclass",plotName="picasso_ps",graphicsoutput="ps",plotDirectory=filedir)
#Chi squared, mosaic plots with HairEyeColor----
#HairEyeColor data set: Pearsons Chi squared, mosaic plot with Pearson's residuals
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
HairEyeColorMaleFisher = HairEyeColor[,,1]
lackBrownHazelGreen = HairEyeColorMaleFisher[1:2,3:4]
#2x2 contingency tables----
HairEyeColorMaleFisher = HairEyeColor[,,1]
#slicing out a 2 x2 contingency table
blackBrownHazelGreen = HairEyeColorMaleFisher[1:2,3:4]
fishertest = blackBrownHazelGreen
blackBrownHazelGreen = counts_to_cases(as.data.frame(blackBrownHazelGreen));
fisher_stats=visstat(blackBrownHazelGreen,"Hair","Eye")
fisher_stats
visstat(blackBrownHazelGreen,"Hair","Eye")
visstat(iris,"Petal.Width")
?kruskal.test
?wilcox.test
wilcox.test(Ozone ~ Month, data = airquality,
subset = Month %in% c(5, 8))
boxplot(Ozone ~ Month, data = airquality)
grades_gender <- data.frame(
Sex = as.factor(c(rep("Girl", 20), rep("Boy", 20))),
Grade = c(19.25, 18.1, 15.2, 18.34, 7.99, 6.23, 19.44, 20.33, 9.33, 11.3, 18.2,17.5,10.22,20.33,13.3,17.2,15.1,16.2,17.3,
16.5, 5.1, 15.25, 17.41, 14.5, 15, 14.3, 7.53, 15.23, 6,17.33, 7.25, 14,13.5,8,19.5,13.4,17.5,17.4,16.5,15.6))
visstat(grades_gender,"Grade", "Sex")
grades_gender <- data.frame(
Sex = as.factor(c(rep("Girl", 20), rep("Boy", 20))),
Grade = c(19.25, 18.1, 15.2, 18.34, 7.99, 6.23, 19.44, 20.33, 9.33, 11.3, 18.2,17.5,10.22,20.33,13.3,17.2,15.1,16.2,17.3,
16.5, 5.1, 15.25, 17.41, 14.5, 15, 14.3, 7.53, 15.23, 6,17.33, 7.25, 14,13.5,8,19.5,13.4,17.5,17.4,16.5,15.6))
visstat(grades_gender,"Grade", "Sex")
wilcox.test(Ozone ~ Month, data = airquality,
subset = Month %in% c(5, 8))
test=visstat(grades_gender,"Grade", "Sex")
test
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
rm(list=ls())
while (!is.null(dev.list()))  dev.off()
library(visStatistics)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat_plots.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
file.remove(dir(fildir, full.names=TRUE))
file.remove(dir(filedir, full.names=TRUE))
unlink(d, recursive=TRUE)
unlink(tempdir(), recursive=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat_plots.R', echo=TRUE)
tempdir()
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
visstat(blackBrownHazelGreen,"Hair","Eye",graphicsoutput = "png",plotDirectory=tempdir())
ile.remove(file.path(tempdir(),"chi_squared_or_fisher_Hair_Eye.png"))
file.remove(file.path(tempdir(),"chi_squared_or_fisher_Hair_Eye.png"))
file.remove(file.path(tempdir(),"mosaic_complete_Hair_Eye.png"))
library(visStatistics)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
library(visStatistics)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat_plots.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat_plots.R', echo=TRUE)
install.packages("devtools")
library(devtools)
install_github("shhschilling/visStatistics")
library(visStatistics)
welch_cars=visstat(mtcars,"mpg","am")
visstat(npk,"yield","block")
visstat(InsectSprays,"count","spray")`
``
visstat(InsectSprays,"count","spray")
warnings()
visstat(iris,"Petal.Width", "Species")
visstat(InsectSprays,"count","spray")
?npk
###  NPK factorial experiment: ANOVA
visstat(npk,"yield","block")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
#display stats of linear regression
linear_regression_trees
#Welch two sample t.test: mtcars data set ----
mtcars$am = as.factor(mtcars$am)
inear_regression_trees
inear_regression_trees=visstat(trees,"Girth","Height");
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
inear_regression_trees=visstat(trees,"Girth","Height");
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
library(visStatistics)
?visstat
install.packages("rmarkdown")
usethis::use_vignette("my-vignette")
