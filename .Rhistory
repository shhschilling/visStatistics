??t.test
t.test(a,b);
getAnywhere(t.ttest)
getAnywhere(t.test)
getAnywhere("t.test")
getMethod("t.test")
getMethod(t.test)
getAnywhere(t.test.stats)
getMethod(t.test.stats)
getMethods(t.test.stats)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/detach_package.R', echo=TRUE)
detach_package("visStatistics")
visstat(InsectSprays,"count","spray")
library(visStatistics)
detach_package("visStatistics")
library(visStatistics)
visstat(InsectSprays,"count","spray")
visstat(iris,"Petal.Width", "Species")
library(visStatistics)
visstat(iris,"Petal.Width", "Species")
library(visStatistics)
counts_to_cases(as.data.frame(HairEyeColor[,,1]))
as.data.frame(HairEyeColor[,,1])
counts_to_cases(as.data.frame(HairEyeColor[,,1]),countcol="Freq)
""
)
0
``
counts_to_cases(as.data.frame(HairEyeColor[,,1]),countcol="Freq")
counts_to_cases(as.data.frame(HairEyeColor[,,1]),"Freq")
as.data.frame(HairEyeColor[,,1])
counts_to_cases(as.data.frame(HairEyeColor[,,1]),"Eye")
HairEyeColor
a=as.data.frame(HairEyeColor[,,1])
whos a
which a
size(a)
size a
dim(a)
a
counts_to_cases(a_)
counts_to_cases(a)
b=counts_to_cases(a)
size a
size(a)
dim(a)
dim(b)
16*3
a
16*3*3
dim(b)
b
a
dim(b)
b
a
b
b[1.1"1.1"]
b[1,1]
b[1,:]
b
b[16.7]
b
?b
b[1:]
whos b
??b
tempdir()
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
visstat(trees,"Girth","Height") #linear regression without saving of plot
visstat(trees,"Girth","Height",graphicsoutput = "png") #wring a png -file
getwd()
ls -larth
pngplots=dir(getwd(),pattern=".png")
file.remove(pngplots)
visstat(trees,"Girth","Height",graphicsoutput = "png") #wring a png -file
ls *.png
getwd()
pngplots=dir(getwd(),pattern=".png")
file.remove(pngplots)
setwd("~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples")
visstat(trees,"Girth","Height",graphicsoutput = "png") #writing a png file to current directory
file.remove("regression_Girth_Height.png")
visstat(trees,"Girth","Height",graphicsoutput = "png"); file.remove("regression_Girth_Height.png") #writing a png file to current directory and removing it;
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
visstat(iris,"Petal.Width", "Species")
?t.test
visstat(iris,"Petal.Width", "Species")
#'
t.test(1:10, y = c(7:20))
visstat(trees,"Girth","Height",graphicsoutput = "png");
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
library(visStatistics)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
setwd(tempdir())#set working directory to temporary directory
visstat(trees,"Girth","Height") #linear regression without saving of plot
visstat(trees,"Girth","Height",graphicsoutput = "png"); file.remove("regression_Girth_Height.png") #writing a png file to current directory and removing it;
visstat(trees,"Girth","Height") #linear regression without saving of plot
visstat(trees,"Girth","Height",graphicsoutput = "png"); file.remove("regression_Girth_Height.png") #writing a png file to current directory and removing it;
visstat(trees,"Girth","Height",graphicsoutput = "png");
getwd()
setwd("~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples")
visstat(trees,"Girth","Height",graphicsoutput = "png")
visstat(iris,"Petal.Width", "Species")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/detach_package.R', echo=TRUE)
detach_package("visStatistics")
detach_package(visStatistics)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
debugSource('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
?oneway.test
library(visStatistics)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
visstat(trees,"Girth","Height")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/detach_package.R', echo=TRUE)
detach_package("visStatistics")
library(visStatistics)
visstat(trees,"Girth","Height")
library(visStatistics)
detach_package("visStatistics")
library(visStatistics)
visstat(trees,"Girth","Height")
detach_package("visStatistics")
library(visStatistics)
visstat(trees,"Girth","Height")
detach_package("visStatistics")
library(visStatistics)
detach_package("visStatistics")
library(visStatistics)
visstat(trees,"Girth","Height")
f2 <- function(x) invisible(x)
f2
f2(1)
a=f2(1)
a
f2 <- function(x) return(invisible(x))
a=f2(1)
a
f2 <- function(x) return((x))
f2
f2(1)
dummy <- function(x)
{
y=x
z=x+y
mylist=list(x,y,z)
return(mylist)
}
dummy(1)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/dummy.R', echo=TRUE)
dummy(1)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/dummy.R', echo=TRUE)
dummy(1)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/dummy.R', echo=TRUE)
dummy(1)
a=dummy(1)
a
detach_package("visStatistics")
library(visStatistics)
detach_package("visStatistics")
library(visStatistics)
visstat(trees,"Girth","Height")
a=visstat(trees,"Girth","Height")
a
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am")
test_norm(trees$Girth)
visstat(InsectSprays,"count","spray")
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
visstat(InsectSpraysAB,"count","spray")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
visstat(ChickWeight,"weight", "Diet")
visstat(ToothGrowth,"len", "supp")
a=visstat(ToothGrowth,"len", "supp")
a
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
visstat(ToothGrowth,"len", "supp")
a=visstat(ToothGrowth,"len", "supp")
a
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
a=visstat(ToothGrowth,"len", "supp")
a
a=visstat(ToothGrowth,"len", "supp")
visstat(ToothGrowth,"len", "supp")
no.readonly
?no.readonly
par(no.readonly = TRUE)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
visstat(ToothGrowth,"len", "supp")
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
visstat(titanic_train,"Survived","Pclass")
library(visStatistics)
visstat(trees,"Girth","Height")
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am")
linear_regression_trees=visstat(trees,"Girth","Height",graphicsoutput = "png")
getwd()
remove.file(regression_Girth_Height.png)
file.remove(regression_Girth_Height.png)
linear_regression_trees=visstat(trees,"Girth","Height",graphicsoutput = "png")
file.remove("regression_Girth_Height.png")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
visstat(iris,"Petal.Width", "Species")
library(visStatistics)
visstat(trees,"Girth","Height")
a=visstat(trees,"Girth","Height")
a
linear_regression_trees = visstat(trees,"Girth","Height",graphicsoutput = "png")
file.remove("regression_Girth_Height.png")
mtcars$am = as.factor(mtcars$am)
visstat(mtcars,"mpg","am")
mtcars$am = as.factor(mtcars$am)
welch_cars=visstat(mtcars,"mpg","am")
welc_cars
mtcars$am = as.factor(mtcars$am)
welch_cars=visstat(mtcars,"mpg","am")
welch_cars
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
library(visStatistics)
mtcars$am = as.factor(mtcars$am)
welch_cars=visstat(mtcars,"mpg","am")
welch_cars
visstat(InsectSprays,"count","spray")
?multcompLetters
detach_package("visStatistics.Rproj")
library(visStatistics)
visstat(trees,"Girth","Height")
linear_regression_trees = visstat(trees,"Girth","Height",graphicsoutput = "png")
file.remove("regression_Girth_Height.png")
linear_regression_trees
visstat(trees,"Girth","Height")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
linear_regression_trees = visstat(trees,"Girth","Height",graphicsoutput = "png")
linear_regression_trees
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
linear_regression_trees = visstat(trees,"Girth","Height",graphicsoutput = "png")
linear_regression_trees
visstat(trees,"Girth","Height")
visstat(InsectSprays,"count","spray")
library(visStatistics)
visstat(trees,"Girth","Height")
linear_regression_trees = visstat(trees,"Girth","Height",graphicsoutput = "png")
file.remove("regression_Girth_Height.png")
linear_regression_trees
mtcars$am = as.factor(mtcars$am)
welch_cars=visstat(mtcars,"mpg","am")
welch_cars
anova_insects=visstat(InsectSprays,"count","spray")
installed.packages("multcompLetters")
install.packages("multcompLetters")
install.packages("ggplot")
install.packages(c("backports", "broom", "Cairo", "cmprsk", "data.table", "dplyr", "Epi", "forestplot", "fs", "ggdendro", "ggforce", "ggplot2", "Hmisc", "htmlTable", "htmltools", "httr", "isoband", "jsonlite", "knitr", "mvtnorm", "nlme", "openssl", "pillar", "pkgbuild", "pkgload", "processx", "ps", "quantreg", "raster", "Rcpp", "RcppArmadillo", "rlang", "rmarkdown", "rms", "roxygen2", "survival", "sys", "tibble", "tidyr", "tinytex", "vctrs", "xfun"))
install.packages("multcompLetters")
install.packages("multcompView")
install.packages("Rcpp")
library(Rcpp)
install.packages("Rcpp")
install.packages("survival")
library(visStatistics)
# linear regression: trees data set:----
visstat(trees,"Girth","Height")
#linear regression saving both statistics and generated plot:
#Graph is stored  to regression_Girth_Height.png in working directory;
# If graphicsoutput parameter is set, all plots are stored in the working directory
# following the naming convention
#"statisticalTestName_varsample_varfactor.graphicsoutput"
linear_regression_trees = visstat(trees,"Girth","Height",graphicsoutput = "png")
#display stats of linear regression
linear_regression_trees
#Welch two sample t.test: mtcars data set ----
mtcars$am = as.factor(mtcars$am)
welch_cars=visstat(mtcars,"mpg","am")
welch_cars
#ANOVA: InsectSprays  data set----
#ANOVA
anova_insects=visstat(InsectSprays,"count","spray")
install.packages("multcompView")
#ANOVA: InsectSprays  data set----
#ANOVA
anova_insects=visstat(InsectSprays,"count","spray")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
#ANOVA: InsectSprays  data set----
#ANOVA
anova_insects=visstat(InsectSprays,"count","spray")
?multcompLetters
install.packages("mmultcompView")
install.packages("multcompView")
library(visStatistics)
#ANOVA: InsectSprays  data set----
#ANOVA
anova_insects=visstat(InsectSprays,"count","spray")
?multcompLetters
if3 <- c(FALSE, FALSE, TRUE)
names(dif3) <- c("A-B", "A-C", "B-C")
dif3L <- multcompLetters(dif3)
if3 <- c(FALSE, FALSE, TRUE)
names(dif3) <- c("A-B", "A-C", "B-C")
dif3L <- multcompLetters(dif3)
dif3 <- c(FALSE, FALSE, TRUE)
names(dif3) <- c("A-B", "A-C", "B-C")
dif3L <- multcompLetters(dif3)
def3
dif3
dif3L
library(multcompView)
dif3 <- c(FALSE, FALSE, TRUE)
names(dif3) <- c("A-B", "A-C", "B-C")
dif3L <- multcompLetters(dif3)
dif3L
library(visStatistics)
##Examples------
library(visStatistics)
# linear regression: trees data set:----
visstat(trees,"Girth","Height")
#linear regression saving both statistics and generated plot:
#Graph is stored  to regression_Girth_Height.png in working directory;
# If graphicsoutput parameter is set, all plots are stored in the working directory
# following the naming convention
#"statisticalTestName_varsample_varfactor.graphicsoutput"
linear_regression_trees = visstat(trees,"Girth","Height",graphicsoutput = "png")
#remove png from working directory
file.remove("regression_Girth_Height.png")
#display stats of linear regression
linear_regression_trees
#Welch two sample t.test: mtcars data set ----
mtcars$am = as.factor(mtcars$am)
welch_cars=visstat(mtcars,"mpg","am")
welch_cars
#ANOVA: InsectSprays  data set----
#ANOVA
anova_insects=visstat(InsectSprays,"count","spray")
#Welch two sample t.test: InsectSprays
# select sprays A and B
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
#Welcht-t-Test
visstat(InsectSpraysAB,"count","spray")
visstat(iris,"Petal.Width", "Species")
visstat(ChickWeight,"weight", "Diet")
#Wilcoxon rank sum test: TootGrowth ----
visstat(ToothGrowth,"len", "supp")
#Chi squqred, mosaic plots with Titanic data set----
#install.packages("titanic")
#example categorical data,
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
#Pearsons Chi squared, mosaic plot with Pearson's residuals
visstat(titanic_train,"Survived","Pclass")
?mosaic
library(vcd)
#Pearsons Chi squared, mosaic plot with Pearson's residuals
visstat(titanic_train,"Survived","Pclass")
#Chi squqred, mosaic plots with HairEyeColor----
#HairEyeColor data set: Pearsons Chi squared, mosaic plot with Pearson's residuals
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
HairEyeColorMaleFisher =  HairEyeColor[,,1]
#replace cells to smaller values to enforce Cochran's rule
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10] = 4
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher));
visstat(HairEyeColorMaleFisher,"Hair","Eye")
#2x2 contingency tables....
HairEyeColorMaleFisher = HairEyeColor[,,1]
#slicing out a 2 x2 contingency table
blackBrownHazelGreen = HairEyeColorMaleFisher[1:2,3:4]
fishertest = blackBrownHazelGreen
blackBrownHazelGreen = counts_to_cases(as.data.frame(blackBrownHazelGreen));
visstat(blackBrownHazelGreen,"Hair","Eye")
##Examples------
library(visStatistics)
# linear regression: trees data set:----
visstat(trees,"Girth","Height")
visstat(blackBrownHazelGreen,"Hair","Eye")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
# linear regression: trees data set:----
visstat(trees,"Girth","Height")
#display stats of linear regression
linear_regression_trees
#Welch two sample t.test: mtcars data set ----
mtcars$am = as.factor(mtcars$am)
welch_cars=visstat(mtcars,"mpg","am")
welch_cars
#ANOVA: InsectSprays  data set----
#ANOVA
anova_insects=visstat(InsectSprays,"count","spray")
#Welch two sample t.test: InsectSprays
# select sprays A and B
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
#Welcht-t-Test
visstat(InsectSpraysAB,"count","spray")
visstat(iris,"Petal.Width", "Species")
visstat(ChickWeight,"weight", "Diet")
#Wilcoxon rank sum test: TootGrowth ----
visstat(ToothGrowth,"len", "supp")
#Chi squqred, mosaic plots with Titanic data set----
#install.packages("titanic")
#example categorical data,
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
#Pearsons Chi squared, mosaic plot with Pearson's residuals
visstat(titanic_train,"Survived","Pclass")
#Chi squqred, mosaic plots with HairEyeColor----
#HairEyeColor data set: Pearsons Chi squared, mosaic plot with Pearson's residuals
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
HairEyeColorMaleFisher =  HairEyeColor[,,1]
#replace cells to smaller values to enforce Cochran's rule
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10] = 4
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher));
visstat(HairEyeColorMaleFisher,"Hair","Eye")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
# linear regression: trees data set:----
visstat(trees,"Girth","Height")
# If graphicsoutput parameter is set, all plots are stored in the working directory
# following the naming convention
#"statisticalTestName_varsample_varfactor.graphicsoutput"
linear_regression_trees=visstat(trees,"Girth","Height",graphicsoutput = "png")
#display stats of linear regression
linear_regression_trees
#Welch two sample t.test: mtcars data set ----
mtcars$am = as.factor(mtcars$am)
welch_cars=visstat(mtcars,"mpg","am")
welch_cars
#ANOVA: InsectSprays  data set----
#ANOVA
anova_insects=visstat(InsectSprays,"count","spray")
#Welch two sample t.test: InsectSprays
# select sprays A and B
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
#Welcht-t-Test
visstat(InsectSpraysAB,"count","spray")
visstat(iris,"Petal.Width", "Species")
visstat(ChickWeight,"weight", "Diet")
#Wilcoxon rank sum test: TootGrowth ----
visstat(ToothGrowth,"len", "supp")
#Wilcoxon rank sum test: TootGrowth ----
visstat(ToothGrowth,"len", "supp")
#Chi squqred, mosaic plots with Titanic data set----
#install.packages("titanic")
#example categorical data,
library(titanic)
visstat(ChickWeight,"weight", "Diet")
#Wilcoxon rank sum test: TootGrowth ----
visstat(ToothGrowth,"len", "supp")
#Kruskal-Wallis test: iris----
visstat(iris,"Petal.Width", "Species")
#Kruskal-Wallis test: ChickWeight ----
visstat(ChickWeight,"weight", "Diet")
#Kruskal-Wallis test: ChickWeight ----
visstat(ChickWeight,"weight", "Diet")
#Wilcoxon rank sum test: TootGrowth ----
visstat(ToothGrowth,"len", "supp")
#Chi squqred, mosaic plots with Titanic data set----
#install.packages("titanic")
#example categorical data,
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
#Pearsons Chi squared, mosaic plot with Pearson's residuals
visstat(titanic_train,"Survived","Pclass")
#Chi squqred, mosaic plots with HairEyeColor----
#HairEyeColor data set: Pearsons Chi squared, mosaic plot with Pearson's residuals
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
HairEyeColorMaleFisher =  HairEyeColor[,,1]
#replace cells to smaller values to enforce Cochran's rule
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10] = 4
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher));
visstat(HairEyeColorMaleFisher,"Hair","Eye")
file.remove("regression_Girth_Height.png")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
interactive()
library(visStatistics)
linear_regression_trees=visstat(trees,"Girth","Height",graphicsoutput = "png") ;
if (!interactive()) file.remove("regression_Girth_Height.png")
file.remove("regression_Girth_Height.png")
linear_regression_trees
library(visStatistics)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
library(visStatistics)
221/5
164/3
247/6
167.08*1.1
167.08*1.15
library(visStatistics)
now <- tryCatch({
foo <- suppressWarnings(readLines("http://worldclockapi.com/api/json/utc/now",
warn = FALSE))
}
)
Sys.setenv('_R_CHECK_SYSTEM_CLOCK_' = 0)
167*1.05
1/12
tempdir()
tempfile()
