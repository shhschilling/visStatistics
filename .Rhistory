# confidence interval
lwr_conf-conf.int_prediction[:,2]
conf.int_prediction[:,2]
conf.int_prediction[,2]
lwr_conf
# confidence interval
lwr_conf -conf.int_prediction[,2]
lwr_pred=pred_band(cars$speed, model, 0.95, -1)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
lwr_pred=pred_band(cars$speed, model, 0.95, -1)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/check_error_bands.R', echo=TRUE)
lwr_pred=progn_band(cars$speed, model, 0.95, -1)
lwr_progn=progn_band(cars$speed, model, 0.95, -1)
# prediction interval
lwr_progn -pred.int_prediction[,2]
lwr_progn
pred.int_prediction[,2]
# 1. Add predictions
pred.int_prediction <- predict(model, interval = "prediction")
# 1. Add predictions
pred.int_prediction <- predict(model, interval = "prediction")
# 1. Add predictions
pred.int_prediction <- predict.lm(model, interval = "prediction")
conf.int_prediction <- predict(model, interval = "confidence")
#compare to output of own calculation
lwr_conf=conf_band(cars$speed, model, 0.95, -1)
# 1. Add predictions
pred.int_prediction <- predict.lm(model, interval = "prediction")
conf.int_prediction <- predict(model, interval = "confidence")
suppressWarnings(predict())
suppressWarnings(predict)
suppressWarnings(predict())
pred.int_prediction <- predict(model, interval = "prediction")
conf.int_prediction <- predict(model, interval = "confidence")
# 1. Add predictions
suppressWarnings(pred.int_prediction <- predict(model, interval = "prediction"))
source('~/OneDrive - Hochschule Luzern/Forschung/check_error_bands.R', echo=TRUE)
pred.int_prediction
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
library(visStatistics)
visstat(trees$Girth,trees$Height)
visstat(trees,"Girth","Height",conf.level=0.99)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
library(visStatistics)
visstat(trees,"Girth","Height",conf.level=0.99)
library(visStatistics)
visstat(trees,"Girth","Height",conf.level=0.99)
library(visStatistics)
visstat(trees,"Girth","Height",conf.level=0.99)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
visstat(trees,"Girth","Height",conf.level=0.99)
test=visstat(trees,"Girth","Height",conf.level=0.99)
test
library(visStatistics)
test=visstat(trees,"Girth","Height",conf.level=0.99)
test
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
test=visstat(trees,"Girth","Height",conf.level=0.99)
test
library(visStatistics)
test=visstat(trees,"Girth","Height",conf.level=0.99)
test
?predict
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
test=visstat(trees,"Girth","Height",conf.level=0.99)
test
test=visstat(trees,"Girth","Height",conf.level=0.5)
test
test=visstat(trees,"Girth","Height",conf.level=0.5)
test=visstat(trees,"Girth","Height",conf.level=0.1)
library(visStatistics)
test=visstat(trees,"Girth","Height",conf.level=0.1)
library(visStatistics)
test=visstat(trees,"Girth","Height",conf.level=0.1)
test=visstat(trees,"Girth","Height",conf.level=0.99)
test=visstat(trees,"Girth","Height",conf.level=0.9)
test=visstat(trees,"Girth","Height",conf.level=0.7)
source('~/OneDrive - Hochschule Luzern/Forschung/check_error_bands.R', echo=TRUE)
# 1. Add predictions
suppressWarnings(pred.int_prediction <- predict(model, interval = "prediction"))
conf.int_prediction <- predict(model, interval = "confidence")
mydata <- cbind(cars, pred.int)
# 2. Regression line + confidence intervals
library("ggplot2")
p <- ggplot(mydata, aes(speed, dist)) +
geom_point() +
stat_smooth(method = lm)
source('~/OneDrive - Hochschule Luzern/Forschung/check_error_bands.R', echo=TRUE)
?stat_smooth
test=visstat(trees,"Girth","Height",conf.level=0.7)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
library(visStatistics)
test=visstat(trees,"Girth","Height",conf.level=0.7)
test=visstat(cars,"dist","speed",conf.level=0.7)
test=visstat(cars,"dist","speed",conf.level=0.99)
test
source('~/OneDrive - Hochschule Luzern/Forschung/check_error_bands.R', echo=TRUE)
test=visstat(cars,"dist","speed",conf.level=0.7)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
test=visstat(cars,"dist","speed",conf.level=0.7)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
test=visstat(cars,"dist","speed",conf.level=0.7)
library(visStatistics)
test=visstat(cars,"dist","speed",conf.level=0.7)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
test=visstat(cars,"dist","speed",conf.level=0.7)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
test=visstat(cars,"dist","speed",conf.level=0.7)
library(visStatistics)
mtext(
expression(
" regression: y = ax + b \n confidence level = ",
conf.level,
", a = ",
signif(reg$coefficients[2], 2),
", conf. interval [",
signif(conf_intervall_regression[2, 1], 2),
",",
signif(conf_intervall_regression[2, 2], 2),
"]",
", p = ",
signif(s$coefficients[2, 4], 2),
"\n b = ",
signif(reg$coefficients[1], 2),
", conf. interval [",
signif(conf_intervall_regression[1, 1], 2),
",",
signif(conf_intervall_regression[1, 2], 2),
"]",
", p = ",
signif(s$coefficients[1, 4], 2),
"\n adjusted R^2" ,
signif(s$adj.r.squared, 2)
))
x=c(1,100)
y=c(1,100)
plot(x,y)
source('~/OneDrive - Hochschule Luzern/Forschung/check_error_bands.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(visStatistics)
test=visstat(cars,"dist","speed",conf.level=0.7)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
test=visstat(cars,"dist","speed",conf.level=0.7)
test=visstat(cars,"dist","speed",conf.level=0.9)
library(visStatistics)
test=visstat(cars,"dist","speed",conf.level=0.9)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
test=visstat(cars,"dist","speed",conf.level=0.9)
library(visStatistics)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
library(visStatistics)
test=visstat(cars,"dist","speed",conf.level=0.9)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
library(visStatistics)
test=visstat(cars,"dist","speed",conf.level=0.9)
library(visStatistics)
test=visstat(cars,"dist","speed",conf.level=0.9)
library(visStatistics)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/detach_package.R', echo=TRUE)
detach_package("visStatistics")
saveRDS(version = 2)
library(visStatistics)
test=visstat(cars,"dist","speed",conf.level=0.9)
devtools::load_all(".")
test=visstat(cars,"dist","speed",conf.level=0.9)
library(visStatistics)
test=visstat(cars,"dist","speed",conf.level=0.9)
test
library(visStatistics)
test=visstat(cars,"dist","speed",conf.level=0.9)
cars
?mtcars
data()
?trees
?cars
library(visStatistics)
test=visstat(cars,"dist","speed",conf.level=0.9)
test
test$anderson_darling_test_residuals
?cars
linreg_cars=visstat(cars,"dist","speed",conf.level=0.99)
linreg_cars$shapiro_test_residuals
?iris
linreg_cars
linreg_cars$anderson_darling_test_residuals
?cars
?iris
vis_anova_assumptions(cars,"dist","speed",conf.level=0.99)
vis_anova_assumptions(cars,"dist","speed")
vis_anova_assumptions(iris$Petal.Width,iris$Species)
data()
ChickWeight
test=visstat(ChickWeight,"weight","time",conf.level=0.9)
test=visstat(chickWeight,"weight","time",conf.level=0.9)
test=visstat(ChickWeight,"weight","time",conf.level=0.9)
hickWeight
ChickWeight
test=visstat(ChickWeight$weight,ChickWeight$time,conf.level=0.9)
as.data.frame(ChickWeight)
test=visstat(as.data.frame(ChickWeight),"weight","time",conf.level=0.9)
library(visStatistics)
vis_anova_assumptions(iris$Petal.Width,iris$Species)
visstat(iris$Petal.Width,iris$Species)
library(visStatistics)
inreg_cars=visstat(cars,"dist","speed",conf.level=0.99)
inewf
inreg
inreg_cars=visstat(cars,"dist","speed",conf.level=0.99)
library(visStatistics)
inreg_cars=visstat(cars,"dist","speed",conf.level=0.99)
library(visStatistics)
?vis_anova_assumptions
anova_npk=visstat(npk,"yield","block")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/vis_anova_assumptions.R', echo=TRUE)
visstat(iris,"Petal.Width", "Species")
install_github("shhschilling/visStatistics")
library(devtools)
install_github("shhschilling/visStatistics")
library(visStatistics)
visstat(mtcars,"mpg","am")`
``
visstat(mtcars,"mpg","am")
test=visstat(mtcars,"mpg","am")
test
ttestStatistics=visstat(mtcars,"mpg","am")
ttestStatistics
library(visStatistics)
an = aov(samples ~ fact)
library(visStatistics)
anova_npk=visstat(npk,"yield","block")
one.way <- oneway(InsectSprays$spray, y = InsectSprays$count, posthoc = 'games-howell')
install.libraries("userfriendlyscience")
install.packages("userfriendlyscience")
library(visStatistics)
anova_npk=visstat(npk,"yield","block")
library(visStatistics)
anova_npk=visstat(npk,"yield","block")
?oneway.test
?tuk
TukeyHSD
?TukeyHSD
library(visStatistics)
anova_npk=visstat(npk,"yield","block")
library(visStatistics)
anova_npk=visstat(npk,"yield","block")
anova_npk
post hoc analysis after one way test
library(userfriendlyscience)
library(visStatistics)
anova_npk=visstat(npk,"yield","block")
visstat(InsectSprays, "count", "spray")
InsectSprays
?InsectSprays
visstat(InsectSprays, "count", "spray")
InsectSprays2=InsectSprays
InsectSprays2$count=sqrt(InsectSprays$count)
InsectSprays2
visstat(InsectSprays2, "count", "spray")
InsectSprays2$count=sqrt(InsectSprays$count)
InsectSprays_tr=InsectSprays
InsectSprays_tr$count=sqrt(InsectSprays$count)
visstat(InsectSprays_tr, "count", "spray")
InsectSprays_tr=InsectSprays
InsectSprays_tr$count=sqrt(InsectSprays$count)
visstat(InsectSprays_tr, "count", "spray")
InsectSprays2$count=sqrt(InsectSprays$count)
InsectSprays_tr=InsectSprays
InsectSprays_tr$count=sqrt(InsectSprays$count)
visstat(InsectSprays_tr, "count", "spray")
test=visstat(InsectSprays_tr, "count", "spray")
test
label_aov="ANOVA"
label_aov
pippo=list(label_aov=c(1,2,3))
pippo
string(label_aov)
char.expand(label_aov)
which(label_aov)
typeof(label_aov)
typeof("adjusted_p_values_tuk")
class("adjusted_p_values_tuk")
class(label_aov)
p_bart=0.5
if (p_bart>1-conf.level){
p_aov=summaryAnova[[1]][["Pr(>F)"]]
label_aov="ANOVA"
summarystat=summaryAnova
}else{
p_aov=oneway$p.value
label_aov="One-Way test"
summarystat=oneway
}
conf.level=0.95
if (p_bart>1-conf.level){
p_aov=summaryAnova[[1]][["Pr(>F)"]]
label_aov="ANOVA"
summarystat=summaryAnova
}else{
p_aov=oneway$p.value
label_aov="One-Way test"
summarystat=oneway
}
test
library(visStatistics)
InsectSprays_tr=InsectSprays
InsectSprays_tr$count=sqrt(InsectSprays$count)
visstat(InsectSprays_tr, "count", "spray")
p_aov
label_aov
InsectSprays_tr=InsectSprays
InsectSprays_tr$count=sqrt(InsectSprays$count)
visstat(InsectSprays_tr, "count", "spray")
InsectSprays_tr=InsectSprays
InsectSprays_tr$count=sqrt(InsectSprays$count)
visstat(InsectSprays_tr, "count", "spray")
InsectSprays_tr=InsectSprays
InsectSprays_tr$count=sqrt(InsectSprays$count)
visstat(InsectSprays_tr, "count", "spray")
label_aov
InsectSprays_tr=InsectSprays
InsectSprays_tr$count=sqrt(InsectSprays$count)
visstat(InsectSprays_tr, "count", "spray")
test=visstat(InsectSprays_tr, "count", "spray")
test
label_aov="hans"
list(label_aov=1)
list(as.character(label_aov)=1)
list(label_aov=1)
label_apv
label_aov
str(label_aov)
list(str(label_aov)=1)
list(str(label_aov) = 1)
label_aov="hans"
str(label_aov)
test=str(label_aov)
list(test = 1)
library(visStatistics)
test=visstat(InsectSprays_tr, "count", "spray")
test
library(visStatistics)
test=visstat(InsectSprays_tr, "count", "spray")
library(visStatistics)
test=visstat(InsectSprays_tr, "count", "spray")
library(visStatistics)
test=visstat(InsectSprays_tr, "count", "spray")
library(visStatistics)
test=visstat(InsectSprays_tr, "count", "spray")
library(visStatistics)
test=visstat(InsectSprays_tr, "count", "spray")
library(visStatistics)
install.packags("rstatix")
install.packages("rstatix")
source('~/OneDrive - Hochschule Luzern/Forschung/post-hoc.tests.R', echo=TRUE)
games_howell_test(TootGrowth$len ~ TootGrowth$dose)
games_howell_test(ToothGrowth$len ~ ToothGrowth$dose)
games_howell_test(TootGrowth$len ~ TootGrowth$dose)
ToothGrowth %>% games_howell_test(len ~ dose)
games_howell_test(ToothGrowth,len ~ dose)
ToothGrowth %>% games_howell_test(len ~ dose)
TukeyHSD(ToothGrowth,len ~ dose)
?TukeyHSD
TukeyHSD(aov(ToothGrowth),len ~ dose)
TukeyHSD(aov(ToothGrowth)
)
TukeyHSD(aov(ToothGrowth, len ~ dose)
)
aov(ToothGrowth, len ~ dose))
aov(ToothGrowth, len ~ dose)
aov(ToothGrowth$len ~ TooGrowth$dose)
aov(ToothGrowth$len ~ ToothGrowth$dose)
test=aov(ToothGrowth$len ~ ToothGrowth$dose)
Tuckey(test)
TukeyHSDkey(test)
TukeyHSD(test)
library(visStatistics)
?wilcox.test
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/vis_anova_assumptions.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
linreg_cars=visstat(cars,"dist","speed")
linreg_cars=bartlett.test(cars,"dist","speed")
linreg_cars
anova = aov(samples ~ fact)
anova = aov(cars$dist~cars$speed)
anova
lm = lm(cars$dist~cars$speed)
lm
anova = aov(cars$dist~cars$speed)
summary(anova)
lm
summary(lm)
library(visStatistics)
linreg_cars=visstat(cars,"dist","speed")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/detach_package.R', echo=TRUE)
detach_package("visSatistics")
library(visStatistics)
linreg_cars=visstat(cars,"dist","speed")
library(visStatistics)
linreg_cars=visstat(cars,"dist","speed")
library(visStatistics)
linreg_cars=visstat(cars,"dist","speed")
?shapiro.test
vis_normality_assumptions(
cars$speed,
cars$dist)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
vis_normality_assumptions(
cars$speed,
cars$dist)
library(nortest)
vis_normality_assumptions(
cars$speed,
cars$dist)
linreg_cars=visstat(cars,"dist","speed")
linreg_cars
visstat(trees,"Girth","Height",conf.level=0.99)
test1=isstat(trees,"Girth","Height",conf.level=0.99)
test1=isstat(trees,"Girth","Height",conf.level=0.95)
test1=visstat(trees,"Girth","Height",conf.level=0.95)
test2=lm(trees,"Girth"~"Height")
test2=lm(trees,Girth~Height)
test2=lm(trees$Girth~trees$Height)
test2
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
test2=lm(trees$Girth~trees$Height)
test2
test2=lm(trees$Girth~trees$Height)
test1=visstat(trees,"Girth","Height",conf.level=0.95)
test1
test1=visstat(trees,"Girth","Height",conf.level=0.95)
visstat(trees,"Girth","Height",conf.level=0.95)
test1=visstat(trees,"Girth","Height",conf.level=0.95)
test1
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
test1=visstat(trees,"Girth","Height",conf.level=0.95)
?shapiro.test
shapiro.test(rstandard(lm(trees$Girth ~ trees$Height)))
lm(trees$Girth ~ trees$Height)
ad.test(rstandard(lm(trees$Girth ~ trees$Height)))
lm(trees$Girth ~ trees$Height)
linreg_cars=visstat(cars,"dist","speed")
?trees
linreg_cars=visstat(cars,"dist","speed",conf.level=0.99)
linreg_cars$anderson_darling_test_residuals
linreg_cars$shapiro_test_residuals
linreg_cars=visstat(trees,"Height","Girth",conf.level=0.9)
anova_npk=visstat(npk,"yield","block")
library(visStatistics)
visstat(blackBrownHazelGreen,"Hair","Eye",graphicsoutput = "png",plotDirectory=tempdir())
HairEyeColorMaleFisher = HairEyeColor[,,1]
#slicing out a 2 x2 contingency table
blackBrownHazelGreen = HairEyeColorMaleFisher[1:2,3:4]
blackBrownHazelGreen = counts_to_cases(as.data.frame(blackBrownHazelGreen));
fisher_stats=visstat(blackBrownHazelGreen,"Hair","Eye")
fisher_stats #print out summary statistics
visstat(blackBrownHazelGreen,"Hair","Eye",graphicsoutput = "png",plotDirectory=tempdir())
library(visStatistics)
linreg_cars=visstat(trees,"Height","Girth",conf.level=0.9)
saveGraphVisstat(fileName = )
?saveGraphVisstat
?openGraphCairo
visstat(counts_to_cases(as.data.frame(HairEyeColor[,,1])),"Hair","Eye")
library(visStatistics)
tools::check_packages_in_dir(reverse = list())
library(visStatistics)
tools::check_packages_in_dir(reverse = list())
library(visStatistics)
tools::package_dependencies(reverse = TRUE)
library(visStatistics)
counts_to_cases(as.data.frame(HairEyeColor[,,1])
)
counts_to_cases(as.data.frame(HairEyeColor))
typeof(HairEyeColor)
?HairEyeColor
HairEyeColorDataframe=counts_to_cases(as.data.frame(HairEyeColor[,,1]))
HairEyeColorDataFrame=counts_to_cases(as.data.frame(HairEyeColor[,,1]))
HairEyeColorDataFrame
HairEyeColorDataFrame=counts_to_cases(as.data.frame(HairEyeColor))
HairEyeColorDataFrame
visstat(HairEyeColorDataFrame,"Hair","Eye")
library(visStatistics)
visstat(HairEyeColorDataFrame,"Hair","Eye")
visstat(counts_to_cases(as.data.frame(HairEyeColor),"Hair","Eye")
)
visstat(counts_to_cases(as.data.frame(HairEyeColor),"Hair","Eye"))
as.data.frame(HairEyeColor)
HairEyeColorDataFrame=counts_to_cases(as.data.frame(HairEyeColor))
visstat(HairEyeColorDataFrame,"Hair","Eye")
library(visStatistics)
?npk
npk
counts_to_cases(npk)
?npk
npk.aov <- aov(yield ~ block + N*P*K, npk)
?Titanic
Titanic
counts_to_cases(Titanic)
Titanic
apply(Titanic, c(3, 4), sum)
count_to_cases(apply(Titanic, c(3, 4), sum))
counts_to_cases(apply(Titanic, c(3, 4), sum))
apply(Titanic, c(3, 4), sum)
Titanic(c3,4)
Titanic[,3)
Titanic[,3]
Titanic
apply(Titanic, c(3, 4), sum)
