library(visStatistics)
# linear regression: trees data set:----
visstat(trees,"Girth","Height")
#linear regression saving both statistics and generated plot:
#Graph is stored  to regression_Girth_Height.png in working directory;
# If graphicsoutput parameter is set, all plots are stored in the working directory
# following the naming convention
#"statisticalTestName_varsample_varfactor.graphicsoutput"
linear_regression_trees = visstat(trees,"Girth","Height",graphicsoutput = "png")
#display stats of linear regression
linear_regression_trees
#Welch two sample t.test: mtcars data set ----
mtcars$am = as.factor(mtcars$am)
welch_cars=visstat(mtcars,"mpg","am")
welch_cars
#ANOVA: InsectSprays  data set----
#ANOVA
anova_insects=visstat(InsectSprays,"count","spray")
install.packages("multcompView")
#ANOVA: InsectSprays  data set----
#ANOVA
anova_insects=visstat(InsectSprays,"count","spray")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
#ANOVA: InsectSprays  data set----
#ANOVA
anova_insects=visstat(InsectSprays,"count","spray")
?multcompLetters
install.packages("mmultcompView")
install.packages("multcompView")
library(visStatistics)
#ANOVA: InsectSprays  data set----
#ANOVA
anova_insects=visstat(InsectSprays,"count","spray")
?multcompLetters
if3 <- c(FALSE, FALSE, TRUE)
names(dif3) <- c("A-B", "A-C", "B-C")
dif3L <- multcompLetters(dif3)
if3 <- c(FALSE, FALSE, TRUE)
names(dif3) <- c("A-B", "A-C", "B-C")
dif3L <- multcompLetters(dif3)
dif3 <- c(FALSE, FALSE, TRUE)
names(dif3) <- c("A-B", "A-C", "B-C")
dif3L <- multcompLetters(dif3)
def3
dif3
dif3L
library(multcompView)
dif3 <- c(FALSE, FALSE, TRUE)
names(dif3) <- c("A-B", "A-C", "B-C")
dif3L <- multcompLetters(dif3)
dif3L
library(visStatistics)
##Examples------
library(visStatistics)
# linear regression: trees data set:----
visstat(trees,"Girth","Height")
#linear regression saving both statistics and generated plot:
#Graph is stored  to regression_Girth_Height.png in working directory;
# If graphicsoutput parameter is set, all plots are stored in the working directory
# following the naming convention
#"statisticalTestName_varsample_varfactor.graphicsoutput"
linear_regression_trees = visstat(trees,"Girth","Height",graphicsoutput = "png")
#remove png from working directory
file.remove("regression_Girth_Height.png")
#display stats of linear regression
linear_regression_trees
#Welch two sample t.test: mtcars data set ----
mtcars$am = as.factor(mtcars$am)
welch_cars=visstat(mtcars,"mpg","am")
welch_cars
#ANOVA: InsectSprays  data set----
#ANOVA
anova_insects=visstat(InsectSprays,"count","spray")
#Welch two sample t.test: InsectSprays
# select sprays A and B
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
#Welcht-t-Test
visstat(InsectSpraysAB,"count","spray")
visstat(iris,"Petal.Width", "Species")
visstat(ChickWeight,"weight", "Diet")
#Wilcoxon rank sum test: TootGrowth ----
visstat(ToothGrowth,"len", "supp")
#Chi squqred, mosaic plots with Titanic data set----
#install.packages("titanic")
#example categorical data,
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
#Pearsons Chi squared, mosaic plot with Pearson's residuals
visstat(titanic_train,"Survived","Pclass")
?mosaic
library(vcd)
#Pearsons Chi squared, mosaic plot with Pearson's residuals
visstat(titanic_train,"Survived","Pclass")
#Chi squqred, mosaic plots with HairEyeColor----
#HairEyeColor data set: Pearsons Chi squared, mosaic plot with Pearson's residuals
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
HairEyeColorMaleFisher =  HairEyeColor[,,1]
#replace cells to smaller values to enforce Cochran's rule
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10] = 4
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher));
visstat(HairEyeColorMaleFisher,"Hair","Eye")
#2x2 contingency tables....
HairEyeColorMaleFisher = HairEyeColor[,,1]
#slicing out a 2 x2 contingency table
blackBrownHazelGreen = HairEyeColorMaleFisher[1:2,3:4]
fishertest = blackBrownHazelGreen
blackBrownHazelGreen = counts_to_cases(as.data.frame(blackBrownHazelGreen));
visstat(blackBrownHazelGreen,"Hair","Eye")
##Examples------
library(visStatistics)
# linear regression: trees data set:----
visstat(trees,"Girth","Height")
visstat(blackBrownHazelGreen,"Hair","Eye")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
# linear regression: trees data set:----
visstat(trees,"Girth","Height")
#display stats of linear regression
linear_regression_trees
#Welch two sample t.test: mtcars data set ----
mtcars$am = as.factor(mtcars$am)
welch_cars=visstat(mtcars,"mpg","am")
welch_cars
#ANOVA: InsectSprays  data set----
#ANOVA
anova_insects=visstat(InsectSprays,"count","spray")
#Welch two sample t.test: InsectSprays
# select sprays A and B
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
#Welcht-t-Test
visstat(InsectSpraysAB,"count","spray")
visstat(iris,"Petal.Width", "Species")
visstat(ChickWeight,"weight", "Diet")
#Wilcoxon rank sum test: TootGrowth ----
visstat(ToothGrowth,"len", "supp")
#Chi squqred, mosaic plots with Titanic data set----
#install.packages("titanic")
#example categorical data,
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
#Pearsons Chi squared, mosaic plot with Pearson's residuals
visstat(titanic_train,"Survived","Pclass")
#Chi squqred, mosaic plots with HairEyeColor----
#HairEyeColor data set: Pearsons Chi squared, mosaic plot with Pearson's residuals
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
HairEyeColorMaleFisher =  HairEyeColor[,,1]
#replace cells to smaller values to enforce Cochran's rule
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10] = 4
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher));
visstat(HairEyeColorMaleFisher,"Hair","Eye")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
# linear regression: trees data set:----
visstat(trees,"Girth","Height")
# If graphicsoutput parameter is set, all plots are stored in the working directory
# following the naming convention
#"statisticalTestName_varsample_varfactor.graphicsoutput"
linear_regression_trees=visstat(trees,"Girth","Height",graphicsoutput = "png")
#display stats of linear regression
linear_regression_trees
#Welch two sample t.test: mtcars data set ----
mtcars$am = as.factor(mtcars$am)
welch_cars=visstat(mtcars,"mpg","am")
welch_cars
#ANOVA: InsectSprays  data set----
#ANOVA
anova_insects=visstat(InsectSprays,"count","spray")
#Welch two sample t.test: InsectSprays
# select sprays A and B
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
#Welcht-t-Test
visstat(InsectSpraysAB,"count","spray")
visstat(iris,"Petal.Width", "Species")
visstat(ChickWeight,"weight", "Diet")
#Wilcoxon rank sum test: TootGrowth ----
visstat(ToothGrowth,"len", "supp")
#Wilcoxon rank sum test: TootGrowth ----
visstat(ToothGrowth,"len", "supp")
#Chi squqred, mosaic plots with Titanic data set----
#install.packages("titanic")
#example categorical data,
library(titanic)
visstat(ChickWeight,"weight", "Diet")
#Wilcoxon rank sum test: TootGrowth ----
visstat(ToothGrowth,"len", "supp")
#Kruskal-Wallis test: iris----
visstat(iris,"Petal.Width", "Species")
#Kruskal-Wallis test: ChickWeight ----
visstat(ChickWeight,"weight", "Diet")
#Kruskal-Wallis test: ChickWeight ----
visstat(ChickWeight,"weight", "Diet")
#Wilcoxon rank sum test: TootGrowth ----
visstat(ToothGrowth,"len", "supp")
#Chi squqred, mosaic plots with Titanic data set----
#install.packages("titanic")
#example categorical data,
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
#Pearsons Chi squared, mosaic plot with Pearson's residuals
visstat(titanic_train,"Survived","Pclass")
#Chi squqred, mosaic plots with HairEyeColor----
#HairEyeColor data set: Pearsons Chi squared, mosaic plot with Pearson's residuals
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
HairEyeColorMaleFisher =  HairEyeColor[,,1]
#replace cells to smaller values to enforce Cochran's rule
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10] = 4
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher));
visstat(HairEyeColorMaleFisher,"Hair","Eye")
file.remove("regression_Girth_Height.png")
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
interactive()
library(visStatistics)
linear_regression_trees=visstat(trees,"Girth","Height",graphicsoutput = "png") ;
if (!interactive()) file.remove("regression_Girth_Height.png")
file.remove("regression_Girth_Height.png")
linear_regression_trees
library(visStatistics)
source('~/Documents/workspace/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
library(visStatistics)
221/5
164/3
247/6
167.08*1.1
167.08*1.15
library(visStatistics)
now <- tryCatch({
foo <- suppressWarnings(readLines("http://worldclockapi.com/api/json/utc/now",
warn = FALSE))
}
)
Sys.setenv('_R_CHECK_SYSTEM_CLOCK_' = 0)
167*1.05
1/12
tempdir()
tempfile()
60/16000
60/16000*167.07
(1+60/16000)*167.07
150000*0.05
library(visStatistics)
visstat(trees,"Girth","Height"
)
visstat(iris,"Petal.Width", "Species")
test=visstat(iris,"Petal.Width", "Species")
isstat(iris,"Petal.Width", "Species")
visstat(iris,"Petal.Width", "Species")
library(visStatistics)
visstat(iris,"Petal.Width", "Species")
?multcompLetters
iinstall.packages("multcompView"")
)
""
install.packages("multcompView")
visstat(iris,"Petal.Width", "Species")
exit
library(visStatistics)
visstat(iris,"Petal.Width", "Species")
install.packages("multcompView")
visstat(iris,"Petal.Width", "Species")
library(visStatistics)
visstat(iris,"Petal.Width", "Species")
library(multcompView)
visstat(iris,"Petal.Width", "Species")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
visstat(iris,"Petal.Width", "Species")
?rstandard
anova(iris)
anova(iris$Petal.Width,iris$Species)
aov(iris$Petal.Width,iris$Species)
aov(iris)
iris
iris$Petal.Width
aov(iris$Petal.Width,iris$Species)
aov(iris$Petal.Width;iris$Species)
?aiv
?aov
aov(iris$Petal.Width~iris$Species)
test=aov(iris$Petal.Width~iris$Species)
rstandard(test)
test
test[[1]]
test[[2]]
print(test)
summary(test)
?rstandard
rstandard(test)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
test=aov(iris$Petal.Width~iris$Species)
aov(iris$Petal.Width,iris$Species)
aov(iris$Petal.Width~iris$Species)
visstat(iris,"Petal.Width", "Species")
visstat(iris,"Species", "Petal.Width")
visstat(iris,"Petal.Width", "Species")
iris$Petal.Width
ad.test(rnorm(100, mean = 5, sd = 3))
install.packages("nortest")
ad.test(rnorm(100, mean = 5, sd = 3))
install.packages("nortest")
ad.test(rnorm(100, mean = 5, sd = 3))
library("nortest")
ad.test(rnorm(100, mean = 5, sd = 3))
install.packages("nortest")
library("nortest")
ad.test(rnorm(100, mean = 5, sd = 3))
ad.test(rnorm(10, mean = 5, sd = 3))
ad.test(rnorm(50, mean = 5, sd = 3))
?rnorm
?ad.test
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
visstat(iris,"Petal.Width", "Species")
anova=aov(iris$Petal.Width~iris$Species)
anova
aov
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
d_test = ad.test(rstandard(anova))
ad_test = ad.test(rstandard(anova))
ad_test
ad_test[[1]]
ad_test[[2]]
ad_test[[3]]
ad_test$p.value
p_AD = signif(ad_test$p.value, 3)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
list=c(1,2,3)
ad.test(list)
pippo=ad.test(list)
pippo
pippo=shapiro.test(list)
pippo
length(anova)
?if
)
ad_test="Anderson-Darling test requires sample size of at lest 7."
}
ad_test="Anderson-Darling test requires sample size of at lest 7."
ad_test
p_AD=NA
p_AD
type(p_AD)
which(p_AD)
is.na(p_AD)
signif(p_AD, 2)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
library(nstat)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
library(visStatistics)
library(nortest)
library(multcompView)
visstat(iris,"Petal.Width", "Species")
?bartlett.test
?ad.test
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
?bartlett
?bartlett.test
visstat(iris,"Petal.Width", "Species")
NA
NA>0.05
is.true(NA>0.04)
is.na(NA>0.04)
(NA>0.04)
(NA>0.05)
?shapiro
visstat(iris,"Petal.Width", "Species")
library(visStatistics)
visstat(iris,"Petal.Width", "Species")
library(visStatistics)
visstat(iris,"Petal.Width", "Species")
library(nortest)
library(visStatistics)
visstat(iris,"Petal.Width", "Species")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
?ad.test
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
visstat(iris,"Petal.Width", "Species")
library(multcomLetters)
library("multcomLetters")
library("multcompLetters")
library("multcompView")
visstat(iris,"Petal.Width", "Species")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
visstat(iris,"Petal.Width", "Species")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
visstat(iris,"Petal.Width", "Species")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
library(visStatistics)
visstat(iris,"Petal.Width", "Species")
test1=c(1,2,3)
test2=c(2,3,4)
vis_anova_assumptions(test1,test2)
test1=samples
sammples=test1
samples=test1
fact=test2
anova = aov(samples ~ fact)
summary_anova = summary(anova)
anova
shapiro_test = shapiro.test(rstandard(anova))
p_SH = shapiro_test$p.value
bartlett_test = bartlett.test(samples ~ fact)
p_bart = bartlett_test$p.value
ad.test
ad_test = ad.test(rstandard(anova))
bartlett.test(samples ~ fact)
library(visStatistics)
detach_package("visStatistics")
library(visStatistics)
visstat(iris,"Petal.Width", "Species")
?ad.test
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
detach_package("visStatistics")
library(visStatistics)
detach_package("visStatistics")
visstat(iris,"Petal.Width", "Species")
library("nortest")
visstat(iris,"Petal.Width", "Species")
library("multcompView")
visstat(iris,"Petal.Width", "Species")
test=visstat(iris,"Petal.Width", "Species")
test
which(test)
type(test)
class(test)
typeof(test)
length(test)
test[[1]]
test[[2]]
?invisible
visstat(iris,"Petal.Width", "Species")
visstat(trees,"Girth","Height")
linear_regression_trees=visstat(trees,"Girth","Height",graphicsoutput = "png") ;
linear_regression_trees
if (!interactive()) file.remove("regression_Girth_Height.png")
file.remove("regression_Girth_Height.png")
inear_regression_trees=visstat(trees,"Girth","Height",graphicsoutput = "png") ;
linear_regression_trees=visstat(trees,"Girth","Height",graphicsoutput = "png") ;
?invisible
stats_lin_reg=visstat(trees,"Girth","Height")
stats_ling_reg
stats_lin_reg
stats_lin_reg=visstat(trees,"Girth","Height") ;
visstat(trees,"Girth","Height")
stats_lin_reg=visstat(trees,"Girth","Height") ;
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
interactive()
!interactive()
visstat(trees,"Girth","Height")
stats_lin_reg=visstat(trees,"Girth","Height")
stats_lin_reg
visstat(trees,"Girth","Height",graphicsoutput = "png") ;
file.remove("regression_Girth_Height.png")
tempfile()
?ad.test
ad.test(rnorm(100, mean = 5, sd = 3))
pippo=ad.test(rnorm(100, mean = 5, sd = 3))
pippo
pippo[[1]]
pippo[[2]]
pippo[[3]]
pippo[[4]]
pippo[[5]]
pippo=ad.test(rnorm(100, mean = 5, sd = 3))
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
visstat(trees,"Girth","Height",graphicsoutput = "png")
lm(trees$Girth~tress$Height)
lm(trees$Girth~trese$Height)
lm(trees$Girth~trees$Height)
y=trees$Girth
x=trees$Height
KS = ks.test(rstandard(lm(y ~ x)), pnorm, mean(rstandard(lm(y ~ x))), sd(rstandard(lm(y ~ x))))
KS
AD = ad.test(rstandard(lm(y ~ x))
)
AD
AD = shapirot.test(rstandard(lm(y ~ x))
)
AD = shapiro.test(rstandard(lm(y ~ x))
)
AD
AD = lillie.test(rstandard(lm(y ~ x))
)
AD
AD = lillie.test(rstandard(lm(y ~ x))
)
KS = lillie.test(rstandard(lm(y ~ x)))
KS
visstat(iris,"Petal.Width", "Species")
y=iris$Petal.Width
x=iris$Species
KS = lillie.test(rstandard(lm(y ~ x)))
lillie.test(rstandard(lm(y ~ x)))
ad.test(rstandard(lm(y ~ x)))
shapiro.test(rstandard(lm(y ~ x)))
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
visstat(iris,"Petal.Width", "Species")
visstat(InsectSprays,"count","spray")
visstat(ToothGrowth,"len", "supp")
visstat(mtcars,"mpg","am")
test=visstat(mtcars,"mpg","am")
test
?t.test
visstat(counts_to_cases(as.data.frame(HairEyeColor[,,1])),"Hair","Eye")
