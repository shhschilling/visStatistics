visstat(dat,"Sex", "Grade")
dat <- data.frame(
Sex = as.factor(c(rep("Girl", 12), rep("Boy", 12))),
Grade = c(
19, 18, 9, 17, 8, 7, 16, 19, 20, 9, 11, 18,
16, 5, 15, 2, 14, 15, 4, 7, 15, 6, 7, 14
)
visstat(dat,"Sex", "Grade")
library(visStatistics)
dat <- data.frame(
Sex = as.factor(c(rep("Girl", 12), rep("Boy", 12))),
Grade = c(
19, 18, 9, 17, 8, 7, 16, 19, 20, 9, 11, 18,
16, 5, 15, 2, 14, 15, 4, 7, 15, 6, 7, 14
)
visstat(dat,"Sex", "Grade")
library(visStatistics)
dat <- data.frame(
Sex = as.factor(c(rep("Girl", 12), rep("Boy", 12))),
Grade = c(
19, 18, 9, 17, 8, 7, 16, 19, 20, 9, 11, 18,
16, 5, 15, 2, 14, 15, 4, 7, 15, 6, 7, 14
)
visstat(dat,"Sex", "Grade")
library(visStatistics)
dat <- data.frame(
Sex = as.factor(c(rep("Girl", 12), rep("Boy", 12))),
Grade = c(
19, 18, 9, 17, 8, 7, 16, 19, 20, 9, 11, 18,
16, 5, 15, 2, 14, 15, 4, 7, 15, 6, 7, 14
)
visstat(dat,"Sex", "Grade")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/only_graphical device.R', echo=TRUE)
dat <- data.frame(
Sex = as.factor(c(rep("Girl", 12), rep("Boy", 12))),
Grade = c(
19, 18, 9, 17, 8, 7, 16, 19, 20, 9, 11, 18,
16, 5, 15, 2, 14, 15, 4, 7, 15, 6, 7, 14
)
visstat(dat,"Sex", "Grade")
#Wilcoxon rank sum test: ToothGrowth ----
visstat(ToothGrowth,"len", "supp")
dat
visstat(dat,"Sex", "Grade")
is.data.frame(dat
)
visstat(dat,"Grade", "Sex")
#Wilcoxon rank sum test: ToothGrowth ----
visstat(ToothGrowth,"len", "supp")
visstat(ToothGrowth,"len", "supp",graphicsoutput = "png",plotDirectory=filedir)
visstat(ToothGrowth,"len", "supp",graphicsoutput = "pdf",plotDirectory=filedir)
#Wilcoxon rank sum test:Grades by Sex
dat <- data.frame(
Sex = as.factor(c(rep("Girl", 12), rep("Boy", 12))),
Grade = c(
19, 18, 9, 17, 8, 7, 16, 19, 20, 9, 11, 18,
16, 5, 15, 2, 14, 15, 4, 7, 15, 6, 7, 14
)
visstat(dat,"Grade", "Sex")
#Chi squqred, mosaic plots with Titanic data set----
#install.packages("titanic")
#example categorical data,
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
#Pearsons Chi squared, mosaic plot with Pearson's residuals
visstat(titanic_train,"Survived","Pclass")
#Chi squared, mosaic plots with HairEyeColor----
#HairEyeColor data set: Pearsons Chi squared, mosaic plot with Pearson's residuals
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
# linear regression: trees data set:----
visstat(trees,"Girth","Height")
visstat(dat,"Grade", "Sex")
# linear regression: trees data set:----
visstat(trees,"Girth","Height")
visstat(dat,"Grade", "Sex")
#display stats of linear regression
linear_regression_trees
# linear regression: trees data set:----
visstat(trees,"Girth","Height")
#Welch two sample t.test: mtcars data set ----
mtcars$am = as.factor(mtcars$am)
#Chi squqred, mosaic plots with Titanic data set----
#install.packages("titanic")
#example categorical data,
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
#Pearsons Chi squared, mosaic plot with Pearson's residuals
visstat(titanic_train,"Survived","Pclass")
visstat(HairEyeColorMale,"Hair","Eye")
visstat(ToothGrowth,"len", "supp")#wilcoxon
#error: old plots are not erased but overwritten
visstat(iris,"Petal.Width", "Species") #kruskal wallis testing normality assumptions generating two plots just overlayed first plot
#2x2 contingency tables---
HairEyeColorMaleFisher = HairEyeColor[,,1]
#slicing out a 2 x2 contingency table
blackBrownHazelGreen = HairEyeColorMaleFisher[1:2,3:4]
fishertest = blackBrownHazelGreen
blackBrownHazelGreen = counts_to_cases(as.data.frame(blackBrownHazelGreen));
visstat(blackBrownHazelGreen,"Hair","Eye")
#error: old plots are not erased but overwritten
visstat(iris,"Petal.Width", "Species") #kruskal wallis testing normality assumptions generating two plots just overlayed first plot
visstat(HairEyeColorMale,"Hair","Eye")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/test_and_visuals.R', echo=TRUE)
#2x2 contingency tables---
HairEyeColorMaleFisher = HairEyeColor[,,1]
#slicing out a 2 x2 contingency table
blackBrownHazelGreen = HairEyeColorMaleFisher[1:2,3:4]
fishertest = blackBrownHazelGreen
blackBrownHazelGreen = counts_to_cases(as.data.frame(blackBrownHazelGreen));
visstat(blackBrownHazelGreen,"Hair","Eye")
library(visStatistics)
detach_package(visStatistics)
library(visStatistics)
detach_package(visStatistics)
library(visStatistics)
detach_package("visStatistics")
library(visStatistics)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/only_graphical device.R', echo=TRUE)
library(mosaic)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/only_graphical device.R', echo=TRUE)
load(vcd)
library(vcd)
library(graphics)
library(grod)
mport multcompView
import multcompView
library(multcompView)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/only_graphical device.R', echo=TRUE)
library(nortest)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/only_graphical device.R', echo=TRUE)
?on.exit
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
library(cairo_pdf())
library(Cairo)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
warnings()
#Wilcoxon rank sum test: ToothGrowth ----
visstat(ToothGrowth,"len", "supp")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
res_chi=visstat(HairEyeColorMaleFisher,"Hair","Eye",graphicsoutput = "png",plotDirectory=filedir) #stores two graphics outputs
#replace cells to smaller values to enforce Cochran's rule
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10] = 4
#Chi squared, mosaic plots with HairEyeColor----
#HairEyeColor data set: Pearsons Chi squared, mosaic plot with Pearson's residuals
HairEyeColorMale = counts_to_cases(as.data.frame(HairEyeColor[,,1]));
visstat(HairEyeColorMale,"Hair","Eye")
HairEyeColorMaleFisher =  HairEyeColor[,,1]
#replace cells to smaller values to enforce Cochran's rule
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10] = 4
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher));
res_chi=visstat(HairEyeColorMaleFisher,"Hair","Eye") #test statistics stored in res_chi
res_chi=visstat(HairEyeColorMaleFisher,"Hair","Eye",graphicsoutput = "png",plotDirectory=filedir) #stores two graphics outputs
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
visstat(iris,"Petal.Width", "Species")
visstat(InsectSprays,"count","spray")
visstat(iris,"Petal.Width", "Species")
visstat(InsectSprays,"count","spray")
visstat(ToothGrowth,"len", "supp")
warnings()
mtcars$am=as.factor(mtcars$am)
visstat(mtcars,"mpg","am")
visstat(counts_to_cases(as.data.frame(HairEyeColor[,,1])),"Hair","Eye")
HairEyeColorMaleFisher=HairEyeColor[,,1]
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10]=4
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher))
visstat(HairEyeColorMaleFisher,"Hair","Eye")
HairEyeColorMaleFisher=HairEyeColor[,,1]
HairEyeColorMaleFisher[HairEyeColorMaleFisher<10]=4
HairEyeColorMaleFisher = counts_to_cases(as.data.frame(HairEyeColorMaleFisher))
visstat(HairEyeColorMaleFisher,"Hair","Eye")
HairEyeColorMale
HairEyeColorMaleFisher
visstat(HairEyeColorMaleFisher,"Hair","Eye")
#2x2 contingency tables----
HairEyeColorMaleFisher = HairEyeColor[,,1]
#slicing out a 2 x2 contingency table
blackBrownHazelGreen = HairEyeColorMaleFisher[1:2,3:4]
fishertest = blackBrownHazelGreen
blackBrownHazelGreen = counts_to_cases(as.data.frame(blackBrownHazelGreen));
visstat(blackBrownHazelGreen,"Hair","Eye")
HairEyeColor
blackBrownHazelGreen = HairEyeColorMaleFisher[1:2,3:4]
blackBrownHazelGreen = counts_to_cases(as.data.frame(blackBrownHazelGreen));
visstat(blackBrownHazelGreen,"Hair","Eye")
visstat(trees,"Girth","Height")
visstat(blackBrownHazelGreen,"Hair","Eye",graphicsoutput = "png",plotDirectory=tempdir())
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
isstat(blackBrownHazelGreen,"Hair","Eye",graphicsoutput = "png",plotDirectory=tempdir())
visstat(blackBrownHazelGreen,"Hair","Eye",graphicsoutput = "png",plotDirectory=tempdir())
tempdir()
isstat(blackBrownHazelGreen,"Hair","Eye")
visstat(blackBrownHazelGreen,"Hair","Eye")
getwd()
visstat(blackBrownHazelGreen,"Hair","Eye",graphicsoutput = "png",plotDirectory=getwd())
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
visstat(blackBrownHazelGreen,"Hair","Eye",graphicsoutput = "png",plotDirectory=getwd())
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
visstat(blackBrownHazelGreen,"Hair","Eye",graphicsoutput = "png",plotDirectory=getwd())
test=visstat(blackBrownHazelGreen,"Hair","Eye",graphicsoutput = "png",plotDirectory=getwd())
test
summary(test)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
tempdir()
file.remove(file.path(tempdir(),#chi_squared_Hair_Eye.png"))
file.remove(file.path(tempdir(),"chi_squared_Hair_Eye.png"))
)
))
""
file.remove(file.path(tempdir(),"chi_squared_Hair_Eye.png"))
file.remove(file.path(tempdir(),"mosaic_complete_Hair_Eye.png"))
visstat(blackBrownHazelGreen,"Hair","Eye",graphicsoutput = "png",plotDirectory=tempdir())
file.remove(file.path(tempdir(),"chi_squared_or_fisher_Hair_Eye.png"))
file.remove(file.path(tempdir(),"mosaic_complete_Hair_Eye.png"))
visstat(blackBrownHazelGreen,"Hair","Eye",graphicsoutput = "png",plotDirectory=tempdir())
##remove graphical output from plotDirectory
file.remove(file.path(tempdir(),"chi_squared_or_fisher_Hair_Eye.png"))
file.remove(file.path(tempdir(),"mosaic_complete_Hair_Eye.png"))
visstat(blackBrownHazelGreen,"Hair","Eye",graphicsoutput = "png",plotDirectory=tempdir())
file.remove(file.path(tempdir(),"mosaic_complete_Hair_Eye.png"))
file.remove(file.path(tempdir(),"chi_squared_or_fisher_Hair_Eye.png"))
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
#Pearsons Chi squared, mosaic plot with Pearson's residuals
visstat(titanic_train,"Survived","Pclass")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
#Chi squqred, mosaic plots with Titanic data set----
#install.packages("titanic")
#example categorical data,
library(titanic)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
#Pearsons Chi squared, mosaic plot with Pearson's residuals
visstat(titanic_train,"Survived","Pclass")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
library(visStatistics)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
is.null(plotname)
is.null(plotName)
plotName=NULL
is.null(plotName)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
#Welch two sample t.test: mtcars data set ----
mtcars$am = as.factor(mtcars$am)
welch_cars=visstat(mtcars,"mpg","am")
#store graphical output in different formats in directory defined in argument plotDirectory
welch_cars=visstat(mtcars,"mpg","am",graphicsoutput="png",plotDirectory=filedir)
#specify directory where plots will be stored. Without definition of plotDirectory: current working directory
filedir=getwd()
#store graphical output in different formats in directory defined in argument plotDirectory
welch_cars=visstat(mtcars,"mpg","am",graphicsoutput="png",plotDirectory=filedir,plotName="hans" )
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
#Welch two sample t.test: InsectSprays ----
# select sprays A and B
InsectSpraysAB <- InsectSprays[ which(InsectSprays$spray == 'A'
| InsectSprays$spray == 'B'), ]
InsectSpraysAB$spray = factor(InsectSpraysAB$spray)
#Welcht-t-Test
visstat(InsectSpraysAB,"count","spray") #plots not saved
visstat(InsectSpraysAB,"count","spray",graphicsoutput = "png",plotDirectory=filedir)
getwd()
#specify directory where plots will be stored. Without definition of plotDirectory: current working directory
filedir=getwd()
#store graphical output in different formats in directory defined in argument plotDirectory
welch_cars=visstat(mtcars,"mpg","am",graphicsoutput="png",plotDirectory=filedir,plotName="hans" )
#store graphical output in different formats in directory defined in argument plotDirectory
welch_cars=visstat(mtcars,"mpg","am",graphicsoutput="png",,plotName="hans2",plotDirectory=filedir )
is.null(grphicsoutput)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
#Chi squqred, mosaic plots with Titanic data set----
#install.packages("titanic")
#example categorical data,
library(titanic)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
titanic_train$Survived = as.factor(titanic_train$Survived)
titanic_train$Pclass = as.factor(titanic_train$Pclass)
#Pearsons Chi squared, mosaic plot with Pearson's residuals
visstat(titanic_train,"Survived","Pclass")
visstat(titanic_train,"Survived","Pclass",graphicsoutpu="png")
visstat(titanic_train,"Survived","Pclass",graphicsoutput="png")
visstat(titanic_train,"Survived","Pclass",plotName="sabine",graphicsoutput="png")
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
#nach zweitem Aufruf Fehler par(oldpa)
linear_regression_trees=visstat(trees,"Girth","Height",graphicsoutput = "pdf",plotName="hugo",plotDirectory=filedir) ;
# If graphicsoutput parameter is set, all plots are stored in the directory specified in the parameter plotDirectory.
# Default directory of plotDirectory is the working directory.
# Graphical output is named following the naming convention
#"statisticalTestName_varsample_varfactor.graphicsoutput"
linear_regression_trees=visstat(trees,"Girth","Height",graphicsoutput = "png",plotDirectory=filedir) ;
linear_regression_trees=visstat(trees,"Girth","Height",graphicsoutput = "pdf",plotName="hugo",plotDirectory=filedir) ;
linear_regression_trees=visstat(trees,"Girth","Height",graphicsoutput = "svg",plotDirectory=filedir) ;
linear_regression_trees=visstat(trees,"Girth","Height",graphicsoutput = "svg",,plotName="dante",plotDirectory=filedir) ;
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
#store graphical output in different formats in directory defined in argument plotDirectory
welch_cars=visstat(mtcars,"mpg","am",graphicsoutput="png",plotName="hans",plotDirectory=filedir )
#Kruskal-Wallis test: iris----
visstat(iris,"Petal.Width", "Species")
visstat(iris,"Petal.Width", "Species",graphicsoutput="pdf")
visstat(iris,"Petal.Width", "Species",graphicsoutput="pdf",plotName="iris_kruskal,"plotDirectory=filedir)
visstat(iris,"Petal.Width", "Species",graphicsoutput="pdf",plotName="iris_kruskal",plotDirectory=filedir)
#Welcht-t-Test
visstat(InsectSpraysAB,"count","spray") #plots not saved
visstat(InsectSpraysAB,"count","spray",graphicsoutput = "png",plotName="insect_count_spray",plotDirectory=filedir)
HairEyeColorMaleFisher = HairEyeColor[,,1]
lackBrownHazelGreen = HairEyeColorMaleFisher[1:2,3:4]
blackBrownHazelGreen = HairEyeColorMaleFisher[1:2,3:4]
blackBrownHazelGreen = counts_to_cases(as.data.frame(blackBrownHazelGreen));
visstat(blackBrownHazelGreen,"Hair","Eye",graphicsoutput = "png",plotDirectory=tempdir())
visstat(iris,"Petal.Width", "Species")
#' ##Choosing  plotName and saving graphical output of type "png" in temporary directory tempdir() and choose
visstat(iris,"Petal.Width", "Species",graphicsoutput = "png",plotName="kruskal_iris_petalwidth_species",plotDirectory=tempdir())
file.remove(file.path(tempdir(),"kruskal_iris_petalwidth_species.png"))
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat_no_saved_plots.R', echo=TRUE)
visstat(iris,"Petal.Width", "Species",graphicsoutput = "png",plotName="kruskal_iris_petalwidth_species",plotDirectory=tempdir())
visstat(iris,"Petal.Width", "Species",graphicsoutput = "pdf",plotName="kruskal_iris_petalwidth_species",plotDirectory=tempdir())
file.remove(file.path(tempdir(),"kruskal_iris_petalwidth_species.pdf"))
visstat(iris,"Petal.Width", "Species",graphicsoutput = "pdf")
file.remove(file.path(tempdir(),"kruskal_Petal_Width_Species.pdf"))
visstat(iris,"Petal.Width", "Species",graphicsoutput = "pdf",plotDirectory=tempdir())
file.remove(file.path(tempdir(),"kruskal_Petal_Width_Species.pdf"))
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
library(visStatistics)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat.R', echo=TRUE)
#specify directory where plots will be stored. Without definition of plotDirectory: current working directory
filedir=tempdir()
graphicaltypes=c(".png", ".pdf", ".svg", ".ps")
for (i in graphicaltypes) {
plotname=dir(filedir,pattern=i)
print(file.path(filedir,plotname))
file.remove(file.path(filedir,plotname))
}
library(visStatistics)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/R/visstat.R', echo=TRUE)
visstat(iris,"Petal.Width","Species",graphicsoutput = "pdf",...
#' plotName="kruskal_iris",plotDirectory=tempdir())
visstat(iris,"Petal.Width","Species",graphicsoutput = "pdf",...
plotName="kruskal_iris",plotDirectory=tempdir())
#' visstat(iris,"Petal.Width","Species",graphicsoutput = "pdf",
#' plotName="kruskal_iris",plotDirectory=tempdir())
visstat(iris,"Petal.Width","Species",graphicsoutput = "pdf",
plotName="kruskal_iris",plotDirectory=tempdir())
library(visStatistics)
visstat(iris,"Petal.Width", "Species",graphicsoutput = "pdf",plotDirectory=tempdir())
file.remove(file.path(tempdir(),"kruskal_Petal_Width_Species.pdf"))
visstat(iris,"Petal.Width","Species",graphicsoutput = "pdf",
plotName="kruskal_iris",plotDirectory=tempdir())
file.remove(file.path(tempdir(),"kruskal_iris_petalwidth_species.pdf"))
file.remove(file.path(tempdir(),"kruskal_iris.pdf"))
library(visStatistics)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat_no_saved_plots.R', echo=TRUE)
counts_to_cases(as.data.frame(HairEyeColor[,,1]),countcol="Freq")
broseVignettes("")
browseVignettes("")
browseVignettes()
library(forestplot)
install.packages("forestplot")
library(forestplot)
install.packages("rmarkdown")
install.packages("pandoc")
install.packages("ctv")
ctv::install.views("Econometrics")
?install_tensorflow()
?install_tensorflow
??install_tensorflow
library(visStatistics)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat_no_saved_plots.R', echo=TRUE)
library(vcd)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat_no_saved_plots.R', echo=TRUE)
library(nortest)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat_no_saved_plots.R', echo=TRUE)
library(multcompView)
source('~/OneDrive - Hochschule Luzern/Forschung/visStatistics/tests/examples/examples_visstat_no_saved_plots.R', echo=TRUE)
visstat(HairEyeColorMale,"Hair","Eye")
res=visstat(HairEyeColorMale,"Hair","Eye")
res
#2x2 contingency tables---
HairEyeColorMaleFisher = HairEyeColor[,,1]
#slicing out a 2 x2 contingency table
blackBrownHazelGreen = HairEyeColorMaleFisher[1:2,3:4]
fishertest = blackBrownHazelGreen
blackBrownHazelGreen = counts_to_cases(as.data.frame(blackBrownHazelGreen));
test2=visstat(blackBrownHazelGreen,"Hair","Eye")
test2
test2=visstat(blackBrownHazelGreen,"Hair","Eye")
#slicing out a 3 x3 table
blackBrownHazelGreen = HairEyeColorMaleFisher[1:3,2:4]
fishertest = blackBrownHazelGreen
blackBrownHazelGreen = counts_to_cases(as.data.frame(blackBrownHazelGreen));
test2=visstat(blackBrownHazelGreen,"Hair","Eye")
test3=visstat(blackBrownHazelGreen,"Hair","Eye")
test3
#slicing out a 3 x3 table
three = HairEyeColorMaleFisher[1:3,2:4]
three = counts_to_cases(as.data.frame(three));
test3=visstat(three,"Hair","Eye")
#slicing out a 3 x3 table
three = HairEyeColorMaleFisher[1:3,2:4]
three = counts_to_cases(as.data.frame(three));
test3=visstat(three,"Hair","Eye")
?mosaic
?visstat
